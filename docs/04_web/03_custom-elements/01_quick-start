# Quick Start

Let's create a simple web component using Genesis. There are three parts that make up a component: the HTML template, the CSS styles and the component logic. Web components can vary in complexity, from a simple button to a very detailed interactive experience.

## Create Custom Element

Start by importing all necessary part:

```shell
import { css, customElement, GenesisElement, html } from '@genesislcap/web-core';
```

```shell

# Create an HTML template using the html tag template literal
const template = html`<button>Click Me</button>`;

# Create CSS styles using the css tag template literal
const styles = css`
    h1 {
      color: grey;
    }
`;

# The @customElement decorator is a function that helps define and register a custom HTML element. It associates a class with a specific custom tag name in the DOM.

@customElement({
  name: 'my-button',
  template,
  styles,
})

export class HelloWorld extends GenesisElement {}

```

Weâ€™ve created a custom component called <my-button>, which currently displays a basic button in the browser with the text "Click Me." However, to make it more useful, let's add an attribute that allows us to customize the button's label and give it more dynamic functionality.

:::important

Web Component names are required to include a hyphen (-) to avoid conflicts with native HTML elements and to provide a way to namespace components from various libraries.

:::

## Add an Attribute

We can add an `attr` decorator which allows us to link a class property to an HTML attribute, ensuring that changes in the attribute are automatically reflected in the JavaScript property, and vice versa, allowing for clean and declarative state management of custom elements.

Let's declare an attribute called **_name_** and then change that value to see it reflected:

```shell
import { attr, css, customElement, GenesisElement, html } from '@genesislcap/web-core';

@customElement({
  name: 'my-button',
  template: html`<button>Click Me</button>`;,
  styles,
})

export class MyButton extends GenesisElement {
    @attr label = 'Submit';
}

```

Now let's update the template to display the value:

```shell

const template = html`<button>${x => x.label}</button>`
```

## Add it to your project

Now that the component is created, it can be added in your HTML this way:

```shell
<script type="module" src="path/to/hello-world.js"></script>
<my-button label="Cancel"></my-button>
```

In this example, we created a custom web component using GenesisElement. We defined a button template and added a label attribute using the @attr decorator, allowing the button text to be customized via HTML. We implemented the labelChanged method, which is automatically called whenever the label value changes. The template dynamically updates with the new value, ensuring the button remains responsive to changes in its attributes.
