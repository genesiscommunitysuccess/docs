---
description: Genesis foundation forms syntax, to create forms linked to event handlers
globs: **
alwaysApply: true
---
### Foundation Form Component Rules

foundation-forms is a library for efficiently building complex forms and filters at scale.

At its simplest, a form is a collection of fields for entering data. However, forms can also be very complex, allowing you to add different web components, such as checkboxes, tabbed information or even steps to guide the user through a process. There are also many layout options for the information in the form.

1. **Core Requirements**
- ALWAYS use `<foundation-form>` as the main grid component
- ALWAYS add a `resourceName` to connect to the event handler
- CHECK the height of the form component, to make sure it's displaying the grid correctly

2. **Resource Rules**
- Use `resourceName` inside of the `<foundation-form>` components to connect the form to the event handler and call it on submit.

3. **Common Grid Attributes**
- `resourceName` or `jsonSchema` defines the underlying data to be shown in the UI (objects, properties, and their types).
- `uiSchema` defines how this data is rendered as a form, e.g. the order of controls, their visibility, and the layout.

### Component Template Rules

1. **Core Requirements**
- ALWAYS use Rapid Design System `design-system-prefix="rapid"`
- NEVER use Zero Design System components (zero-*)

## 2. Component Examples

### 2.1 Foundation Simple Example
```html
<foundation-form
    design-system-prefix="rapid"
    resourceName="EVENT_INSERT_USER"
></foundation-form>
```

### 2.2 Foundation Form Complex Example
```typescript
const uiSchemaExample = {
  type: "VerticalLayout",
  elements: [
    {
      type: "Control",
      label: "Username",
      scope: "#/properties/USER_NAME",
    },
    {
      type: "Control",
      label: "Email",
      scope: "#/properties/EMAIL",
    },
    {
      type: "Control",
      label: "Password",
      scope: "#/properties/PASSWORD",
      options: {
        isPassword: true,
      },
    },
    {
      type: "Control",
      label: "Password confirmation",
      scope: "#/properties/PASSWORD_CONFIRMATION",
      options: {
        isPassword: true,
      },
    },
  ],
};

export const jsonSchemaExample = {
  type: 'object',
  properties: {
    SIDE: {
      type: 'string',
      description: 'kotlin.String',
    },
    QUANTITY: {
      type: 'number',
      description: 'kotlin.Double',
    },
    SIMPLE_TRADE_ID: {
      type: 'string',
      description: 'kotlin.String',
    }
  }
};

@customElement({
  name: 'form-example',
  template: html`
    <foundation-form
      design-system-prefix="rapid"
      resourceName="EVENT_INSERT_USER"
      :uischema=${(x) => uiSchema}
      :jsonSchema=${(x) => jsonSchema}
    ></foundation-form>
  `,
})
export class FormExample extends GenesisElement {
  uiSchema: UiSchema = uiSchemaExample;
  jsonSchema: JSONSchema7 = jsonSchemaExample;
}
```


## 3. Controls

For multi-line controls, use an options property with textarea set to true. 
E.g.
```
  {
    type: 'Control',
    label: 'Comment',
    scope: '#/properties/COMMENT',
    options: <StringRendererOptions> {
      textarea: true,
    },
  },
```
Ensure that the import is added also:

```
import { StringRendererOptions } from '@genesislcap/foundation-forms';
```

## 4. **Grouping controls**
In order to group controls together use the UiSchema block and elements array. 
To group control elements together place them under options, childElements
E.g.
```
  elements: [
    {
      type: 'Group',
      scope: '#/properties/basic',
      label: 'Basic Information',
      options: <GroupRendererOptions> {
        childElements: [
          {
            type: 'VerticalLayout',
            elements: [
              {
                type: 'Control',
                label: 'First Name',
                scope: '#/properties/FIRST_NAME',
              },
              {
                type: 'Control',
                label: 'Last Name',
                scope: '#/properties/LAST_NAME',
              },
              {
                type: 'Control',
                label: 'Date',
                scope: '#/properties/DATE',
              },
            ],
          },
        ],
      },
    },
  ],
```


