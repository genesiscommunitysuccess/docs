"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[35126],{85150:function(e,a,t){t.r(a),t.d(a,{assets:function(){return E},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return l},metadata:function(){return m},toc:function(){return g}});var n=t(87462),r=t(63366),s=(t(67294),t(3905)),i=(t(61839),["components"]),l={title:"Gateways and Streamers - Examples",sidebar_label:"Examples",id:"examples",keywords:["server","integration","gateways","streamers","examples"],tags:["server","integration","gateways","streamers","examples"]},o=void 0,m={unversionedId:"server/integration/gateways-and-streamers/examples",id:"version-2022.3/server/integration/gateways-and-streamers/examples",title:"Gateways and Streamers - Examples",description:"Streamer example:",source:"@site/versioned_docs/version-2022.3/03_server/10_integration/04_gateways-and-streamers/06_examples.md",sourceDirName:"03_server/10_integration/04_gateways-and-streamers",slug:"/server/integration/gateways-and-streamers/examples",permalink:"/server/integration/gateways-and-streamers/examples",draft:!1,tags:[{label:"server",permalink:"/tags/server"},{label:"integration",permalink:"/tags/integration"},{label:"gateways",permalink:"/tags/gateways"},{label:"streamers",permalink:"/tags/streamers"},{label:"examples",permalink:"/tags/examples"}],version:"2022.3",sidebarPosition:6,frontMatter:{title:"Gateways and Streamers - Examples",sidebar_label:"Examples",id:"examples",keywords:["server","integration","gateways","streamers","examples"],tags:["server","integration","gateways","streamers","examples"]},sidebar:"serverModulesSidebar",previous:{title:"Customisation",permalink:"/server/integration/gateways-and-streamers/customisation"},next:{title:"Configuring Adaptors",permalink:"/server/integration/market-data-adaptors/configuring-adaptors"}},E={},g=[],p={toc:g};function d(e){var a=e.components,t=(0,r.Z)(e,i);return(0,s.kt)("wrapper",(0,n.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Streamer example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'streams {\n    stream("ORDERS_OUT", ORDERS_OUT.BY_TIMESTAMP) {\n        batchSize = 2\n        where { ordersOut, logonMessage ->\n            ordersOut.quanity > 1_000 && logonMessage.getString("KEY") == "SECRET"\n        }\n        fields {\n            ORDERS_OUT.CLIENT_ID\n            ORDERS_OUT.QUANTITY withPrefix "ORDER"\n            ORDERS_OUT.CLIENT_ID withAlias "CLIENT"\n        }\n    }\n}\n')),(0,s.kt)("p",null,"Streamer Client example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'streamerClients {\n    streamerClient(clientName = "QUOTE_RESPONSE") {\n        dataSource(processName = "POSITION_APP-STREAMER", sourceName = "ORDERS_OUT")\n        onMessage {\n            send("QUOTE_EVENT_HANDLER", "QUOTE_UPDATE_EVENT")\n        }\n    }\n\n    streamerClient("FILTERED", QUOTES.SYMBOL) {\n        dataSource("PROC_A", "QUOTES_STREAM")\n\n        onMessage("VODL") {\n            sendFormatted("QUOTE_ENGINE", "VODL_EVENT") {\n                QUOTES.SYMBOL\n                QUOTES.SECURITY_EXCHANGE withAlias "EXCHANGE"\n                "UPDATE" withHeader "VERSION"\n                QUOTES.PRICE withAlias "BID_PRICE"\n            }\n        }\n\n        onMessage("MSFT") {\n            sendFormatted("QUOTE_ENGINE", "MSFT_EVENT") {\n                QUOTES.SYMBOL\n                QUOTES.SECURITY_EXCHANGE withAlias "EXCHANGE"\n                "UPDATE" withHeader "VERSION"\n                "WINDOWS" withHeader "OS"\n                QUOTES.PRICE withAlias "BID_PRICE"\n            }\n        }\n    }\n}\n')))}d.isMDXComponent=!0}}]);