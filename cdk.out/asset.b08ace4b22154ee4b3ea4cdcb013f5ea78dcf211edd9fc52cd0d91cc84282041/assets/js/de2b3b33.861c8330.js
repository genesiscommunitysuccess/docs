"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[62611],{88413:function(n,e,t){t.r(e),t.d(e,{assets:function(){return c},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return r},metadata:function(){return u},toc:function(){return g}});var o=t(87462),i=t(63366),a=(t(67294),t(3905)),s=(t(61839),["components"]),r={},l=void 0,u={unversionedId:"web/micro-front-ends/foundation-login_apiref/foundation-login.login",id:"version-2022.3/web/micro-front-ends/foundation-login_apiref/foundation-login.login",title:"foundation-login.login",description:"Home &gt; @genesislcap/foundation-login &gt; Login",source:"@site/versioned_docs/version-2022.3/04_web/05_micro-front-ends/foundation-login_apiref/foundation-login.login.md",sourceDirName:"04_web/05_micro-front-ends/foundation-login_apiref",slug:"/web/micro-front-ends/foundation-login_apiref/foundation-login.login",permalink:"/web/micro-front-ends/foundation-login_apiref/foundation-login.login",draft:!1,tags:[],version:"2022.3",frontMatter:{}},c={},g=[{value:"Login class",id:"login-class",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Example",id:"example",level:2}],d={toc:g};function f(n){var e=n.components,t=(0,i.Z)(n,s);return(0,a.kt)("wrapper",(0,o.Z)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/web/micro-front-ends/foundation-login_apiref/"},"Home")," ",">"," ",(0,a.kt)("a",{parentName:"p",href:"/web/micro-front-ends/foundation-login_apiref/foundation-login"},"@genesislcap/foundation-login")," ",">"," ",(0,a.kt)("a",{parentName:"p",href:"/web/micro-front-ends/foundation-login_apiref/foundation-login.login"},"Login")),(0,a.kt)("h2",{id:"login-class"},"Login class"),(0,a.kt)("p",null,"Defines the login class which handles account authentication from the front-end"),(0,a.kt)("b",null,"Signature:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export declare class Login extends FASTElement \n")),(0,a.kt)("b",null,"Extends:")," FASTElement",(0,a.kt)("h2",{id:"remarks"},"Remarks"),(0,a.kt)("p",null,"Add the Login class as a router element and it will handle the account authentication for you. Requires use of ",(0,a.kt)("inlineCode",{parentName:"p"},"@genesislcap/foundation-comms")," for the  and  classes."),(0,a.kt)("p",null,"There are a lot of configuration options available, and different authentication types (such as login via SSO)."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"The following is an example of using it in your app, setting it up in the router configuration. This isn't a complete routes confutation, but it contains all required configuration with regards to the Login functionality."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// Import required dependencies from the foundation-login package\nimport { Login, Settings as LoginSettings } from '@genesislcap/foundation-login';\n// Import required dependencies from the foundation-comms package\n// You could also import analytics events and set them up in the NavigationContributor\nimport { Auth, Session, } from '@genesislcap/foundation-comms';\n\n// Define your router config with the login settings as the type\nexport class MainRouterConfig extends RouterConfiguration<LoginSettings> {\n  // Ensure you inject in required dependencies\n  constructor(\n    @Auth private auth: Auth,\n    @Session private session: Session\n  ) {\n    super();\n  }\n\n  // Add the Login class onto the /login route\n  public configure() {\n    ...\n    this.routes.map(\n      { path: '', redirect: 'login' },\n      {\n        path: 'login',\n        element: Login,\n        title: 'Login',\n        name: 'login',\n        layout: loginLayout,\n        // Add settings here [1]\n        settings: {\n          defaultRedirectUrl: 'protected',\n          public: true,\n          resetPassword: true,\n          forgotPassword: true,\n          requestAccount: true,\n          ssoToggle: true,\n          ssoEnable: false,\n        },\n        childRouters: true,\n      },\n      ... // Other routes config here\n    );\n\n    const session = this.session;\n    const auth = this.auth;\n\n    // Example of a FallbackRouteDefinition\n    this.routes.fallback(() =>\n      auth.isLoggedIn ? { redirect: 'not-found' } : { redirect: 'login' }\n    );\n\n     // Example of a NavigationContributor\n    this.contributors.push({\n      navigate: async (phase) => {\n        const settings = phase.route.settings;\n\n        // Could add in processes such as analytics here\n\n        // If public route don't block\n        if (settings && settings.public) {\n          return;\n        }\n\n        // If logged in don't block\n        if (auth.isLoggedIn) {\n          return;\n        }\n\n        // If allowAutoAuth and session is valid try to connect+auto-login [2]\n        if (settings && settings.allowAutoAuth && (await auth.reAuthFromSession())) {\n          return;\n        }\n\n        // Otherwise route them to login\n        phase.cancel(() => {\n          session.captureReturnUrl();\n          Route.name.replace(phase.router, 'login');\n        });\n      },\n    });\n  }\n\n  ... // Other configuration/methods\n\n}\n")),(0,a.kt)("p",null,"[","1","]",",","[","2","]"," ",(0,a.kt)("a",{parentName:"p",href:"/web/micro-front-ends/foundation-login_apiref/foundation-login.settings"},"Settings")))}f.isMDXComponent=!0}}]);