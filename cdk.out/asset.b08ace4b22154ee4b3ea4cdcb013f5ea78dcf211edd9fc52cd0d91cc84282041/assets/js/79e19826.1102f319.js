"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[22929],{35451:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return o},default:function(){return g},frontMatter:function(){return l},metadata:function(){return m},toc:function(){return u}});var r=a(87462),n=a(63366),s=(a(67294),a(3905)),i=(a(61839),["components"]),l={title:"Gateways and Streamers - Streamer",sidebar_label:"Streamer",id:"streamer",keywords:["server","integration","gateways","streamers","streamer"],tags:["server","integration","gateways","streamers","streamer"]},o=void 0,m={unversionedId:"server/integration/gateways-and-streamers/streamer",id:"server/integration/gateways-and-streamers/streamer",title:"Gateways and Streamers - Streamer",description:"This page shows you how to create a Streamer.",source:"@site/docs/03_server/10_integration/04_gateways-and-streamers/02_streamer.md",sourceDirName:"03_server/10_integration/04_gateways-and-streamers",slug:"/server/integration/gateways-and-streamers/streamer",permalink:"/next/server/integration/gateways-and-streamers/streamer",draft:!1,tags:[{label:"server",permalink:"/next/tags/server"},{label:"integration",permalink:"/next/tags/integration"},{label:"gateways",permalink:"/next/tags/gateways"},{label:"streamers",permalink:"/next/tags/streamers"},{label:"streamer",permalink:"/next/tags/streamer"}],version:"current",sidebarPosition:2,frontMatter:{title:"Gateways and Streamers - Streamer",sidebar_label:"Streamer",id:"streamer",keywords:["server","integration","gateways","streamers","streamer"],tags:["server","integration","gateways","streamers","streamer"]},sidebar:"serverModulesSidebar",previous:{title:"Introduction",permalink:"/next/server/integration/gateways-and-streamers/introduction"},next:{title:"Streamer Client",permalink:"/next/server/integration/gateways-and-streamers/streamer-client"}},p={},u=[{value:"Creating a Streamer",id:"creating-a-streamer",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Transforming the stream",id:"transforming-the-stream",level:3}],d={toc:u};function g(e){var t=e.components,a=(0,n.Z)(e,i);return(0,s.kt)("wrapper",(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"This page shows you how to create a Streamer."),(0,s.kt)("h2",{id:"creating-a-streamer"},"Creating a Streamer"),(0,s.kt)("p",null,"To create a Streamer:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Add the process configuration for the Streamer to the ",(0,s.kt)("em",{parentName:"li"},"applicationName"),(0,s.kt)("strong",{parentName:"li"},"-processes.xml")," file. For example:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-xml"},'<process name="POSITION_APP_STREAMER">\n    <start>true</start>\n    <options>-Xmx128m -DXSD_VALIDATE=false</options>\n    <module>genesis-pal-streamer</module>\n    <package>global.genesis.streamer.pal</package>\n    <script>position_app-streamer.kts<\/script>\n    <language>pal</language>\n</process>\n')),(0,s.kt)("p",null,"For more information on the above process tags, see the page on ",(0,s.kt)("a",{parentName:"p",href:"/next/server/data-server/configuring-runtime"},"configuring runtime processes"),"."),(0,s.kt)("ol",{start:2},(0,s.kt)("li",{parentName:"ol"},"Create a Kotlin script file named ",(0,s.kt)("strong",{parentName:"li"},"{app-name}-streamer.kts")," under ",(0,s.kt)("strong",{parentName:"li"},"jvm/{app-name}-script-config"),". Add the following information:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"A stream name"),(0,s.kt)("li",{parentName:"ul"},"A GPAL index reference for a unique index with a single LONG field, this could refer to a table index or a view index.")))),(0,s.kt)("p",null,"The simplest Streamer definition is:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'streams {\n    stream("ORDERS_OUT", ORDER_OUT.BY_TIMESTAMP)  \n}\n')),(0,s.kt)("p",null,"This example creates a stream called ",(0,s.kt)("inlineCode",{parentName:"p"},"ORDERS_OUT"),", based on the ",(0,s.kt)("inlineCode",{parentName:"p"},"ORDER_OUT")," table (or view). The data will be streamed, ordered by timestamp."),(0,s.kt)("h3",{id:"parameters"},"Parameters"),(0,s.kt)("p",null,"You can also specify the following optional parameters in a stream block:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"batchSize")," - default value 100")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"logoffTimeout")," - default value 5000")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"maxLogons")," - default value 1"))),(0,s.kt)("h3",{id:"transforming-the-stream"},"Transforming the stream"),(0,s.kt)("p",null,"You can define the following blocks to transform the stream:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"where"),(0,s.kt)("li",{parentName:"ul"},"fields"),(0,s.kt)("li",{parentName:"ul"},"toGenesisSet")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Where")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"where")," tag enables the stream to be filtered. It is available in two versions: one that has the streamed row as a parameter, and one that also has the logon message."),(0,s.kt)("p",null,"Here, we only stream orders with a quantity greater than 1,000."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'streams {\n    stream("ORDERS_OUT", ORDER_OUT.BY_TIMESTAMP) {\n        where { ordersOut ->\n            ordersOut.quantity > 1_000\n        }\n    }\n}\n')),(0,s.kt)("p",null,"In this example, we only stream orders with a quantity greater than 1,000 and where the logon message has provided a secret key."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'streams {\n    stream("ORDERS_OUT", ORDER_OUT.BY_TIMESTAMP) {\n        where { ordersOut, logonMessage ->\n            ordersOut.quanity > 1_000 && logonMessage.getString("KEY") == "SECRET"\n        }\n    }\n}\n')),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Fields")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"fields")," tag enables you to transform the output in a similar way to views, data server and req rep definitions. For example, here we output three fields:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'streams {\n    stream("ORDERS_OUT", ORDER_OUT.BY_TIMESTAMP) {\n        fields {\n            ORDERS_OUT.CLIENT_ID\n            ORDERS_OUT.QUANTITY withPrefix "ORDER"\n            ORDERS_OUT.CLIENT_ID withAlias "CLIENT"\n        }\n    }\n}\n')),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"toGenesisSet")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"toGenesisSet")," tag enables you to create a custom GenesisSet from the entity:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'streams {\n    stream("ORDERS_OUT", ORDER_OUT.BY_TIMESTAMP) {\n        toGenesisSet { ordersOut ->\n            genesisSet {\n                "ORDER_QUANTITY" with ordersOut.quantity\n                "ORDER" with ordersOut.orderId\n            }\n        }\n    }\n}\n')))}g.isMDXComponent=!0}}]);