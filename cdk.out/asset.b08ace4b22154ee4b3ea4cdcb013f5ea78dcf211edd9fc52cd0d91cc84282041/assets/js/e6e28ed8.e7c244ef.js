"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[23838],{27880:function(_,n,A){A.r(n),A.d(n,{assets:function(){return T},contentTitle:function(){return E},default:function(){return t},frontMatter:function(){return D},metadata:function(){return I},toc:function(){return l}});var N=A(87462),O=A(63366),e=(A(67294),A(3905)),C=(A(61839),["components"]),D={id:"guide-13",sidebar_label:"The view dictionary",sidebar_position:48,title:"The view dictionary"},E=void 0,I={unversionedId:"getting-started/use-cases/excel-to-genesis/Files/guide-13",id:"getting-started/use-cases/excel-to-genesis/Files/guide-13",title:"The view dictionary",description:"This file contains all the views that have been created by the conversion process.",source:"@site/docs/01_getting-started/05_use-cases/excel-to-genesis/Files/guide-13.md",sourceDirName:"01_getting-started/05_use-cases/excel-to-genesis/Files",slug:"/getting-started/use-cases/excel-to-genesis/Files/guide-13",permalink:"/next/getting-started/use-cases/excel-to-genesis/Files/guide-13",draft:!1,tags:[],version:"current",sidebarPosition:48,frontMatter:{id:"guide-13",sidebar_label:"The view dictionary",sidebar_position:48,title:"The view dictionary"},sidebar:"learningSidebar",previous:{title:"The tables dictionary",permalink:"/next/getting-started/use-cases/excel-to-genesis/Files/guide-12"},next:{title:"The Event Handler file",permalink:"/next/getting-started/use-cases/excel-to-genesis/Files/guide-5"}},T={},l=[],S={toc:l};function t(_){var n=_.components,A=(0,O.Z)(_,C);return(0,e.kt)("wrapper",(0,N.Z)({},S,A,{components:n,mdxType:"MDXLayout"}),(0,e.kt)("p",null,"This file contains all the views that have been created by the conversion process."),(0,e.kt)("pre",null,(0,e.kt)("code",{parentName:"pre",className:"language-kotlin"},'views {\n  view ("CASH_MGMT_DASHBOARD_VIEW", CASH_MGMT_DASHBOARD) {\n    joins {\n      joining(MAPPING) {\n        on(CASH_MGMT_DASHBOARD.ACCT_CODE to MAPPING.BLOOMBERG_REFERENCE_NO)\n      }\n      joining(CUSTODY_POSITIONS) {\n        on(CASH_MGMT_DASHBOARD.ACCOUNT_NUMBER to CUSTODY_POSITIONS.ACCOUNT_NUMBER_PREFERRED_PER_FORMATTED)\n      }\n      joining(FUND_ADMIN_BALANCES) {\n        // unable to join using: "${"      "}${ACCT_CODE}"\n        on(CASH_MGMT_DASHBOARD.ACCT_CODE to FUND_ADMIN_BALANCES.BALANCE_DATE)\n      }\n      joining(FUND_NAV) {\n        on(CASH_MGMT_DASHBOARD.ACCT_CODE to FUND_NAV.BALANCE_DATE)\n      }\n    }\n    fields {\n      CASH_MGMT_DASHBOARD.allFields()\n      MAPPING.CLIENT_LEGAL_NAME\n      CUSTODY_POSITIONS.AVAILABLE_BALANCE_END_OF_DAY\n      FUND_ADMIN_BALANCES.CURRENT_INVESTABLE\n      FUND_NAV.MV_PLUS_PENDING\n      derivedField("CONSOLIDATE_FUND", STRING) {\n        // B: VLOOKUP(A2,ConsolidationMapping,2,FALSE)\n        withInput(CASH_MGMT_DASHBOARD.ACCT_CODE, MAPPING.CLIENT_LEGAL_NAME) { ACCT_CODE, MAPPING_CLIENT_LEGAL_NAME -> \n          if(ACCT_CODE == null) return@withInput null\n          if(MAPPING_CLIENT_LEGAL_NAME == null) return@withInput null\n          MAPPING_CLIENT_LEGAL_NAME\n        }\n      }\n      derivedField("CUSTODY_AVAILABLE_BALANCE_EOD", DOUBLE) {\n        // F: VLOOKUP(D2,CustodyBalanceRange,3,FALSE)\n        withInput(CASH_MGMT_DASHBOARD.ACCOUNT_NUMBER, CUSTODY_POSITIONS.AVAILABLE_BALANCE_END_OF_DAY) { ACCOUNT_NUMBER, CUSTODY_POSITIONS_AVAILABLE_BALANCE_END_OF_DAY -> \n          if(ACCOUNT_NUMBER == null) return@withInput null\n          if(CUSTODY_POSITIONS_AVAILABLE_BALANCE_END_OF_DAY == null) return@withInput null\n          CUSTODY_POSITIONS_AVAILABLE_BALANCE_END_OF_DAY\n        }\n      }\n      derivedField("PERCENT_OF_NAV", DOUBLE) {\n        // G: (F2/Q2)*100\n        withInput(CASH_MGMT_DASHBOARD.ACCOUNT_NUMBER, CUSTODY_POSITIONS.AVAILABLE_BALANCE_END_OF_DAY, CASH_MGMT_DASHBOARD.ACCT_CODE, FUND_NAV.MV_PLUS_PENDING) { ACCOUNT_NUMBER, CUSTODY_POSITIONS_AVAILABLE_BALANCE_END_OF_DAY, ACCT_CODE, FUND_NAV_MV_PLUS_PENDING -> \n          if(ACCOUNT_NUMBER == null) return@withInput null\n          if(CUSTODY_POSITIONS_AVAILABLE_BALANCE_END_OF_DAY == null) return@withInput null\n          if(ACCT_CODE == null) return@withInput null\n          if(FUND_NAV_MV_PLUS_PENDING == null) return@withInput null\n          val CUSTODY_AVAILABLE_BALANCE_EOD = CUSTODY_POSITIONS_AVAILABLE_BALANCE_END_OF_DAY\n          val NAV = FUND_NAV_MV_PLUS_PENDING\n          (CUSTODY_AVAILABLE_BALANCE_EOD / NAV) * 100.0\n        }\n      }\n      derivedField("FUND_ADMIN_BAL", DOUBLE) {\n        // J: VLOOKUP(CONCATENATE("      ",A2),AIMData,3,FALSE)\n        withInput(CASH_MGMT_DASHBOARD.ACCT_CODE, FUND_ADMIN_BALANCES.CURRENT_INVESTABLE) { ACCT_CODE, FUND_ADMIN_BALANCES_CURRENT_INVESTABLE -> \n          if(ACCT_CODE == null) return@withInput null\n          if(FUND_ADMIN_BALANCES_CURRENT_INVESTABLE == null) return@withInput null\n          FUND_ADMIN_BALANCES_CURRENT_INVESTABLE\n        }\n      }\n      derivedField("BALANCE_DIFF", DOUBLE) {\n        // K: ABS((F2-J2)/J2)\n        withInput(CASH_MGMT_DASHBOARD.ACCOUNT_NUMBER, CUSTODY_POSITIONS.AVAILABLE_BALANCE_END_OF_DAY, CASH_MGMT_DASHBOARD.ACCT_CODE, FUND_ADMIN_BALANCES.CURRENT_INVESTABLE) { ACCOUNT_NUMBER, CUSTODY_POSITIONS_AVAILABLE_BALANCE_END_OF_DAY, ACCT_CODE, FUND_ADMIN_BALANCES_CURRENT_INVESTABLE -> \n          if(ACCOUNT_NUMBER == null) return@withInput null\n          if(CUSTODY_POSITIONS_AVAILABLE_BALANCE_END_OF_DAY == null) return@withInput null\n          if(ACCT_CODE == null) return@withInput null\n          if(FUND_ADMIN_BALANCES_CURRENT_INVESTABLE == null) return@withInput null\n          val CUSTODY_AVAILABLE_BALANCE_EOD = CUSTODY_POSITIONS_AVAILABLE_BALANCE_END_OF_DAY\n          val FUND_ADMIN_BAL = FUND_ADMIN_BALANCES_CURRENT_INVESTABLE\n          java.lang.Math.abs((CUSTODY_AVAILABLE_BALANCE_EOD - FUND_ADMIN_BAL) / FUND_ADMIN_BAL)\n        }\n      }\n      derivedField("NAV", DOUBLE) {\n        // Q: VLOOKUP(A2,NAVRange,4,FALSE)\n        withInput(CASH_MGMT_DASHBOARD.ACCT_CODE, FUND_NAV.MV_PLUS_PENDING) { ACCT_CODE, FUND_NAV_MV_PLUS_PENDING -> \n          if(ACCT_CODE == null) return@withInput null\n          if(FUND_NAV_MV_PLUS_PENDING == null) return@withInput null\n          FUND_NAV_MV_PLUS_PENDING\n        }\n      }\n    }\n  }\n  view ("CONSOLIDATED_FUNDS_VIEW", CONSOLIDATED_FUNDS) {\n    fields {\n      CONSOLIDATED_FUNDS.allFields()\n      derivedField("HOLDINGS_LEVEL", DOUBLE) {\n        // J: IF(G2<>0,H2/G2,0)\n        withInput(CONSOLIDATED_FUNDS.SUM_OF_NAV, CONSOLIDATED_FUNDS.SUM_OF_FUND_HOLDINGS_LEVEL) { SUM_OF_NAV, SUM_OF_FUND_HOLDINGS_LEVEL -> \n          if(SUM_OF_NAV == null) return@withInput null\n          if(SUM_OF_FUND_HOLDINGS_LEVEL == null) return@withInput null\n          if (SUM_OF_NAV != 0.0) SUM_OF_FUND_HOLDINGS_LEVEL / SUM_OF_NAV else 0.0\n        }\n      }\n      derivedField("GLF_LEVEL", DOUBLE) {\n        // K: IF(G2<>0,I2/G2,0)\n        withInput(CONSOLIDATED_FUNDS.SUM_OF_NAV, CONSOLIDATED_FUNDS.SUM_OF_GLF_HOLDINGS) { SUM_OF_NAV, SUM_OF_GLF_HOLDINGS -> \n          if(SUM_OF_NAV == null) return@withInput null\n          if(SUM_OF_GLF_HOLDINGS == null) return@withInput null\n          if (SUM_OF_NAV != 0.0) SUM_OF_GLF_HOLDINGS / SUM_OF_NAV else 0.0\n        }\n      }\n    }\n  }\n  view ("CASH_MVMNT_ORDERS_VIEW", CASH_MVMNT_ORDERS) {\n    joins {\n      joining(CASH_MGMT_DASHBOARD) {\n        on(CASH_MVMNT_ORDERS.ACCOUNT to CASH_MGMT_DASHBOARD.ACCT_CODE)\n      }\n    }\n    fields {\n      CASH_MVMNT_ORDERS.allFields()\n      CASH_MGMT_DASHBOARD.MAX_DEPOSIT_AMOUNT_BASED_ON_PERCENT_LIMIT\n      CASH_MGMT_DASHBOARD.POTENTIAL_ADDITIONAL_TBILLS_DEPOSIT\n  //    derivedField("SIDE", STRING) {\n        // E: IF(VLOOKUP(C2, \'Cash Mgmt Dashboard\'!$A$2:$Y$11, 22,FALSE)="SWEEP", "Buy", "Sell")\n  //      withInput(CASH_MVMNT_ORDERS.ACCOUNT, CASH_MGMT_DASHBOARD.MAX_DEPOSIT_AMOUNT_BASED_ON_PERCENT_LIMIT) { ACCOUNT, CASH_MGMT_DASHBOARD_MAX_DEPOSIT_AMOUNT_BASED_ON_PERCENT_LIMIT -> \n  //        if(ACCOUNT == null) return@withInput null\n  //        if(CASH_MGMT_DASHBOARD_MAX_DEPOSIT_AMOUNT_BASED_ON_PERCENT_LIMIT == null) return@withInput null\n  //        if (CASH_MGMT_DASHBOARD_MAX_DEPOSIT_AMOUNT_BASED_ON_PERCENT_LIMIT == "SWEEP") "Buy" else "Sell"\n  //      }\n  //    }\n      derivedField("FINAL_QUANTITY", DOUBLE) {\n        // F: I2\n        withInput(CASH_MVMNT_ORDERS.ACCOUNT, CASH_MGMT_DASHBOARD.POTENTIAL_ADDITIONAL_TBILLS_DEPOSIT) { ACCOUNT, CASH_MGMT_DASHBOARD_POTENTIAL_ADDITIONAL_TBILLS_DEPOSIT -> \n          if(ACCOUNT == null) return@withInput null\n          if(CASH_MGMT_DASHBOARD_POTENTIAL_ADDITIONAL_TBILLS_DEPOSIT == null) return@withInput null\n          val SUGGESTED_QUANTITY = (CASH_MGMT_DASHBOARD_POTENTIAL_ADDITIONAL_TBILLS_DEPOSIT / 10000.0) * 10000.0\n          SUGGESTED_QUANTITY\n        }\n      }\n      derivedField("SUGGESTED_QUANTITY", DOUBLE) {\n        // I: ROUNDDOWN(VLOOKUP(C2, \'Cash Mgmt Dashboard\'!$A$2:$Y$11, 23,FALSE)/10000,0)*10000\n        withInput(CASH_MVMNT_ORDERS.ACCOUNT, CASH_MGMT_DASHBOARD.POTENTIAL_ADDITIONAL_TBILLS_DEPOSIT) { ACCOUNT, CASH_MGMT_DASHBOARD_POTENTIAL_ADDITIONAL_TBILLS_DEPOSIT -> \n          if(ACCOUNT == null) return@withInput null\n          if(CASH_MGMT_DASHBOARD_POTENTIAL_ADDITIONAL_TBILLS_DEPOSIT == null) return@withInput null\n          (CASH_MGMT_DASHBOARD_POTENTIAL_ADDITIONAL_TBILLS_DEPOSIT / 10000.0) * 10000.0\n        }\n      }\n      derivedField("SECURITY_MAP", STRING) {\n        // A: _xlfn.CONCAT(C2,B2)\n        withInput(CASH_MVMNT_ORDERS.ACCOUNT, CASH_MVMNT_ORDERS.SECURITY) { ACCOUNT, SECURITY -> \n          if(ACCOUNT == null) return@withInput null\n          if(SECURITY == null) return@withInput null\n          "${ACCOUNT}${SECURITY}"\n        }\n      }\n    }\n  }\n  view ("CUSTODY_POSITIONS_VIEW", CUSTODY_POSITIONS) {\n    fields {\n      CUSTODY_POSITIONS.allFields()\n      derivedField("COMPOSITE_ACCOUNT_NUM", STRING) {\n        // A: _xlfn.CONCAT(B2,C2)\n        withInput(CUSTODY_POSITIONS.ACCOUNT_NAME, CUSTODY_POSITIONS.ACCOUNT_NUMBER_PREFERRED_PER_FORMATTED) { ACCOUNT_NAME, ACCOUNT_NUMBER_PREFERRED_PER_FORMATTED -> \n          if(ACCOUNT_NAME == null) return@withInput null\n          if(ACCOUNT_NUMBER_PREFERRED_PER_FORMATTED == null) return@withInput null\n          "${ACCOUNT_NAME}${ACCOUNT_NUMBER_PREFERRED_PER_FORMATTED}"\n        }\n      }\n    }\n  }\n  view ("MARGIN_CALLS_VIEW", MARGIN_CALLS) {\n    fields {\n      MARGIN_CALLS.allFields()\n      derivedField("RECALLACTIONFOUND", DOUBLE) {\n        // V: IF(ISERR(SEARCH("Delivery", U2,1)), 0, SEARCH("Delivery", U2,1))\n        withInput(MARGIN_CALLS.ACTION) { ACTION -> \n          if(ACTION == null) return@withInput null\n          try {global.genesis.dictionary.pal.util.ExcelFormulaHelper.search("Delivery", ACTION, 1.0)} catch (e: Exception) {0.0}\n        }\n      }\n      derivedField("RECALLACTIONFOUND_1", DOUBLE) {\n        // W: IF(ISERR(SEARCH("Recall", U2,1)), 0, SEARCH("Recall", U2,1))\n        withInput(MARGIN_CALLS.ACTION) { ACTION -> \n          if(ACTION == null) return@withInput null\n          try {global.genesis.dictionary.pal.util.ExcelFormulaHelper.search("Recall", ACTION, 1.0)} catch (e: Exception) {0.0}\n        }\n      }\n      derivedField("TYPE", STRING) {\n        // X: IF(W2>0,"Inflow", IF(V2>0, "Outflow", "NO Flow"))\n        withInput(MARGIN_CALLS.ACTION) { ACTION -> \n          if(ACTION == null) return@withInput null\n          val RECALLACTIONFOUND_1 = try {global.genesis.dictionary.pal.util.ExcelFormulaHelper.search("Recall", ACTION, 1.0)} catch (e: Exception) {0.0}\n          val RECALLACTIONFOUND = try {global.genesis.dictionary.pal.util.ExcelFormulaHelper.search("Delivery", ACTION, 1.0)} catch (e: Exception) {0.0}\n          if (RECALLACTIONFOUND_1 > 0.0) "Inflow" else if (RECALLACTIONFOUND > 0.0) "Outflow" else "NO Flow"\n        }\n      }\n    }\n  }\n  view ("T_BILL_HOLDINGS_VIEW", T_BILL_HOLDINGS) {\n    fields {\n      T_BILL_HOLDINGS.allFields()\n      derivedField("TBILLID", STRING) {\n        // A: _xlfn.CONCAT(B2,D2)\n        withInput(T_BILL_HOLDINGS.ACCOUNT_CODE, T_BILL_HOLDINGS.ISIN) { ACCOUNT_CODE, ISIN -> \n          if(ACCOUNT_CODE == null) return@withInput null\n          if(ISIN == null) return@withInput null\n          "${ACCOUNT_CODE}${ISIN}"\n        }\n      }\n    }\n  }\n  view ("FUND_HOLDINGS_VIEW", FUND_HOLDINGS) {\n    fields {\n      FUND_HOLDINGS.allFields()\n      derivedField("FUND_COMP_ID", STRING) {\n        // A: _xlfn.CONCAT(B2,C2)\n        withInput(FUND_HOLDINGS.ACCOUNT_CODE, FUND_HOLDINGS.SECURITY_DESCRIPTION) { ACCOUNT_CODE, SECURITY_DESCRIPTION -> \n          if(ACCOUNT_CODE == null) return@withInput null\n          if(SECURITY_DESCRIPTION == null) return@withInput null\n          "${ACCOUNT_CODE}${SECURITY_DESCRIPTION}"\n        }\n      }\n    }\n  }\n}\n')))}t.isMDXComponent=!0}}]);