"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[81005],{63669:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return o},default:function(){return k},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return u}});var a=t(87462),r=t(63366),i=(t(67294),t(3905)),s=(t(61839),["components"]),l={title:"API Reference - Network API",sidebar_label:"Network API",id:"network-api",keywords:["database","api","reference","network"],tags:["database","api","reference","network"]},o=void 0,d={unversionedId:"database/api-reference/network-api",id:"version-2022.3/database/api-reference/network-api",title:"API Reference - Network API",description:"Use these APIs to send and receive messages between micro-services.",source:"@site/versioned_docs/version-2022.3/02_database/09_api-reference/04_network-api.md",sourceDirName:"02_database/09_api-reference",slug:"/database/api-reference/network-api",permalink:"/database/api-reference/network-api",draft:!1,tags:[{label:"database",permalink:"/tags/database"},{label:"api",permalink:"/tags/api"},{label:"reference",permalink:"/tags/reference"},{label:"network",permalink:"/tags/network"}],version:"2022.3",sidebarPosition:4,frontMatter:{title:"API Reference - Network API",sidebar_label:"Network API",id:"network-api",keywords:["database","api","reference","network"],tags:["database","api","reference","network"]},sidebar:"databaseSidebar",previous:{title:"Event Handler API",permalink:"/database/api-reference/event-handler-api"},next:{title:"Service provider API",permalink:"/database/api-reference/service-provider-api"}},p={},u=[{value:"ClientConnectionsManager\u200b",id:"clientconnectionsmanager",level:2},{value:"GenesisMessageClient\u200b",id:"genesismessageclient",level:2},{value:"Constructor\u200b",id:"constructor",level:3},{value:"Functions\u200b",id:"functions",level:3},{value:"Properties\u200b",id:"properties",level:3},{value:"GenesisMessageHandler\u200b",id:"genesismessagehandler",level:2},{value:"Functions\u200b",id:"functions-1",level:3},{value:"GenesisMessageListener\u200b",id:"genesismessagelistener",level:2},{value:"onNewMessage\u200b",id:"onnewmessage",level:3}],g={toc:u};function k(e){var n=e.components,t=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Use these APIs to send and receive messages between micro-services."),(0,i.kt)("h2",{id:"clientconnectionsmanager"},"ClientConnectionsManager",(0,i.kt)("a",{parentName:"h2",href:"/database/api-reference/network-api/#clientconnectionsmanagerdirect-link-to-heading"},"\u200b")),(0,i.kt)("p",null,"Use\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"@Inject"),"\xa0to create\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"ClientConnectionsManager"),"."),(0,i.kt)("p",null,"See the example below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"class TestService(@Inject val clientConnectionManager: ClientConnectionsManager) {}\n")),(0,i.kt)("h2",{id:"genesismessageclient"},"GenesisMessageClient",(0,i.kt)("a",{parentName:"h2",href:"/database/api-reference/network-api/#genesismessageclientdirect-link-to-heading"},"\u200b")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"GenesisMessageClient"),"\xa0is a messaging client that can be obtained using\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"ClientConnectionManager"),". Here is an example:"),(0,i.kt)("p",null,"If you connect successfully to the POSITION_APP_EVENT_HANDLER service, you will get GenesisMessageClient. Otherwise, you will get null."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'class TestAuthManagerService(@Inject val clientConnectionManager: ClientConnectionsManager) {\n    private val genesisMessageClient = clientConnectionManager.getGenesisMessageClient("POSITION_APP_EVENT_HANDLER")    \n    // custom code here\n}\n')),(0,i.kt)("h3",{id:"constructor"},"Constructor",(0,i.kt)("a",{parentName:"h3",href:"/database/api-reference/network-api/#constructordirect-link-to-heading"},"\u200b")),(0,i.kt)("p",null,"GenesisMessageClient(address: String, port: Int, secure: Boolean, configuration: NetworkConfiguration)"),(0,i.kt)("h3",{id:"functions"},"Functions",(0,i.kt)("a",{parentName:"h3",href:"/database/api-reference/network-api/#functionsdirect-link-to-heading"},"\u200b")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Signature"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"addConnectionEventHandler"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"fun addConnectionEventHandler(handler: ConnectionEventHandler)"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"removeConnectionEventHandler"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"fun removeConnectionEventHandler(handler: ConnectionEventHandler)"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"request"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"fun <I : Inbound, O : Outbound> request(messageWorkflow: DataWorkflow<I, O>, timeout: Int = configuration.reqRepTimeout,): Single<O>"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"request"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"suspend fun <I : Any, O : Any> request(messageWorkflow: RequestReplyDataWorkflow<I, O>,timeout: Int = configuration.reqRepTimeout,): Reply<O>"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"request"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"fun <I : Inbound, O : Outbound> request(message: I, output: Class<O>, timeout: Int = configuration.reqRepTimeout,): Single<O>"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"request"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"suspend inline fun <reified O : Outbound> request(message: Inbound, messageType: String, timeout: Int = configuration.reqRepTimeout,): O"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"requestParametric"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"suspend inline fun <reified O, reified P : Any> requestParametric(message: Inbound, messageType: String, timeout: Int = configuration.reqRepTimeout,):"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"sendMessage"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"fun sendMessage(set: GenesisSet): Boolean"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"sendMessage"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"fun sendMessage(set: GenesisMessage): Boolean"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"sendMessages"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"fun sendMessages(sets: List<GenesisSet>)"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"sendReqRep"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"fun sendReqRep(set: GenesisSet, consumer: Consumer<GenesisSet>)"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"sendReqRep"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"fun sendReqRep(set: GenesisSet, consumer: Consumer<GenesisSet>, reqRepTimeout: Int,)"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"sendReqRep"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"fun sendReqRep(set: GenesisSet): ListenableFuture<GenesisSet>"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"sendReqRep"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"fun sendReqRep(set: GenesisSet, reqRepTimeout: Int,): ListenableFuture<GenesisSet>"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"shutdown"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"@Throws(InterruptedException::class) fun shutdown()"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"suspendRequest"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"suspend inline fun <reified I : Inbound, reified O : Outbound> suspendRequest(message: I, timeout: Int = configuration.reqRepTimeout,): O?"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"suspendRequest"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"suspend inline fun <reified I : Inbound, reified O : Outbound> suspendRequest(messageWorkflow: DataWorkflow<I, O>, timeout: Int = configuration.reqRepTimeout,): O?"))))),(0,i.kt)("h3",{id:"properties"},"Properties",(0,i.kt)("a",{parentName:"h3",href:"/database/api-reference/network-api/#propertiesdirect-link-to-heading"},"\u200b")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Summary"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"handler"),(0,i.kt)("td",{parentName:"tr",align:null},"Gives GenesisMessageHandler, which allows us to attach listeners to servers and clients")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"isActive"),(0,i.kt)("td",{parentName:"tr",align:null},"Checks whether netty connector is open for new connection")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"isConnected"),(0,i.kt)("td",{parentName:"tr",align:null},"Checks whether netty connector is open for new connection")))),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'class TestAuthManagerService(@Inject val clientConnectionManager: ClientConnectionsManager) {  \n    private val genesisMessageClient = clientConnectionManager.getGenesisMessageClient("GENESIS_AUTH_MANAGER")    \n    fun sendMessageToEventHandler() {        \n        genesisMessageClient?.waitForConnection()        \n        genesisMessageClient?.sendReqRep(            \n            genesisSet {                \n                MESSAGE_TYPE with "EVENT_LOGIN_AUTH"                \n                SERVICE_NAME with "GENESIS_AUTH_MANAGER"                \n                SOURCE_REF with "sourceRef"                \n                DETAILS with genesisSet {                    \n                    USER_NAME with "User"                    \n                    PASSWORD with "Password"                \n                }            \n            }        \n        )?.get()        \n        genesisMessageClient?.shutdown()    \n    }\n}\n')),(0,i.kt)("h2",{id:"genesismessagehandler"},"GenesisMessageHandler",(0,i.kt)("a",{parentName:"h2",href:"/database/api-reference/network-api/#genesismessagehandlerdirect-link-to-heading"},"\u200b")),(0,i.kt)("p",null,"GenesisMessageHandler enables you to attach listeners to servers and clients."),(0,i.kt)("h3",{id:"functions-1"},"Functions",(0,i.kt)("a",{parentName:"h3",href:"/database/api-reference/network-api/#functionsdirect-link-to-heading-1"},"\u200b")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Signature"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"addListener"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"fun addListener(listener: GenesisMessageListener<V>)"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"removeListener"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"fun removeListener(listener: GenesisMessageListener<V>)"))))),(0,i.kt)("h2",{id:"genesismessagelistener"},"GenesisMessageListener",(0,i.kt)("a",{parentName:"h2",href:"/database/api-reference/network-api/#genesismessagelistenerdirect-link-to-heading"},"\u200b")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"GenesisMessageListener"),"\xa0is a functional interface with method\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"onNewMessage"),", which listens for any new messages.\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"@FunctionalInterface public interface GenesisMessageListener<V extends GenesisMessage>")),(0,i.kt)("h3",{id:"onnewmessage"},"onNewMessage",(0,i.kt)("a",{parentName:"h3",href:"/database/api-reference/network-api/#onnewmessagedirect-link-to-heading"},"\u200b")),(0,i.kt)("p",null,"This method is called when a new message is received."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'class CreateListener(@Inject val clientConnectionManager: ClientConnectionsManager) {    \n    private val genesisMessageClient = clientConnectionManager.getGenesisMessageClient("GENESIS_AUTH_MANAGER")    \n    fun listener(args: Array<String>) {        \n        // Add listener which prints GenesisSet        \n        genesisMessageClient?.handler?.addListener { \n            set: GenesisSet?, channel: GenesisChannel? -> println(set)        \n        }        \n        // Listener gets called when new message is received        \n        genesisMessageClient?.sendMessage(genesisSet {            \n            MESSAGE_TYPE with "EVENT_LOGIN_AUTH"            \n            SERVICE_NAME with "GENESIS_AUTH_MANAGER"            \n            SOURCE_REF with "sourceRef"            \n            DETAILS with genesisSet {                \n                USER_NAME with "User"                \n                PASSWORD with "Password"            \n            }        \n        })    \n    }\n}\n')))}k.isMDXComponent=!0}}]);