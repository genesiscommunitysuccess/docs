"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[38213],{82915:function(e){e.exports=JSON.parse('{"label":"configuration","permalink":"/next/tags/configuration","allTagsPath":"/next/tags","count":11,"items":[{"id":"operations/containerisation/configuration","title":"Genesis Containerisation - configutation","description":"Configuration options","permalink":"/next/operations/containerisation/configuration"},{"id":"server/integration/market-data-adaptors/configuring-adaptors","title":"Market data adaptors - Configuration","description":"This page gives details of the configuration requirements common to adaptors for all vendors.","permalink":"/next/server/integration/market-data-adaptors/configuring-adaptors"},{"id":"server/integration/notify/configuring","title":"Notify - Configuration","description":"The Genesis Notify module enables you to configure an application to send and receive messages to and from various messaging services.","permalink":"/next/server/integration/notify/configuring"},{"id":"server/integration/rest-endpoints/where-to-define","title":"REST endpoints - Where to Define","description":"Introduction | Where to define | Basics | Advanced | Configuring runtime | Testing","permalink":"/next/server/integration/rest-endpoints/where-to-define"},{"id":"server/configuring-runtime/cache","title":"Server Configuration - Cache","description":"Database caching on local modules is supported out of the box. You can configure a caching layer for any Genesis module. The cache can reduce the database workload for tables that contain static data.","permalink":"/next/server/configuring-runtime/cache"},{"id":"server/configuring-runtime/setting-the-database-technology","title":"Server Configuration - Database technology","description":"The Genesis low-code platform supports the following database technology:","permalink":"/next/server/configuring-runtime/setting-the-database-technology"},{"id":"server/configuring-runtime/genesis-router","title":"Server Configuration - Genesis Router","description":"Genesis Router is responsible for all communication between front end and back end.","permalink":"/next/server/configuring-runtime/genesis-router"},{"id":"server/configuring-runtime/introduction","title":"Server Configuration - Introduction","description":"Some files are essential to the development and running of your application. You need to know what they are for and how to configure them. These pages provide the details.","permalink":"/next/server/configuring-runtime/introduction"},{"id":"server/configuring-runtime/processes","title":"Server Configuration - Processes","description":"Each application must have a -processes.xml file. This contains the configuration of each module (data server, request server and event-handler etc). It is generated automatically when you create a new Genesis project using  GenX CLI tool.","permalink":"/next/server/configuring-runtime/processes"},{"id":"server/configuring-runtime/service-definitions","title":"Server Configuration - Service Definitions","description":"Just as each application must have  a -processes.xml config file, it must also have a -service-definitions.xml file. This is where you specify the ports of the various processes. These  are used to communicate internally between processes.","permalink":"/next/server/configuring-runtime/service-definitions"},{"id":"server/configuring-runtime/system-definitions","title":"Server Configuration - System Definitions","description":"The system-definition file genesis-system-definition.kts is the basis of all configurations, scripts, data model, etc. This section explains all the different items that are contained in the file.","permalink":"/next/server/configuring-runtime/system-definitions"}]}')}}]);