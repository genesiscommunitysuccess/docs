"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[20181],{86344:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return c}});var n=r(87462),a=r(63366),i=(r(67294),r(3905)),o=(r(61839),["components"]),s={title:"Web Developer Training - Day 3",sidebar_label:"Day three",sidebar_position:5,id:"web-training-day3",keywords:["getting started","developer training","web training","day three"],tags:["getting started","developer training","server training","day three"]},l="Day 3 agenda",d={unversionedId:"getting-started/web-training/web-training-day3",id:"version-2022.3/getting-started/web-training/web-training-day3",title:"Web Developer Training - Day 3",description:"Custom data grids, client-side options and filters.",source:"@site/versioned_docs/version-2022.3/01_getting-started/10_web-training/03_web-training-day3.md",sourceDirName:"01_getting-started/10_web-training",slug:"/getting-started/web-training/web-training-day3",permalink:"/getting-started/web-training/web-training-day3",draft:!1,tags:[{label:"getting started",permalink:"/tags/getting-started"},{label:"developer training",permalink:"/tags/developer-training"},{label:"server training",permalink:"/tags/server-training"},{label:"day three",permalink:"/tags/day-three"}],version:"2022.3",sidebarPosition:5,frontMatter:{title:"Web Developer Training - Day 3",sidebar_label:"Day three",sidebar_position:5,id:"web-training-day3",keywords:["getting started","developer training","web training","day three"],tags:["getting started","developer training","server training","day three"]},sidebar:"learningSidebar",previous:{title:"Day two",permalink:"/getting-started/web-training/web-training-day2"},next:{title:"Day four",permalink:"/getting-started/web-training/web-training-day4"}},p={},c=[{value:"Order entry screen",id:"order-entry-screen",level:2},{value:"Grid interaction",id:"grid-interaction",level:3},{value:"Custom column config",id:"custom-column-config",level:3},{value:"Saving user preferences",id:"saving-user-preferences",level:3},{value:"Exercise 3.1: getting familiar with Genesis grid-pro attributes",id:"exercise-31-getting-familiar-with-genesis-grid-pro-attributes",level:3},{value:"Exercise 3.2: adding CANCEL action column",id:"exercise-32-adding-cancel-action-column",level:3},{value:"Creating our own grid component",id:"creating-our-own-grid-component",level:2},{value:"Final result",id:"final-result",level:3},{value:"Exercise 3.3: extending Grid Pro",id:"exercise-33-extending-grid-pro",level:3},{value:"Adding filters to the Orders data grid",id:"adding-filters-to-the-orders-data-grid",level:3},{value:"Data server client-side options",id:"data-server-client-side-options",level:3},{value:"Exercise 3.4: using criteria",id:"exercise-34-using-criteria",level:3}],m={toc:c};function g(e){var t=e.components,s=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},m,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"day-3-agenda"},"Day 3 agenda"),(0,i.kt)("p",null,"Custom data grids, client-side options and filters."),(0,i.kt)("h2",{id:"order-entry-screen"},"Order entry screen"),(0,i.kt)("p",null,"Let's continue the development of the order screen."),(0,i.kt)("h3",{id:"grid-interaction"},"Grid interaction"),(0,i.kt)("p",null,"To add new columns that are not part of the resource model (ALL_ORDERS query in this case), we can add additional column definitions."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html",metastring:'{6} title="order.template.ts"',"{6}":!0,title:'"order.template.ts"'},'<zero-grid-pro>\n    <grid-pro-genesis-datasource\n            resourceName="ALL_ORDERS"\n            orderBy="ORDER_ID">\n    </grid-pro-genesis-datasource>\n    <grid-pro-column :definition="${x => x.singleOrderActionColDef}" />\n</zero-grid-pro>\n\n')),(0,i.kt)("p",null,"In the component definition file, we can provide a method that enables us to interact with the rest of the class.\nThe example below creates a column with a button that logs data in the row to the console.\nHere you can easily swap logging the row data with some custom logic (such as calling a back-end API that we shall cover in more detail later on)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'{3,7,10} title="order.ts"',"{3,7,10}":!0,title:'"order.ts"'},"\n  public singleOrderActionColDef = {\n    headerName: 'Action',\n    minWidth: 120,\n    maxWidth: 120,\n    cellRenderer: 'action',\n    cellRendererParams: {\n      actionClick: async (rowData) => {\n        console.log(rowData);\n      },\n      actionName: 'Print Order',\n      appearance: 'primary-gradient',\n    },\n    pinned: 'right',\n  };\n")),(0,i.kt)("admonition",{title:"ColDef and renderes",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Find out more about:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/web/web-components/grids/grid-pro/grid-pro-genesis-column/"},"ColDef and Genesis Grid Pro Column")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/web/web-components/grids/grid-pro/grid-pro-genesis-cell/"},"Cell Renderers")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/web/web-components/grids/grid-pro/grid-pro-renderers/"},"Grid Pro Renderers")))),(0,i.kt)("h3",{id:"custom-column-config"},"Custom column config"),(0,i.kt)("p",null,"If you want to customise how each column is displayed, you can provide column config for every column."),(0,i.kt)("p",null,"Create a new file called orderColumnDefs.ts in the same directory."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="orderColumnDefs.ts"',title:'"orderColumnDefs.ts"'},"export const orderColumnDefs: ColDef[] = [\n  {field: 'INSTRUMENT_ID', headerName: 'Instrument', sort: 'desc', flex: 2},\n  {field: 'QUANTITY', headerName: 'Quantity', valueFormatter: formatNumber(0), type: 'rightAligned', flex: 1, enableCellChangeFlash: true},\n  {field: 'ORDER_ID', headerName: 'Order ID', flex: 1, enableCellChangeFlash: true},\n  {field: 'PRICE', headerName: 'Price', valueFormatter: formatNumber(2), type: 'rightAligned', flex: 1, enableCellChangeFlash: true},\n  {field: 'ORDER_SIDE', headerName: 'Order Side', sort: 'desc', flex: 2},\n  {field: 'NOTES', headerName: 'Notes', sort: 'desc', flex: 2},\n  \n];\n")),(0,i.kt)("p",null,"To stop automatic generation of columns, you need to add the ",(0,i.kt)("inlineCode",{parentName:"p"},"only-template-col-defs")," attribute to the zero-grid-pro."),(0,i.kt)("p",null,"Then use the ",(0,i.kt)("a",{parentName:"p",href:"https://www.fast.design/docs/fast-element/using-directives/#the-repeat-directive"},"repeat")," directive; this includes all the columns from our column config array."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'{4,10-12} title="order.template.ts"',"{4,10-12}":!0,title:'"order.template.ts"'},'import {orderColumnDefs} from \'./orderColumnDefs\';\n\n<zero-grid-pro\n    only-template-col-defs\n    >\n    <grid-pro-genesis-datasource\n        resourceName="ALL_ORDERS"\n        orderBy="ORDER_ID">\n    </grid-pro-genesis-datasource>\n    ${repeat(() => orderColumnDefs, html`\n    <grid-pro-column :definition="${x => x}" />\n    `)}\n    <grid-pro-column :definition="${x => x.singleOrderActionColDef}" />\n</zero-grid-pro>\n')),(0,i.kt)("h3",{id:"saving-user-preferences"},"Saving user preferences"),(0,i.kt)("p",null,"You can add the ",(0,i.kt)("inlineCode",{parentName:"p"},"persist-column-state-key")," to the zero-grid-pro to persist user changes to things such as sorting, column order, and visibility on their machine. With this, when the user reloads the browser, they get the same configuration."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html",metastring:"{2}","{2}":!0},"<zero-grid-pro\n    persist-column-state-key='order-grid-settings'\n>\n")),(0,i.kt)("h3",{id:"exercise-31-getting-familiar-with-genesis-grid-pro-attributes"},"Exercise 3.1: getting familiar with Genesis grid-pro attributes"),(0,i.kt)("admonition",{title:"estimated time",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"15min")),(0,i.kt)("p",null,"Change the row height of the data grid to '20 px'."),(0,i.kt)("admonition",{title:"More Genesis grid-pro attributes",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"You can find all the additional attributes and props, including row height, of the Genesis grid-pro at ",(0,i.kt)("a",{parentName:"p",href:"/web/web-components/grids/grid-pro/grid-pro-intro/"},"Genesis grid-pro documentation"),".")),(0,i.kt)("h3",{id:"exercise-32-adding-cancel-action-column"},"Exercise 3.2: adding CANCEL action column"),(0,i.kt)("admonition",{title:"estimated time",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"40min")),(0,i.kt)("p",null,"Add a new action column called 'Cancel' that calls ",(0,i.kt)("inlineCode",{parentName:"p"},"EVENT_ORDER_CANCEL")," event handler. If an error is returned by the Event, make sure to display an error message."),(0,i.kt)("p",null,"Note that the event will actually delete the order."),(0,i.kt)("admonition",{title:"calling event handlers",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"If you struggle, make sure to revisit this previous lesson on ",(0,i.kt)("a",{parentName:"p",href:"/getting-started/web-training/web-training-day2/#sending-the-data"},"calling event handlers"),".")),(0,i.kt)("h2",{id:"creating-our-own-grid-component"},"Creating our own grid component"),(0,i.kt)("p",null,"It's possible to create your own grid component if you want something completely customized. We can do that creating a new customElement. "),(0,i.kt)("p",null,"In the example below, the component is called ",(0,i.kt)("inlineCode",{parentName:"p"},"positions-grid-pro"),". "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"{10}","{10}":!0},"import {ZeroGridPro, zeroGridProTemplate} from '@genesislcap/foundation-zero-grid-pro';\nimport {customElement} from '@microsoft/fast-element';\nimport {positionsGridStyles} from './grid-pro.styles';\n\n@customElement({\n  name: 'positions-grid-pro',\n  template: zeroGridProTemplate,\n  styles: positionsGridStyles,\n})\nexport class PositionsAgGrid extends ZeroGridPro {\n}\n")),(0,i.kt)("p",null,"Note we are extending ",(0,i.kt)("inlineCode",{parentName:"p"},"ZeroGridPro"),", not ",(0,i.kt)("inlineCode",{parentName:"p"},"FASTElement"),"."),(0,i.kt)("p",null,"Now you need to provide custom styles for the custom component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"import {zeroAgGridStyles} from '@genesislcap/foundation-zero';\nimport {css, ElementStyles} from '@microsoft/fast-element';\nimport {BUY_SIDE, SELL_SIDE, NEW_TRADE_STATUS, CANCELLED_TRADE_STATUS} from './colors';\n\nexport const positionsAgGridStyles: ElementStyles = css`\n  ${zeroAgGridStyles}\n\n  .status-cell {\n    display:flex;\n    align-items: center;\n    margin-left: 6px;\n  }\n  \n  .status-cell::after {\n    content: \"\";\n    position: absolute;\n    left: 6px;\n    height: 100%;\n    width: 3px;\n  }\n\n  .buy-side-trade.status-cell::after {\n    background-color: ${BUY_SIDE};\n  }\n\n  .buy-side-trade {\n    color: ${BUY_SIDE};\n  }\n\n  .sell-side-trade.status-cell::after {\n    background-color: ${SELL_SIDE};\n  }\n\n  .sell-side-trade {\n    color: ${SELL_SIDE};\n  }\n\n  .new-status-trade.status-cell::after {\n    background-color: ${NEW_TRADE_STATUS};\n  }\n\n  .new-status-trade {\n    color: ${NEW_TRADE_STATUS};\n  }\n\n  .cancel-status-trade.status-cell::after {\n    background-color: ${CANCELLED_TRADE_STATUS};\n  }\n\n  .cancel-status-trade {\n    color: ${CANCELLED_TRADE_STATUS};\n  }\n`;\n")),(0,i.kt)("p",null,"This allows us to enhance the column definitions by adding conditional classes:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const tradeCellClassRules = {\n  'buy-side-trade': params => params.value === 'BUY',\n  'sell-side-trade': params => params.value === 'SELL',\n  'new-status-trade': params => params.value === 'NEW',\n  'cancel-status-trade': params => params.value === 'CANCELLED',\n};\n\nexport const tradeColumnDefs: ColDef[] = [\n  {field: 'INSTRUMENT_NAME', headerName: 'Instrument', enableCellChangeFlash: true, flex: 3},\n  {field: 'SIDE', headerName: 'Side', cellClass: 'status-cell', cellClassRules: tradeCellClassRules, enableCellChangeFlash: true, flex: 1},\n  {field: 'QUANTITY', headerName: 'Quantity', valueFormatter: formatNumber(0), type: 'rightAligned', enableCellChangeFlash: true, flex: 1},\n  {field: 'CURRENCY', headerName: 'Ccy', enableCellChangeFlash: true, flex: 1},\n  {field: 'PRICE', headerName: 'Price', valueFormatter: formatNumber(2), type: 'rightAligned', enableCellChangeFlash: true, flex: 2},\n  {field: 'CONSIDERATION', headerName: 'Consideration', valueFormatter: formatNumber(2), type: 'rightAligned', enableCellChangeFlash: true, flex: 2},\n  {field: 'TRADE_DATETIME', headerName: 'Date', valueFormatter: rowData => formatDateLong(rowData.data.TRADE_DATETIME), sort: 'desc', enableCellChangeFlash: true, flex: 2},\n  {field: 'COUNTERPARTY_NAME', headerName: 'Counterparty', enableCellChangeFlash: true, flex: 2},\n  {field: 'TRADE_STATUS', headerName: 'Trade State', cellClass: 'status-cell', cellClassRules: tradeCellClassRules, enableCellChangeFlash: true, flex: 2},\n  {field: 'ENTERED_BY', headerName: 'Entered By', enableCellChangeFlash: true, flex: 2},\n];\n")),(0,i.kt)("h3",{id:"final-result"},"Final result"),(0,i.kt)("p",null,"And so we have our result:"),(0,i.kt)("p",null,(0,i.kt)("img",{src:r(13016).Z,width:"1856",height:"540"})),(0,i.kt)("p",null,"Looks good, doesn't it?"),(0,i.kt)("h3",{id:"exercise-33-extending-grid-pro"},"Exercise 3.3: extending Grid Pro"),(0,i.kt)("admonition",{title:"estimated time",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"30min")),(0,i.kt)("p",null,"Create a OrdersAgGrid extending AgGridZero and apply the same style on the ",(0,i.kt)("inlineCode",{parentName:"p"},"SIDE")," field of the PositionsAgGrid in the OrdersAgGrid - i.e., SIDE will be green when ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"BUY"))," and red when ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"SELL")),"."),(0,i.kt)("h3",{id:"adding-filters-to-the-orders-data-grid"},"Adding filters to the Orders data grid"),(0,i.kt)("p",null,"The way we have been using grid-pro so far is encapsulating a Genesis datasource to have access to Data Server resources. This makes it easier to retrieve data without worrying about the connection, handling update events and so on. This is called ",(0,i.kt)("a",{parentName:"p",href:"/web/web-components/grids/grid-pro/grid-pro-connected/"},"connected data"),"."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/web/web-components/grids/grid-pro/grid-pro-genesis-datasource/"},"Genesis datasource")," offers some ",(0,i.kt)("a",{parentName:"p",href:"/web/web-components/grids/grid-pro/grid-pro-genesis-datasource/#attributes-and-props"},"attributes")," to parametrise how to retrieve the data. Some commonly used attributes are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"criteria: string")),": a Groovy expression to perform filters on the query server; these remain active for the life of the subscription. For example: Expr.dateIsBefore(TRADE_DATE,'20150518') or QUANTITY > 10000.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"orderBy: string")),": This option can be used to select a data server index (defined in tables-dictionary.kts), which is especially useful if you want the data to be sorted in a specific way. By default, data server rows will be returned in order of creation (from oldest database record to newest).")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"resourceName: string")),": The target ",(0,i.kt)("a",{parentName:"p",href:"/server/data-server/introduction/"},"Data Server")," or ",(0,i.kt)("a",{parentName:"p",href:"/server/request-server/introduction/"},"Request Server"),' name. Example: "ALL_TRADES" or "ALT_COUNTERPARTY_ID"'))),(0,i.kt)("p",null,"As you may have noticed, we've already used ",(0,i.kt)("inlineCode",{parentName:"p"},"resourceName")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"orderBy")," when we used the grid-pro-genesis-datasource for the first time. "),(0,i.kt)("p",null,"Now, let's see how we'd use ",(0,i.kt)("inlineCode",{parentName:"p"},"criteria")," to add some filters to the data grid. In the example below, only orders whose side is BUY would be displayed:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{4} title='order.template.ts'","{4}":!0,title:"'order.template.ts'"},'<grid-pro-genesis-datasource\n    resourceName="ALL_ORDERS"\n    orderBy="ORDER_ID"\n    criteria="SIDE == \'BUY\'"\n>\n</grid-pro-genesis-datasource>\n')),(0,i.kt)("p",null,"Having a static filter like that is not always very useful though. Let's make it more dynamic adding a button in the order screen to filter by side and make the criteria read the side to be filtered dynamically:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{1,6} title='order.template.ts'","{1,6}":!0,title:"'order.template.ts'"},'<zero-button @click=${x=> x.toggleSideFilter()}>Toggle SIDE filter</zero-button>\n\n<grid-pro-genesis-datasource\n        resourceName="ALL_ORDERS"\n        orderBy="ORDER_ID"\n        criteria="SIDE == \'${x=>x.sideFilter}\'">\n</grid-pro-genesis-datasource>\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title='order.ts'",title:"'order.ts'"},"@attr public sideFilter = 'BUY';\n\npublic toggleSideFilter() {\n    this.sideFilter = this.sideFilter == 'BUY' ? 'SELL' : 'BUY';\n}\n")),(0,i.kt)("p",null,"Make sure to try it now and click on the 'Toggle SIDE filter' button to see the filter being applied."),(0,i.kt)("p",null,"Ultimately, we can use something like the ",(0,i.kt)("a",{parentName:"p",href:"https://www.fast.design/docs/fast-element/using-directives/#the-ref-directive"},"ref directive")," to make our code completely override the criteria. So, let's add another button to reset the criteria to something else and use the ",(0,i.kt)("inlineCode",{parentName:"p"},"ref")," in grid-pro-genesis-datasource."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{1,3} title='order.template.ts'","{1,3}":!0,title:"'order.template.ts'"},'<zero-button @click=${x=> x.customFilter()}>No filters</zero-button>\n\n<grid-pro-genesis-datasource ${ref(\'ordersGrid\')}\n        resourceName="ALL_ORDERS"\n        orderBy="ORDER_ID"\n        criteria="SIDE == \'${x=>x.sideFilter}\'">\n    </grid-pro-genesis-datasource>\n')),(0,i.kt)("p",null,"Add the ordersGrid property and customFilter method to the Order class:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{1,3} title='order.ts'","{1,3}":!0,title:"'order.ts'"},"@observable ordersGrid: any;\n\npublic customFilter() {\n    this.ordersGrid.criteria = `SIDE == 'BUY' || SIDE == 'SELL'`;\n  }\n")),(0,i.kt)("p",null,"As you can see, there's a reference in the Order class to the grid-pro-genesis-datasource element called ",(0,i.kt)("inlineCode",{parentName:"p"},"ordersGrid")," and we can set its attributes, such as the ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"criteria"))," attribute, to any value we want."),(0,i.kt)("h3",{id:"data-server-client-side-options"},"Data server client-side options"),(0,i.kt)("p",null,"It's also possible to add those attributes, such as ",(0,i.kt)("inlineCode",{parentName:"p"},"criteria")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"orderBy")," (with slightly different naming conventions), to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Connect")," object from Foundation Comms. See example below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{2}","{2}":!0},"// retrieving access type of currently logged-in user\nconst userReq = await this.connect.snapshot('ALL_USERS', {\n    CRITERIA_MATCH: `USER_NAME == '${this.session.getItem('username')}'`,\n});\n")),(0,i.kt)("p",null,"To see a list of all attributes look at ",(0,i.kt)("a",{parentName:"p",href:"/server/data-server/advanced/#client-side-runtime-options"},"Data server client-side options"),"."),(0,i.kt)("admonition",{title:"user session",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"As a side note, the code above also tells us how to retrieve the current logged-in user from the session, which is actually stored in the local storage of the browser. "),(0,i.kt)("p",{parentName:"admonition"},"To find out more, inspect the Local Storage of your browser to see all the data that is being stored. In Chrome, press F12 to open DevTools, then go to ",(0,i.kt)("inlineCode",{parentName:"p"},"Application -> Storage -> Local Storage -> http://localhost:6060/"),".")),(0,i.kt)("h3",{id:"exercise-34-using-criteria"},"Exercise 3.4: using criteria"),(0,i.kt)("admonition",{title:"estimated time",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"20min")),(0,i.kt)("p",null,"Add a new field ",(0,i.kt)("inlineCode",{parentName:"p"},"minimumQuantity")," that the user can enter the minimum quantity of an order to be displayed in the grid. I.e., filter orders by a minimum quantity entered by the user."))}g.isMDXComponent=!0},13016:function(e,t,r){t.Z=r.p+"assets/images/all-trades-grid-03-371d160ba0af6e9a650d50c3adfdadc1.png"}}]);