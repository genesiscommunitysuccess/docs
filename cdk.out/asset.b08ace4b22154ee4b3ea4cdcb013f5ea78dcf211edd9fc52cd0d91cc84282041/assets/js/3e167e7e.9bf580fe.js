"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[45592],{64365:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return d},default:function(){return h},frontMatter:function(){return p},metadata:function(){return u},toc:function(){return c}});var a=n(87462),o=n(63366),i=(n(67294),n(3905)),s=(n(61839),n(74915)),r=n(72451),l=["components"],p={title:"Web Developer Training - Day 4",sidebar_label:"Day four",sidebar_position:6,id:"web-training-day4",keywords:["getting started","developer training","web training","day four"],tags:["getting started","developer training","server training","day four"]},d="Day 4 agenda",u={unversionedId:"getting-started/web-training/web-training-day4",id:"version-2022.3/getting-started/web-training/web-training-day4",title:"Web Developer Training - Day 4",description:"Styling, Design systems, Micro Front-ends and Angular integration\u200b.",source:"@site/versioned_docs/version-2022.3/01_getting-started/10_web-training/04_web-training-day4.md",sourceDirName:"01_getting-started/10_web-training",slug:"/getting-started/web-training/web-training-day4",permalink:"/getting-started/web-training/web-training-day4",draft:!1,tags:[{label:"getting started",permalink:"/tags/getting-started"},{label:"developer training",permalink:"/tags/developer-training"},{label:"server training",permalink:"/tags/server-training"},{label:"day four",permalink:"/tags/day-four"}],version:"2022.3",sidebarPosition:6,frontMatter:{title:"Web Developer Training - Day 4",sidebar_label:"Day four",sidebar_position:6,id:"web-training-day4",keywords:["getting started","developer training","web training","day four"],tags:["getting started","developer training","server training","day four"]},sidebar:"learningSidebar",previous:{title:"Day three",permalink:"/getting-started/web-training/web-training-day3"},next:{title:"Glossary",permalink:"/getting-started/glossary/glossary"}},m={},c=[{value:"Styling",id:"styling",level:2},{value:"grid-pro",id:"grid-pro",level:3},{value:"Layout",id:"layout",level:3},{value:"Exercise 4.1 Styling a Grid-Pro",id:"exercise-41-styling-a-grid-pro",level:3},{value:"Design systems",id:"design-systems",level:2},{value:"Customisation (general)",id:"customisation-general",level:3},{value:"Customisation (app-specific)",id:"customisation-app-specific",level:3},{value:"Customising all components",id:"customising-all-components",level:4},{value:"Customising individual components",id:"customising-individual-components",level:4},{value:"Exercise 4.2 Overriding some components using Design System",id:"exercise-42-overriding-some-components-using-design-system",level:3},{value:"Micro Front-ends",id:"micro-front-ends",level:2},{value:"User Management",id:"user-management",level:3},{value:"Exercise 4.3 Add the User Management into the application",id:"exercise-43-add-the-user-management-into-the-application",level:3},{value:"Front-end reporting",id:"front-end-reporting",level:3},{value:"Server configuration",id:"server-configuration",level:4},{value:"Front-end configuration",id:"front-end-configuration",level:4},{value:"Exercise 4.4 Creating a new ALL_POSITIONS Report",id:"exercise-44-creating-a-new-all_positions-report",level:3},{value:"Angular integration",id:"angular-integration",level:2},{value:"Setting up the Angular project",id:"setting-up-the-angular-project",level:3},{value:"Configuring packages",id:"configuring-packages",level:3},{value:"Using the components",id:"using-the-components",level:3},{value:"Exercise 4.5 Adding a Grid Pro to list Counterparties in our Angular solution",id:"exercise-45-adding-a-grid-pro-to-list-counterparties-in-our-angular-solution",level:3}],g={toc:c};function h(e){var t=e.components,n=(0,o.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"day-4-agenda"},"Day 4 agenda"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"#styling"},"Styling"),", ",(0,i.kt)("a",{parentName:"p",href:"#design-systems"},"Design systems"),", ",(0,i.kt)("a",{parentName:"p",href:"#micro-front-ends"},"Micro Front-ends")," and ",(0,i.kt)("a",{parentName:"p",href:"#angular-integration"},"Angular integration\u200b"),"."),(0,i.kt)("h2",{id:"styling"},"Styling"),(0,i.kt)("p",null,"You might want to customise look and feel using layout and styles. For instance, we can style an ",(0,i.kt)("a",{parentName:"p",href:"#grid-pro"},"grid-pro")," or even a ",(0,i.kt)("a",{parentName:"p",href:"#layout"},"layout")," that supports responsive web design."),(0,i.kt)("h3",{id:"grid-pro"},"grid-pro"),(0,i.kt)("p",null,"We've seen how to create custom grids, now let's see another way to further style it."),(0,i.kt)("p",null,"Styling an grid-pro can be started by creating a stylesheet document that will have some style definitions for the grid. Create a stylesheet file called ",(0,i.kt)("strong",{parentName:"p"},"orders.styles.ts")," and provide the following code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title='orders.styles.ts'",title:"'orders.styles.ts'"},"import {css, ElementStyles} from '@microsoft/fast-element';\n\nexport const ordersGridStyles: ElementStyles = css`\n    .notes-column {\n        color: blue;\n    }\n`\n")),(0,i.kt)("p",null,"Configure your column to have the specific class name:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"{field: 'NOTES', cellClass: 'notes-column'},\n")),(0,i.kt)("p",null,"In ",(0,i.kt)("strong",{parentName:"p"},"order.template.ts"),", in the grid tag, include utility that will inject your stylesheet to the component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{1,5}","{1,5}":!0},'import {ordersGridStyles} from "./orders-grid.styles";\n\n<zero-grid-pro>\n    ...    \n    <slotted-styles :styles=${() => ordersGridStyles}></slotted-styles>\n    ...\n</zero-grid-pro>\n`\n')),(0,i.kt)("p",null,"If you need to provide different class names for specific conditions, you can provide a function to the ",(0,i.kt)("inlineCode",{parentName:"p"},"cellClass")," column config, as shown in the example below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"{field: 'SIDE', cellClass: (params) => params.value === 'BUY' ? : 'buy-side', 'sell-side'},\n")),(0,i.kt)("p",null,"Remember to add the new styles to your stylesheet file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import {css, ElementStyles} from '@microsoft/fast-element';\n\nexport const tradesGridStyles: ElementStyles = css`\n.notes-column {\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n  color: blue;\xa0\xa0\xa0\xa0\xa0\n}\n\n.buy-side {\n  color: green;\n}\xa0\xa0\xa0\xa0\n\n.sell-side {\n  color: red;\n}\n`\n")),(0,i.kt)("h3",{id:"layout"},"Layout"),(0,i.kt)("p",null,"By default, all elements on screen will use ",(0,i.kt)("inlineCode",{parentName:"p"},"display:block"),", but we can easily customise it using our custom component that supports responsive web design."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<foundation-flex-layout class="flex-row flex-sm-column spacing-2x">\n    \x3c!--content--\x3e\n</foundation-flex-layout>\n')),(0,i.kt)("p",null,"For further styling your components, it would make sense to start working with ",(0,i.kt)("a",{parentName:"p",href:"#design-systems"},"Design Systems"),", which is our next topic."),(0,i.kt)("h3",{id:"exercise-41-styling-a-grid-pro"},"Exercise 4.1 Styling a Grid-Pro"),(0,i.kt)("admonition",{title:"ESTIMATED TIME",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"20 mins")),(0,i.kt)("p",null,"Style the ",(0,i.kt)("inlineCode",{parentName:"p"},"quantity")," field of the orders grid in such a way that if the value is bigger than 100 it will be in green, otherwise red."),(0,i.kt)("h2",{id:"design-systems"},"Design systems"),(0,i.kt)("p",null,"A design system is a collection of resources for interactive media that promotes brand alignment of ",(0,i.kt)("a",{parentName:"p",href:"/web/design-systems/introduction/#ux-assets"},"UX assets"),", ",(0,i.kt)("a",{parentName:"p",href:"/web/design-systems/introduction/#design-tokens"},"Design tokens"),", ",(0,i.kt)("a",{parentName:"p",href:"/web/design-systems/introduction/#component-library"},"Component libary"),", and ",(0,i.kt)("a",{parentName:"p",href:"/web/design-systems/introduction/#documentation-site"},"Documentation"),"."),(0,i.kt)("p",null,"The Genesis ",(0,i.kt)("a",{parentName:"p",href:"/web/design-systems/introduction/"},"design system")," implementation provides the elements listed above, as well as a few additional features, such as:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"set of reusable UI components"),(0,i.kt)("li",{parentName:"ul"},"configuration files which allow you to control colours, typography, sizing and various other aspects"),(0,i.kt)("li",{parentName:"ul"},"building blocks for creating your own custom components on top of the design system")),(0,i.kt)("p",null,"When you generate a design system using the Genesis scaffolding CLI tool ",(0,i.kt)("a",{parentName:"p",href:"/getting-started/quick-start/create-a-new-project/"},"GenX")," it will automatically extend a base design system that we have provided. This highly configurable design system is called Genesis Foundation UI. Our design system starts in ",(0,i.kt)("a",{parentName:"p",href:"https://www.axure.com/"},"Axure")," and has been lab-tested to meet the needs of financial markets."),(0,i.kt)("p",null,"Design system are highly configurable and can be shared across multiple applications. When performing customisations, you can control the scope as follows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#customisation-general"},"Customisation (general)")," - applied to the design system itself, affecting all applications that use the system. "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#customisation-app-specific"},"Customisation (app-specific)")," - this is only applied to a single application. Other applications using the same system are not affected.")),(0,i.kt)("h3",{id:"customisation-general"},"Customisation (general)"),(0,i.kt)("p",null,"The starting point for making ",(0,i.kt)("a",{parentName:"p",href:"/web/design-systems/customisation-general/"},"general customisations")," is the ",(0,i.kt)("inlineCode",{parentName:"p"},"src/_config")," folder:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"alpha-design-system\n\u251c\u2500\u2500 dist\n\u251c\u2500\u2500 node_modules\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 _config\n\u2502   \u2502   \u251c\u2500\u2500 styles\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 colors.ts\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 index.ts\n\u2502   \u2502   \u251c\u2500\u2500 tokens\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 custom.ts\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 default.ts\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 index.ts\n\u2502   \u2502   \u251c\u2500\u2500 values\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 color.ts\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.ts\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 misc.ts\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 sizing.ts\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 typography.ts\n\u2502   \u2502   \u2514\u2500\u2500 index.ts\n")),(0,i.kt)("p",null,"It contains configuration files that set default values for various design tokens, as well as a few other settings. You can achieve major visual changes simply by modifying token defaults. There are several categories of token available:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/web/design-systems/tokens/colour/"},"Colour"),": base colours, dark/light mode, colour variants for interactive states (hover etc.)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/web/design-systems/tokens/typography/"},"Typography"),": default font family, font size and line height hierarchy"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/web/design-systems/tokens/sizing/"},"Sizing"),": component sizing, spacing and border style"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/web/design-systems/tokens/miscellaneous/"},"Miscellaneous"),": other configuration options, such as the naming prefix (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"alpha"),")")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"To help you visualise how modifying tokens impacts the component look and feel, we offer a ",(0,i.kt)("a",{parentName:"p",href:"/web/design-systems/preview/"},"live configuration preview"),".")),(0,i.kt)("p",null,"To go beyond adjusting token values, you can override the default component implementation. You can choose only to  override certain aspects of a component (such as template, styles or ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM"},"shadow DOM")," options) or provide a completely custom implementation. By default, components in your design simply re-export components from the underlying foundation design system as is (exact code can vary):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import {foundationButton} from '@genesislcap/foundation-ui';\n\nexport const alphaButton = () => foundationButton();\n")),(0,i.kt)("p",null,"Instead of re-exporting the default, you can provide your own custom implementation:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import {css, FoundationElement, FoundationElementDefinition, html} from '@genesislcap/foundation-ui';\n\nexport const styles = css`\n/* CSS  */\n`;\n\nexport const template = html<AlphaButton>`\n/* Template */\n`;\n\ninterface ButtonDefinition extends FoundationElementDefinition {\n  /* Any properties */\n}\n\nexport class Button extends FoundationElement {\n  /* Any custom logic */\n}\n\nexport const alphaButton = Button.compose<ButtonDefinition>({\n  baseName: 'button',\n  template,\n  styles\n});\n")),(0,i.kt)("h3",{id:"customisation-app-specific"},"Customisation (app-specific)"),(0,i.kt)("p",null,"In the ",(0,i.kt)("a",{parentName:"p",href:"/web/design-systems/customisation-app-specific/"},"Customisation (app-specific)")," you can also choose to customise either ",(0,i.kt)("a",{parentName:"p",href:"#customising-all-components"},"all the components")," or only ",(0,i.kt)("a",{parentName:"p",href:"#customising-individual-components"},"individual ones"),"."),(0,i.kt)("h4",{id:"customising-all-components"},"Customising all components"),(0,i.kt)("p",null,"When you register a design system in an application, there are several configuration options that affect all the components provided by that design system."),(0,i.kt)("p",null,"You can override the default prefix set in the ",(0,i.kt)("inlineCode",{parentName:"p"},"_config")," folder for a specific application as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { alphaButton, provideDesignSystem } from '@genesislcap/alpha-design-system';\n\nprovideDesignSystem()\n    .withPrefix('custom')\n    .register(alphaButton())\n")),(0,i.kt)("p",null,"The element can then be used in HTML using the ",(0,i.kt)("inlineCode",{parentName:"p"},"custom")," prefix:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},"<custom-button>Button</custom-button>\n")),(0,i.kt)("p",null,"You can also override the default ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/mode"},"shadow root mode")," (typically ",(0,i.kt)("inlineCode",{parentName:"p"},"open"),", as that is both recommended and the default). You can choose to close all shadow roots by default using ",(0,i.kt)("inlineCode",{parentName:"p"},"withShadowRootMode()"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"provideDesignSystem()\n    .withShadowRootMode('closed')\n    .register(/* ... */)\n")),(0,i.kt)("p",null,"As a best practice, one should try to avoid registering the same component more than once. If your architecture makes this difficult or impossible, you can provide a custom callback to handle disambiguating the duplicate elements. Further details can be found ",(0,i.kt)("a",{parentName:"p",href:"/web/design-systems/customisation-app-specific/#name-disambiguation"},"here"),"."),(0,i.kt)("h4",{id:"customising-individual-components"},"Customising individual components"),(0,i.kt)("p",null,"The APIs described above impact all components, but those options can also be configured or overridden on a per-component basis. Configuring the component itself takes priority over any design system configuration."),(0,i.kt)("p",null,"The prefix for a component can be configured for a component registration by providing a configuration object with a prefix field during registration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"provideDesignSystem()\n    .register(\n        alphaButton({ prefix: 'custom' })\n    );\n")),(0,i.kt)("p",null,"To use a custom template for a component, provide a ",(0,i.kt)("inlineCode",{parentName:"p"},"template")," field to the configuration object during registration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"provideDesignSystem()\n    .register(\n        alphaButton({\n            template: html`\n                <p>A completely new template</p>\n            `\n        })\n    )\n")),(0,i.kt)("p",null,"Styles for a component can be configured as well, by providing a ",(0,i.kt)("inlineCode",{parentName:"p"},"styles")," field to the configuration object during registration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"provideDesignSystem()\n    .register(\n        alphaButton({\n            styles: css`\n                /* completely replace the original styles */\n            `\n        })\n    )\n")),(0,i.kt)("p",null,"You can also use this technique to extend the existing styles; call the style function to import the originals and compose those with new styles. Here's what that would look like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"provideDesignSystem()\n    .register(\n        alphaButton({\n            styles: (ctx, def) => css`\n                ${buttonStyles(ctx, def)}\n                /* add your style augmentations here */\n            `\n        })\n    )\n")),(0,i.kt)("p",null,"Shadow options can be configured as well, including both ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/mode"},"shadow root mode")," and ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/delegatesFocus"},"focus delegation"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"provideDesignSystem()\n    .register(\n        alphaButton({\n            shadowOptions: {\n                mode: 'closed',\n                delegatesFocus: true\n            }\n        })\n    );\n")),(0,i.kt)("p",null,"For more information on shadow options, see ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Element/attachShadow"},"Element.attachShadow()"),"."),(0,i.kt)("admonition",{title:"key take-away",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"You can register your own design system to make your app(s) look and feel cohesive accross the organization, following your company design guidelines."),(0,i.kt)("p",{parentName:"admonition"},"Other developers will simply reuse the same design system.")),(0,i.kt)("h3",{id:"exercise-42-overriding-some-components-using-design-system"},"Exercise 4.2 Overriding some components using Design System"),(0,i.kt)("admonition",{title:"ESTIMATED TIME",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"40 mins")),(0,i.kt)("p",null,"We've been using components from Genesis Zero Design System, such as ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"zero-select")),", ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"zero-text-field")),", ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"zero-button"))," and so on. "),(0,i.kt)("p",null,"Override the Zero design system, registering a new style for the ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"zero-button"))," so that its background color is green."),(0,i.kt)("p",null,"Additionally, register your own design system called ",(0,i.kt)("strong",{parentName:"p"},"ui-training")," and a new component ",(0,i.kt)("inlineCode",{parentName:"p"},"<ui-training-text-field>")," whose font color is blue. Use this component in the order screen."),(0,i.kt)("h2",{id:"micro-front-ends"},"Micro Front-ends"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"/web/micro-front-ends/introduction/"},"Micro-front-end")," architecture is a design approach in which a front-end app is decomposed into individual, semi-independent ",(0,i.kt)("strong",{parentName:"p"},"micro applications")," working loosely together. There are re-usable micro-front-ends that can be used by Genesis-powered applications, such as ",(0,i.kt)("a",{parentName:"p",href:"/web/micro-front-ends/foundation-header/"},"Foundation Header")," (covered in ",(0,i.kt)("a",{parentName:"p",href:"#"},"Day 1"),"), ",(0,i.kt)("a",{parentName:"p",href:"/web/micro-front-ends/foundation-entity-management/"},"Entity Management")," (pretty much covered in the ",(0,i.kt)("a",{parentName:"p",href:"#"},"Developer Training"),"), ",(0,i.kt)("a",{parentName:"p",href:"#user-management"},"User Management"),", and ",(0,i.kt)("a",{parentName:"p",href:"#front-end-reporting"},"Front-end reporting"),"."),(0,i.kt)("p",null,"Let's take a look at the User Management and Reporting Micro Front-ends."),(0,i.kt)("admonition",{title:"list of all available Micro Front-ends",type:"info"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{parentName:"p",href:"/web/micro-front-ends/introduction/"},"All micro Front-ends"))),(0,i.kt)("h3",{id:"user-management"},"User Management"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"/web/micro-front-ends/foundation-user-management/"},"User Management")," micro front-end is used to manage the users on the front end. Two core components are used to manage the entities ",(0,i.kt)("inlineCode",{parentName:"p"},"grid-pro")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"form"),"."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"User Management is a concrete use case of the ",(0,i.kt)("a",{parentName:"p",href:"/web/micro-front-ends/foundation-entity-management/"},"Entity Management")," micro front-end, which is provided as part of ",(0,i.kt)("inlineCode",{parentName:"p"},"foundation-ui"),".")),(0,i.kt)("p",null,"To enable this micro front-end in your application, follow the steps below:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"@genesislcap/foundation-entity-management")," as a dependency in your ",(0,i.kt)("em",{parentName:"li"},"package.json")," file. Whenever you change the dependencies of your project, ensure you run the bootstrap command again.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  ...\n  "dependencies": {\n    "@genesislcap/foundation-entity-management": "latest"\n  },\n  ...\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Import and declare the class in the page of the class where you wish to use the user manager. Then add User Management to the template html where required:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// Import\nimport { Users, } from '@genesislcap/foundation-entity-management';\n\n// Declare class\nUsers;\n\n// Example html with the user management\n// You can customise this with additional fields, see futher in this documentation\nexport const AdminTemplate: ViewTemplate = html`\n  <zero-tabs>\n    <zero-tab-panel slot=\"tabpanel\">\n      <zero-error-boundary>\n        <user-management></user-management>\n      </zero-error-boundary>\n    </zero-tab-panel>\n  </zero-tabs>\n`;\n")),(0,i.kt)("p",null,"You can customise the functionality of User Management through the properties you set in the html. The primary way to configure the User Management functionality is via the columns that are displayed on the grid."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Default usage, will contain the "default" columns:\n//    username, first name, last name, email, last login\n// as well as the additional entity and status columns\n<user-management></user-management>\n')),(0,i.kt)("p",null,"The default columns are contained in the ",(0,i.kt)("a",{parentName:"p",href:"/web/micro-front-ends/foundation-entity-management_apiref/foundation-entity-management.userscolumnconfig"},"UserColumnConfig")," variable. The ",(0,i.kt)("inlineCode",{parentName:"p"},"Entity")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Status")," columns are always added to the grid."),(0,i.kt)("p",null,"To configure the columns yourself, set the ",(0,i.kt)("inlineCode",{parentName:"p"},"columns")," attribute when you define the User Management in the html. You can mix in your custom column config with the default user columns config using the javascript ",(0,i.kt)("inlineCode",{parentName:"p"},"spread")," operator."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// Custom usage, will contain the "default" columns:\n//    username, first name, last name, email, last login\n// the custom "userColumns"\n// as well as the additional entity and status columns\n<user-management :columns=${() => [...UsersColumnConfig, ...userColumns]}>\n</user-management>\n')),(0,i.kt)("p",null,"Further information about User Management API Ref (such as ",(0,i.kt)("inlineCode",{parentName:"p"},"Permissions")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"persist-column-state-key"),") can be found ",(0,i.kt)("a",{parentName:"p",href:"/web/micro-front-ends/foundation-entity-management_apiref"},"here"),"."),(0,i.kt)("h3",{id:"exercise-43-add-the-user-management-into-the-application"},"Exercise 4.3 Add the User Management into the application"),(0,i.kt)("admonition",{title:"ESTIMATED TIME",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"30 mins")),(0,i.kt)("p",null,"Add the User Management into the application."),(0,i.kt)("h3",{id:"front-end-reporting"},"Front-end reporting"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"/web/micro-front-ends/front-end-reporting/"},"Front-end reporting")," component enables your users to create report specifications, run them, or save them for later use. From the GUI, users can:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"select columns from existing data sources"),(0,i.kt)("li",{parentName:"ul"},"save the report with a name and retrieve it for future use"),(0,i.kt)("li",{parentName:"ul"},"apply ad hoc filtering to a report"),(0,i.kt)("li",{parentName:"ul"},"export the report results to .csv  format")),(0,i.kt)("h4",{id:"server-configuration"},"Server configuration"),(0,i.kt)("p",null,"This component requires a server side module to be installed and running. Luckily, this is already available in the WSL training distro you're using."),(0,i.kt)("p",null,"To make data available to users so that they can create reports, you must insert entries into the ",(0,i.kt)("inlineCode",{parentName:"p"},"REPORT_DATASOURCES")," table. This table determines which data resources can be reported on."),(0,i.kt)("p",null,"The Report Server adds the following metadata services:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"ALL_SAVED_REPORTS (Data Server)"),(0,i.kt)("li",{parentName:"ul"},"SAVED_REPORTS (Request Response)"),(0,i.kt)("li",{parentName:"ul"},"ALL_REPORT_DATASOURCES (Request Response)")),(0,i.kt)("h4",{id:"front-end-configuration"},"Front-end configuration"),(0,i.kt)("p",null,"To enable this micro front-end in your application, follow the steps below."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"@genesislcap/foundation-reporting")," as a dependency in your ",(0,i.kt)("em",{parentName:"li"},"package.json")," file.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  ...\n  "dependencies": {\n    "@genesislcap/foundation-reporting": "1.0.1-alpha-7ea7de2.0"\n  },\n  ...\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Import the module and configure the route in your routes ",(0,i.kt)("strong",{parentName:"li"},"config.ts")," file.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Synchronous example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// Import\nimport {Reporting} from '@genesislcap/foundation-reporting';\n\n// Routes configure\npublic configure() {\n  ...\n  this.routes.map(\n    ...\n    {path: 'reporting', element: Reporting, title: 'Reporting', name: 'reporting'},\n    ...\n  );\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Asynchronous example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// Routes async configure\npublic async configure() {\n  ...\n  this.routes.map(\n    ...\n    {path: 'reporting', element: (await import('@genesislcap/foundation-reporting')).Reporting, title: 'Reporting', name: 'reporting'},\n    ...\n  );\n}\n")),(0,i.kt)("h3",{id:"exercise-44-creating-a-new-all_positions-report"},"Exercise 4.4 Creating a new ALL_POSITIONS Report"),(0,i.kt)("admonition",{title:"ESTIMATED TIME",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"25 mins")),(0,i.kt)("p",null,"Create a new report using the ALL_POSITIONS query in the Data Server."),(0,i.kt)("h2",{id:"angular-integration"},"Angular integration"),(0,i.kt)("p",null,"Genesis Foundation integrates nicely with Angular. Let's take a look at how you can set up an Angular project, starting from scratch."),(0,i.kt)("h3",{id:"setting-up-the-angular-project"},"Setting up the Angular project"),(0,i.kt)("p",null,"First, you'll need to make sure that you have ",(0,i.kt)("a",{parentName:"p",href:"https://nodejs.org/"},"Node.js")," installed. "),(0,i.kt)("p",null,"With Node.js installed, you can run the following command to install the Angular CLI:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"npm install -g @angular/cli\n")),(0,i.kt)("p",null,"With the CLI installed, you have access to the ",(0,i.kt)("inlineCode",{parentName:"p"},"ng"),' command-line interface. This can be used to create a new Angular project. For example, to create a new Angular App named "alpha-angular", you would use the following command:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"ng new alpha-angular\n")),(0,i.kt)("p",null,"Follow the prompts, answering each question in turn. At the end, you should have a basic runnable Angular application."),(0,i.kt)("h3",{id:"configuring-packages"},"Configuring packages"),(0,i.kt)("p",null,"Next, we'll install the Genesis Foundation packages, along with supporting libraries. To do that, run this command from your new project folder:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"npm install --save @genesislcap/alpha-design-system lodash-es\n")),(0,i.kt)("h3",{id:"using-the-components"},"Using the components"),(0,i.kt)("p",null,"With all the basic pieces in place, let's run our app in dev mode with ",(0,i.kt)("inlineCode",{parentName:"p"},"ng serve --open"),". The Angular CLI should build your project and make it available on localhost. Right now, it displays a basic welcome message, since we haven't added any code or interesting HTML. Let's change that."),(0,i.kt)("p",null,"First, open your ",(0,i.kt)("inlineCode",{parentName:"p"},"src/main.ts")," file and add the following code:"),(0,i.kt)(s.Z,{className:"language-ts",mdxType:"CodeBlock"},r.Z),(0,i.kt)("p",null,"This code uses the Genesis Foundation Design System to register ",(0,i.kt)("inlineCode",{parentName:"p"},"<alpha-card>"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"<alpha-button>")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"<alpha-text-field>")," components. Once you save, the dev server will rebuild and refresh your browser. However, you still won't see anything. To get some UI showing up, we need to write some HTML that uses our components. Replace the HTML template in your ",(0,i.kt)("inlineCode",{parentName:"p"},"app/app.component.html")," file with the following markup:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<alpha-card>\n  <h2>{{title}}</h2>\n  <alpha-text-field [(ngModel)]=\'exampleTextField\' name=\'exampleTextField\' ngDefaultControl placeholder="Enter Some Text"></alpha-text-field>\n  <alpha-button appearance="accent" (click)="onClick()">Click Me</alpha-button>\n</alpha-card>\n')),(0,i.kt)("p",null,"Replace the code in your ",(0,i.kt)("inlineCode",{parentName:"p"},"app/app.component.ts")," file contents with this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'alpha-angular';\n  \n  exampleTextField = '';\n\n  onClick() {\n    console.log(this.exampleTextField);\n  }\n}\n")),(0,i.kt)("p",null,"To allow an NgModule to contain Non-Angular element names, add the following code in your ",(0,i.kt)("inlineCode",{parentName:"p"},"app/app.module.ts")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n@NgModule({  \n  schemas: [ CUSTOM_ELEMENTS_SCHEMA ]\n}) \n")),(0,i.kt)("p",null,"To add a splash of style, replace the ",(0,i.kt)("inlineCode",{parentName:"p"},"app/app.component.css")," file contents with this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-css"},"alpha-card {\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n}\n\nalpha-text-field {\n  margin-bottom: 12px;\n}\n\nh2 {\n  font-size: var(--type-ramp-plus-5-font-size);\n  line-height: var(--type-ramp-plus-5-line-height);\n}\n\nalpha-card > alpha-button {\n  align-self: flex-end;\n}\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Third-party controls require a ControlValueAccessor for writing a value and listening to changes on input elements. Add ngDefaultControl attribute to your component to have two-way binding working with FormControlDirective, FormControlName, or NgModel directives:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<alpha-text-field placeholder="name" id="name" formControlName="name" ngDefaultControl></alpha-text-field>\n')),(0,i.kt)("p",null,"Congratulations! You're now set up to use Genesis Foundation and Angular!"),(0,i.kt)("h3",{id:"exercise-45-adding-a-grid-pro-to-list-counterparties-in-our-angular-solution"},"Exercise 4.5 Adding a Grid Pro to list Counterparties in our Angular solution"),(0,i.kt)("admonition",{title:"ESTIMATED TIME",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"30 mins")),(0,i.kt)("p",null,"It's your time! Let's use Grid Pro with connected data in the Angular app. The grid should display the data from ",(0,i.kt)("inlineCode",{parentName:"p"},"ALL_ORDERS"),", very similar to what we did in ",(0,i.kt)("a",{parentName:"p",href:"/getting-started/web-training/web-training-day2/#adding-a-simple-orders-data-grid"},"Adding a simple Orders data grid"),", but now in Angular."))}h.isMDXComponent=!0},72451:function(e,t){t.Z="import { \n  provideDesignSystem, \n  alphaCard, \n  alphaButton,\n  alphaTextField\n} from '@genesislcap/alpha-design-system';\n\nprovideDesignSystem()\n    .register(\n        alphaCard(),\n        alphaButton(),\n        alphaTextField()\n    );"}}]);