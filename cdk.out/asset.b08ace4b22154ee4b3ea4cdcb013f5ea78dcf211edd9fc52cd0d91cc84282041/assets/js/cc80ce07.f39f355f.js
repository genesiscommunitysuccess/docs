"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[16904],{64846:function(e,a,t){t.r(a),t.d(a,{assets:function(){return c},contentTitle:function(){return r},default:function(){return p},frontMatter:function(){return n},metadata:function(){return o},toc:function(){return f}});var s=t(87462),d=t(63366),i=(t(67294),t(3905)),l=(t(61839),["components"]),n={title:"Fields - advanced",sidebar_label:"Fields - advanced",id:"fields-advanced",keywords:["database","fields","advanced"],tags:["database","fields","advanced"]},r=void 0,o={unversionedId:"database/fields-tables-views/fields/fields-advanced",id:"database/fields-tables-views/fields/fields-advanced",title:"Fields - advanced",description:"Modularity",source:"@site/docs/02_database/01_fields-tables-views/01_fields/02_fields-advanced.md",sourceDirName:"02_database/01_fields-tables-views/01_fields",slug:"/database/fields-tables-views/fields/fields-advanced",permalink:"/next/database/fields-tables-views/fields/fields-advanced",draft:!1,tags:[{label:"database",permalink:"/next/tags/database"},{label:"fields",permalink:"/next/tags/fields"},{label:"advanced",permalink:"/next/tags/advanced"}],version:"current",sidebarPosition:2,frontMatter:{title:"Fields - advanced",sidebar_label:"Fields - advanced",id:"fields-advanced",keywords:["database","fields","advanced"],tags:["database","fields","advanced"]},sidebar:"databaseSidebar",previous:{title:"Fields - basics",permalink:"/next/database/fields-tables-views/fields/fields-basics"},next:{title:"Fields - examples",permalink:"/next/database/fields-tables-views/fields/fields-examples"}},c={},f=[{value:"Modularity",id:"modularity",level:2},{value:"Scripting",id:"scripting",level:2}],u={toc:f};function p(e){var a=e.components,t=(0,d.Z)(e,l);return(0,i.kt)("wrapper",(0,s.Z)({},u,t,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"modularity"},"Modularity"),(0,i.kt)("p",null,"Genesis is modular, so if you have a dependency on another module (e.g. Auth), your project will naturally inherit all the fields from that module and and they are available in your project. "),(0,i.kt)("p",null,"It makes sense to re-use fields in dependent modules wherever possible; this cuts down your need to define field names that are unique across all modules and the project itself."),(0,i.kt)("h2",{id:"scripting"},"Scripting"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/getting-started/glossary/glossary/#gpal"},"GPAL")," is a scripting language that gives engineers plenty of advantages, especially when it comes to repetition. "),(0,i.kt)("p",null,"For example, where you need to create a large number of table fields, say ",(0,i.kt)("inlineCode",{parentName:"p"},"ALGO_PARAM_1")," through to ",(0,i.kt)("inlineCode",{parentName:"p"},"ALGO_PARAM_50"),", you can introduce ",(0,i.kt)("inlineCode",{parentName:"p"},"for")," loops:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'  val algoParamPrefix = "ALGO_PARAM_"\n  for(i in 1..51) {\n    field(name = algoParamPrefix + i, type = STRING)\n  }\n')))}p.isMDXComponent=!0}}]);