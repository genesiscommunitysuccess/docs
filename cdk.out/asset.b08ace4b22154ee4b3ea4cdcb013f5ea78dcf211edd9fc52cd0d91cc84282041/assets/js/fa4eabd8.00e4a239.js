"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[27640],{95220:function(e,a,n){n.r(a),n.d(a,{assets:function(){return p},contentTitle:function(){return i},default:function(){return N},frontMatter:function(){return T},metadata:function(){return l},toc:function(){return d}});var t=n(87462),r=n(63366),s=(n(67294),n(3905)),E=(n(61839),["components"]),T={title:"DB Streaming Out - Examples",sidebar_label:"Examples",id:"examples",keywords:["server","integration","database streaming out","examples"],tags:["server","integration","database streaming out","examples"]},i=void 0,l={unversionedId:"server/integration/database-streaming-out/examples",id:"version-2022.3/server/integration/database-streaming-out/examples",title:"DB Streaming Out - Examples",description:"Introduction  | Basics | Advanced | Examples | Configuring runtime | Testing",source:"@site/versioned_docs/version-2022.3/03_server/10_integration/02_database-streaming-out/04_examples.md",sourceDirName:"03_server/10_integration/02_database-streaming-out",slug:"/server/integration/database-streaming-out/examples",permalink:"/server/integration/database-streaming-out/examples",draft:!1,tags:[{label:"server",permalink:"/tags/server"},{label:"integration",permalink:"/tags/integration"},{label:"database streaming out",permalink:"/tags/database-streaming-out"},{label:"examples",permalink:"/tags/examples"}],version:"2022.3",sidebarPosition:4,frontMatter:{title:"DB Streaming Out - Examples",sidebar_label:"Examples",id:"examples",keywords:["server","integration","database streaming out","examples"],tags:["server","integration","database streaming out","examples"]},sidebar:"serverModulesSidebar",previous:{title:"Advanced",permalink:"/server/integration/database-streaming-out/advanced"},next:{title:"Configuring Runtime",permalink:"/server/integration/database-streaming-out/configuring-runtime"}},p={},d=[{value:"Oracle Sample",id:"oracle-sample",level:2},{value:"MSSQL Sample",id:"mssql-sample",level:3},{value:"PostgreSQL Sample",id:"postgresql-sample",level:3}],A={toc:d};function N(e){var a=e.components,n=(0,r.Z)(e,E);return(0,s.kt)("wrapper",(0,t.Z)({},A,n,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/server/integration/database-streaming-out/introduction"},"Introduction"),"  | ",(0,s.kt)("a",{parentName:"p",href:"/server/integration/database-streaming-out/basics"},"Basics")," | ",(0,s.kt)("a",{parentName:"p",href:"/server/integration/database-streaming-out/advanced"},"Advanced")," | ",(0,s.kt)("a",{parentName:"p",href:"/server/integration/database-streaming-out/examples"},"Examples")," | ",(0,s.kt)("a",{parentName:"p",href:"/server/integration/database-streaming-out/configuring-runtime"},"Configuring runtime")," | ",(0,s.kt)("a",{parentName:"p",href:"/server/integration/database-streaming-out/testing"},"Testing")),(0,s.kt)("h2",{id:"oracle-sample"},"Oracle Sample"),(0,s.kt)("p",null,"Create TRADE table:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE DB_NAME.TRADE\n( TRADE_ID varchar2(40) not null,\n  CURRENCY_DESCRIPTION varchar2(20) not null,\n  CLIENT_NAME  varchar2(40) not null,\n  TRADE_TIMESTAMP timestamp(6),\n  TRADE_QUANTITY number(38,0),\n  CONSTRAINT TRADE_PK PRIMARY KEY (TRADE_ID)\n);\n")),(0,s.kt)("p",null,"Insert, modify and delete stored procedures:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},'create or replace PROCEDURE insertTrade(\n                        p_tradeid IN ALL_TRADES.TRADE_ID%TYPE,\n                        p_tradequantity IN ALL_TRADES.TRADE_QUANTITY%TYPE,\n                        p_clientname IN ALL_TRADES.CLIENT_NAME%TYPE,\n                        p_currencydescription IN ALL_TRADES.CURRENCY_DESCRIPTION%TYPE)\n                    IS\n                    BEGIN\n\n                        INSERT INTO ALL_TRADES ("TRADE_ID", "TRADE_QUANTITY", "CLIENT_NAME", "CURRENCY_DESCRIPTION")\n                        VALUES(p_tradeid, p_tradequantity, p_clientname, p_currencydescription);\n\n                        COMMIT;\n                    END;\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"create or replace PROCEDURE modifyTrade(\n                        p_tradeid IN ALL_TRADES.TRADE_ID%TYPE,\n                        p_tradequantity IN ALL_TRADES.TRADE_QUANTITY%TYPE,\n                        p_clientname IN ALL_TRADES.CLIENT_NAME%TYPE,\n                        p_currencydescription IN ALL_TRADES.CURRENCY_DESCRIPTION%TYPE)\n                    IS\n                    BEGIN\n\n                        UPDATE ALL_TRADES\n                        SET TRADE_QUANTITY = p_tradequantity,\n                            CLIENT_NAME = p_clientname,\n                            CURRENCY_DESCRIPTION = p_currencydescription\n                        WHERE TRADE_ID = p_tradeid;\n\n                        COMMIT;\n                    END;\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"create or replace PROCEDURE deleteTrade(p_tradeid IN ALL_TRADES.TRADE_ID%TYPE)\n                    IS\n                    BEGIN\n\n                        DELETE FROM ALL_TRADES\n                        WHERE TRADE_ID = p_tradeid;\n\n                        COMMIT;\n                    END;\n")),(0,s.kt)("h3",{id:"mssql-sample"},"MSSQL Sample"),(0,s.kt)("p",null,"Create TRADE table:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE TRADE\n     (\n        TRADE_ID           VARCHAR(40)   PRIMARY KEY               NOT NULL  ,\n        CURRENCY_DESCRIPTION         VARCHAR(20)           NOT NULL   ,\n        CLIENT_NAME          VARCHAR(40)           NOT NULL   ,\n        TRADE_QUANTITY       INT            NOT NULL   ,\n        TRADE_TIMESTAMP        DATETIME              NOT NULL\n     )\nGO\n")),(0,s.kt)("p",null,"Insert, modify and delete stored procedures:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},'CREATE PROCEDURE insertTrade\n    @TradeId varchar(50),\n    @TradeQuantity int,\n    @ClientName varchar(50),\n    @CurrencyDescription varchar(50)\nAS\nBEGIN\n    SET NOCOUNT ON;\n\n    INSERT INTO dbo.ALL_TRADES ("TRADE_ID", "TRADE_QUANTITY", "CLIENT_NAME", "CURRENCY_DESCRIPTION")\n    VALUES(@TradeId, @TradeQuantity, @ClientName, @CurrencyDescription);\n\nEND\nGO\n\nCREATE PROCEDURE modifyTrade\n    @TradeId varchar(50),\n    @TradeQuantity int,\n    @ClientName varchar(50),\n    @CurrencyDescription varchar(50)\nAS\nBEGIN\n    SET NOCOUNT ON;\n\n    UPDATE dbo.ALL_TRADES\n    SET TRADE_QUANTITY = @TradeQuantity,\n        CLIENT_NAME = @ClientName,\n        CURRENCY_DESCRIPTION = @CurrencyDescription\n    WHERE TRADE_ID = @TradeId;\n\nEND\nGO\n\nCREATE PROCEDURE deleteTrade\n    @TradeId varchar(50)\nAS\nBEGIN\n    SET NOCOUNT ON;\n\n    DELETE FROM dbo.ALL_TRADES\n    WHERE TRADE_ID = @TradeId;\n\nEND\nGO\n\n')),(0,s.kt)("h3",{id:"postgresql-sample"},"PostgreSQL Sample"),(0,s.kt)("p",null,"N.B. Assumes that the ",(0,s.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/plpgsql.html"},"plpgsql")," procedural language is already installed in the respective PostgreSQL database."),(0,s.kt)("p",null,"Create TRADE table:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},'DROP TABLE "TRADE";\nCREATE TABLE "TRADE"("NET_TRADE" decimal  ,\n"TRADE_ID" varchar(80)  ,\n"LAST_UPDATED" timestamp DEFAULT clock_timestamp() ,\n"TIMESTAMP" bigint  ,\n"INSTRUMENT_ID" varchar(80)  ,\n"TRADE_VALUE" decimal  ,\nCONSTRAINT "TRADE_ID_PK" PRIMARY KEY("TRADE_ID"));\n GO\n')),(0,s.kt)("p",null,"Insert, modify and delete stored procedures:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},'CREATE OR REPLACE FUNCTION "insertTrade"(p_NetTrade decimal,\np_TradeId varchar(80),\np_LastUpdated timestamp,\np_Timestamp bigint,\np_InstrumentId varchar(80),\np_TradeValue decimal) RETURNS void AS $$\nBEGIN\nINSERT INTO "TRADE" ("NET_TRADE","TRADE_ID","LAST_UPDATED","TIMESTAMP","INSTRUMENT_ID","TRADE_VALUE")\nVALUES (p_NetTrade,p_TradeId,p_LastUpdated,p_Timestamp,p_InstrumentId,p_TradeValue);\nEND\n$$ LANGUAGE plpgsql;\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},'CREATE OR REPLACE FUNCTION  "modifyTrade"(p_NetTrade decimal,\np_TradeId varchar(80),\np_LastUpdated timestamp,\np_Timestamp bigint,\np_InstrumentId varchar(80),\np_TradeValue decimal) RETURNS void AS $$\nBEGIN\nUPDATE "TRADE"\nSET\n"NET_TRADE" = p_NetTrade,\n"TRADE_ID" = p_TradeId,\n"LAST_UPDATED" = p_LastUpdated,\n"TIMESTAMP" = p_Timestamp,\n"INSTRUMENT_ID" = p_InstrumentId,\n"TRADE_VALUE" = p_TradeValue\nWHERE "TRADE"."TRADE_ID"  = p_TradeId;\nEND\n$$ LANGUAGE plpgsql;\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},'CREATE OR REPLACE FUNCTION  "deleteTrade"(p_paramId anyelement) RETURNS void AS $$\nBEGIN\nDELETE FROM "TRADE"\nWHERE "TRADE"."TRADE_ID" = p_paramId;\nEND\n$$ LANGUAGE plpgsql;\n')))}N.isMDXComponent=!0}}]);