"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[15929],{72909:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return r},default:function(){return c},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return g}});var o=n(87462),a=n(63366),i=(n(67294),n(3905)),s=(n(61839),["components"]),l={title:"Go to the next level - Data Aggregation using Consolidator",sidebar_label:"Consolidators",id:"consolidators",keywords:["getting started","quick start","next level","data aggregation","consolidators"],tags:["getting started","quick start","next level","data aggregation","consolidators"]},r=void 0,d={unversionedId:"getting-started/go-to-the-next-level/consolidators",id:"getting-started/go-to-the-next-level/consolidators",title:"Go to the next level - Data Aggregation using Consolidator",description:"Following from the calculated data using derived fields, the Genesis low-code platform provides a more advanced feature to aggregate data or perform calculations whenever the underlying data is changed. That feature is called Consolidator.",source:"@site/docs/01_getting-started/03_go-to-the-next-level/08_consolidators.md",sourceDirName:"01_getting-started/03_go-to-the-next-level",slug:"/getting-started/go-to-the-next-level/consolidators",permalink:"/next/getting-started/go-to-the-next-level/consolidators",draft:!1,tags:[{label:"getting started",permalink:"/next/tags/getting-started"},{label:"quick start",permalink:"/next/tags/quick-start"},{label:"next level",permalink:"/next/tags/next-level"},{label:"data aggregation",permalink:"/next/tags/data-aggregation"},{label:"consolidators",permalink:"/next/tags/consolidators"}],version:"current",sidebarPosition:8,frontMatter:{title:"Go to the next level - Data Aggregation using Consolidator",sidebar_label:"Consolidators",id:"consolidators",keywords:["getting started","quick start","next level","data aggregation","consolidators"],tags:["getting started","quick start","next level","data aggregation","consolidators"]},sidebar:"learningSidebar",previous:{title:"Calculated data using derived fields",permalink:"/next/getting-started/go-to-the-next-level/calculated-data"},next:{title:"State Management",permalink:"/next/getting-started/go-to-the-next-level/state-management"}},p={},g=[{value:"Section objectives",id:"section-objectives",level:2},{value:"Define the position-keeping logic in the Consolidator",id:"define-the-position-keeping-logic-in-the-consolidator",level:2},{value:"Update the system files",id:"update-the-system-files",level:2},{value:"Update the processes.xml file",id:"update-the-processesxml-file",level:3},{value:"Update the service-definitions.xml file",id:"update-the-service-definitionsxml-file",level:3},{value:"Conclusion",id:"conclusion",level:2}],u={toc:g};function c(e){var t=e.components,n=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Following from the calculated data using ",(0,i.kt)("a",{parentName:"p",href:"/getting-started/go-to-the-next-level/calculated-data/"},"derived fields"),", the Genesis low-code platform provides a more advanced feature to aggregate data or perform calculations whenever the underlying data is changed. That feature is called ",(0,i.kt)("a",{parentName:"p",href:"/server/consolidator/introduction/"},"Consolidator"),"."),(0,i.kt)("p",null,"In our case, Consolidators are a good fit for consolidating a position table from trades."),(0,i.kt)("h2",{id:"section-objectives"},"Section objectives"),(0,i.kt)("p",null,"The goal of this section is to define and build a ",(0,i.kt)("a",{parentName:"p",href:"/server/consolidator/introduction/"},"Consolidator"),"."),(0,i.kt)("h2",{id:"define-the-position-keeping-logic-in-the-consolidator"},"Define the position-keeping logic in the Consolidator"),(0,i.kt)("p",null,"We will use the query ",(0,i.kt)("inlineCode",{parentName:"p"},"ALL_POSITIONS")," that was ",(0,i.kt)("a",{parentName:"p",href:"/getting-started/go-to-the-next-level/events/#data-server"},"previously defined")," to show all the positions calculated by the Consolidator."),(0,i.kt)("p",null,"Make sure that the ",(0,i.kt)("inlineCode",{parentName:"p"},"INSTRUMENT_ID")," field is not nullable in the ",(0,i.kt)("inlineCode",{parentName:"p"},"TRADE")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"POSITION")," tables, as the consolidations will use it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:"{4,10}","{4,10}":!0},'tables {\n    table (name = "TRADE" ...) {\n        ...\n        INSTRUMENT_ID not null\n        ...\n    }\n\n    table(name = "POSITION" ...) {\n        ...\n        INSTRUMENT_ID not null\n        ...        \n    }\n    ...\n}\n')),(0,i.kt)("p",null,"Add the query ",(0,i.kt)("inlineCode",{parentName:"p"},"ALL_POSITIONS")," to the ",(0,i.kt)("strong",{parentName:"p"},"positions-app-tutorial-dataserver.kts")," file. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:"{3}","{3}":!0},'dataServer {\n    ...\n    query("ALL_POSITIONS", POSITION)\n}\n')),(0,i.kt)("p",null,"This query will be used to show all the positions calculated by the consolidator."),(0,i.kt)("p",null,"So, let's define a ",(0,i.kt)("strong",{parentName:"p"},"positions-app-tutorial-consolidator.kts")," file inside ",(0,i.kt)("strong",{parentName:"p"},"positions-app-tutorial-script-config/src/main/resources/scripts"),". This is where you define the consolidator logic."),(0,i.kt)("p",null,"The Consolidator is going to increase or decrease the quantity for ",(0,i.kt)("inlineCode",{parentName:"p"},"POSITION")," records, based on the ",(0,i.kt)("inlineCode",{parentName:"p"},"TRADE")," table updates. It also needs to calculate the new notional."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'import global.genesis.gen.config.tables.POSITION\nimport global.genesis.gen.config.tables.POSITION.QUANTITY\nimport global.genesis.gen.config.tables.POSITION.VALUE\nimport global.genesis.gen.config.view.TRADE_VIEW\nimport global.genesis.gen.dao.Position\n\nconsolidators {\n    config {}\n    consolidator("CONSOLIDATE_POSITIONS", TRADE_VIEW, POSITION) {\n        config {\n            logLevel = DEBUG\n            logFunctions = true\n        }\n        select {\n            sum {\n                when(side) {\n                    "BUY" -> when(tradeStatus) {\n                        TradeStatus.NEW -> quantity\n                        TradeStatus.ALLOCATED -> quantity\n                        TradeStatus.CANCELLED -> 0\n                    }\n                    "SELL" -> when(tradeStatus) {\n                        TradeStatus.NEW -> -quantity\n                        TradeStatus.ALLOCATED -> -quantity\n                        TradeStatus.CANCELLED -> 0\n                    }\n                    else -> null\n                }\n            } into QUANTITY\n            sum {\n                val quantity = when(side) {\n                    "BUY" -> quantity\n                    "SELL" -> -quantity\n                    else -> 0\n                }\n                quantity * price\n            } into VALUE\n        }\n        onCommit {\n            val quantity = output.quantity ?: 0\n            output.notional = input.price * quantity\n            output.pnl = output.value - output.notional\n        }\n        groupBy {\n            instrumentId\n        } into {\n            lookup {\n                Position.ByInstrumentId(groupId)\n            }\n            build {\n                Position {\n                    instrumentId = groupId\n                    quantity = 0\n                    value = 0.0\n                    pnl = 0.0\n                    notional = 0.0\n                }\n            }\n        }\n    }\n}\n')),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"If you don't have intelisense when editing the consolidator file check the contents of ",(0,i.kt)("strong",{parentName:"p"},"positions-app-tutorial-script-config/build.gradle.kts"),". Under ",(0,i.kt)("strong",{parentName:"p"},"dependencies")," it should contain ",(0,i.kt)("inlineCode",{parentName:"p"},'api("global.genesis:genesis-pal-consolidator")'),". If that entry is not present add it to the list of dependencies. Once done the file should look like:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'dependencies {\n    ...\n    api("global.genesis:genesis-pal-consolidator")\n    ..\n}\n')),(0,i.kt)("p",{parentName:"admonition"},"Reload the project from the Gradle tab on the right side of the screen.")),(0,i.kt)("h2",{id:"update-the-system-files"},"Update the system files"),(0,i.kt)("p",null,"Now that the Consolidator logic is in place we need to update the system files."),(0,i.kt)("h3",{id:"update-the-processesxml-file"},"Update the processes.xml file"),(0,i.kt)("p",null,"As the Consolidator runs on its own process, we need to add a new entry to ",(0,i.kt)("strong",{parentName:"p"},"positions-app-tutorial-processes.xml")," with the Consolidator process definition."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<process name="POSITIONS_APP_TUTORIAL_CONSOLIDATOR">\n    <groupId>POSITIONS_APP_TUTORIAL</groupId>\n    <start>true</start>\n    <options>-Xmx256m -DRedirectStreamsToLog=true -DXSD_VALIDATE=false</options>\n    <module>genesis-pal-consolidator</module>\n    <package>global.genesis.pal.consolidator</package>\n    <script>positions-app-tutorial-consolidator.kts<\/script>\n    <description>Consolidates trades to calculate positions</description>\n    <loggingLevel>DEBUG,DATADUMP_ON</loggingLevel>\n    <language>pal</language>\n</process>\n')),(0,i.kt)("h3",{id:"update-the-service-definitionsxml-file"},"Update the service-definitions.xml file"),(0,i.kt)("p",null,"This file lists all the active services for the Positions application. You can see entries have been added automatically when the Data Server and Event Handler were generated."),(0,i.kt)("p",null,"Add a new entry to ",(0,i.kt)("strong",{parentName:"p"},"positions-app-tutorial-service-definitions.xml")," with the Consolidator details. Remember the port numbers should be free and, ideally, sequential."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'    <service host="localhost" name="POSITIONS_APP_TUTORIAL_CONSOLIDATOR" port="11003"/>\n')),(0,i.kt)("p",null,"When you finish, remember to run ",(0,i.kt)("inlineCode",{parentName:"p"},"generateDao")," (if you made changes to the table), ",(0,i.kt)("inlineCode",{parentName:"p"},"assemble")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"deploy-genesisproduct-positions-app-tutorial"),"."),(0,i.kt)("h2",{id:"conclusion"},"Conclusion"),(0,i.kt)("p",null,"This shows a quick example of a Consolidator. If you want to see it in action, go to ",(0,i.kt)("a",{parentName:"p",href:"/server/integration/rest-endpoints/introduction/"},"Endpoints")," for information on testing the back end."))}c.isMDXComponent=!0}}]);