"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[29058],{19381:function(n,e,t){t.r(e),t.d(e,{assets:function(){return u},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return p}});var o=t(87462),a=t(63366),i=(t(67294),t(3905)),r=(t(61839),["components"]),l={title:"Consolidator - Examples",sidebar_label:"Examples",id:"examples",keywords:["server","consolidator","examples"],tags:["server","consolidator","examples"]},s=void 0,d={unversionedId:"server/consolidator/examples",id:"version-2022.3/server/consolidator/examples",title:"Consolidator - Examples",description:"Introduction | Basics |  Advanced | Examples | Configuring runtime | Testing",source:"@site/versioned_docs/version-2022.3/03_server/07_consolidator/04_examples.md",sourceDirName:"03_server/07_consolidator",slug:"/server/consolidator/examples",permalink:"/server/consolidator/examples",draft:!1,tags:[{label:"server",permalink:"/tags/server"},{label:"consolidator",permalink:"/tags/consolidator"},{label:"examples",permalink:"/tags/examples"}],version:"2022.3",sidebarPosition:4,frontMatter:{title:"Consolidator - Examples",sidebar_label:"Examples",id:"examples",keywords:["server","consolidator","examples"],tags:["server","consolidator","examples"]},sidebar:"serverModulesSidebar",previous:{title:"Advanced",permalink:"/server/consolidator/advanced"},next:{title:"Configuring Runtime",permalink:"/server/consolidator/configuring-runtime"}},u={},p=[{value:"Table definitions used in above examples:",id:"table-definitions-used-in-above-examples",level:3}],m={toc:p};function c(n){var e=n.components,t=(0,a.Z)(n,r);return(0,i.kt)("wrapper",(0,o.Z)({},m,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/server/consolidator/introduction"},"Introduction")," | ",(0,i.kt)("a",{parentName:"p",href:"/server/consolidator/basics"},"Basics")," |  ",(0,i.kt)("a",{parentName:"p",href:"/server/consolidator/advanced"},"Advanced")," | ",(0,i.kt)("a",{parentName:"p",href:"/server/consolidator/examples"},"Examples")," | ",(0,i.kt)("a",{parentName:"p",href:"/server/consolidator/configuring-runtime"},"Configuring runtime")," | ",(0,i.kt)("a",{parentName:"p",href:"/server/consolidator/testing"},"Testing")),(0,i.kt)("p",null,"Here is an example Consolidator file that defines two Consolidators:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"CON_ORDER_FROM_TRADES.\nThis Consolidator builds the ORDER table using the CONSOLIDATOR_TRADE table. It uses max, min, sum and count functions and groups by field ",(0,i.kt)("inlineCode",{parentName:"p"},"ORDER.ORDER_ID")," to build a new row for the output table ORDER.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"CON_ORDER_SUMMARY_FROM_ORDER.  This Consolidator builds the ORDER_SUMMARY table using the ORDER table and groups by the field ",(0,i.kt)("inlineCode",{parentName:"p"},"ORDER.ORDER_DATE")," from the ",(0,i.kt)("inlineCode",{parentName:"p"},"ORDER")," table. You can give multiple ",(0,i.kt)("inlineCode",{parentName:"p"},"groupBy")," conditions based on your requirement.\nIn this second Consolidator,  we store all the consolidations grouped by ORDER_DATE year and ORDER_DATE year and month in database, (which are defined right at the end of the Consolidator). This avoids duplication of consolidator code if you need to group the same consolidation based on different ",(0,i.kt)("inlineCode",{parentName:"p"},"groupBy")," conditions."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'consolidators {\n\n    consolidator("CON_ORDER_FROM_TRADES", CONSOLIDATOR_TRADE, ORDER) {\n        config {\n            tableTransient = true\n        }\n    \n        select {\n            ORDER {\n                max { price } into MAX_PRICE\n                min { price } into MIN_PRICE\n                sum { price * quantity } into TOTAL_NOTIONAL\n                sum { quantity } into TOTAL_QUANTITY\n                count() into TRADE_COUNT\n            }\n        }\n    \n        groupBy { Order.ById(orderId) } into {\n            val start = DateTime(2022, 1, 1, 0, 0)\n            build {\n                val id = groupId.orderId.toInt()\n                Order {\n                    orderId = groupId.orderId\n                    orderDate = start.plusMonths(id % 12)\n                    filledQuantity = 0\n                }\n            }\n        }\n    }\n    \n    consolidator("CON_ORDER_SUMMARY_FROM_ORDER", ORDER, ORDER_SUMMARY) {\n        select {\n            ORDER_SUMMARY {\n                sum { totalNotional } into TOTAL_NOTIONAL\n                sum { totalQuantity } into TOTAL_QUANTITY\n                sum { tradeCount } into TRADE_COUNT\n            }\n        }\n    \n        groupBy { OrderSummary.byGroupId("${orderDate.year}") }\n        groupBy { OrderSummary.byGroupId("${orderDate.year}-${orderDate.monthOfYear}") }\n    }\n}\n')),(0,i.kt)("p",null,"The example below comes from the Consolidator exercise in our ",(0,i.kt)("a",{parentName:"p",href:"/getting-started/go-to-the-next-level/calculated-data/"},"tutorial"),". It has a single consolidator, called ",(0,i.kt)("inlineCode",{parentName:"p"},"CONSOLIDATE_POSITIONS"),"."),(0,i.kt)("p",null,"To give you some basic pointers to the content, the main code blocks in this Consolidator are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"config")," block contains consolidator level configuration"),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"select")," block to specify some calculations and assign to output fields"),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"onCommit")," block to amend the output row"),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"groupBy")," block groups by ",(0,i.kt)("inlineCode",{parentName:"li"},"INSTRUMENT_ID"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'consolidator("CONSOLIDATE_POSITIONS", TRADE_PRICE_VIEW, POSITION) {\n    config {\n        logLevel = DEBUG\n        logFunctions = true\n    }\n    select {\n        sum {\n            when(side) {\n                "BUY" -> when(tradeStatus) {\n                    TradeStatus.NEW -> quantity\n                    TradeStatus.ALLOCATED -> quantity\n                    TradeStatus.CANCELLED -> 0\n                }\n                "SELL" -> when(tradeStatus) {\n                    TradeStatus.NEW -> -quantity\n                    TradeStatus.ALLOCATED -> -quantity\n                    TradeStatus.CANCELLED -> 0\n                }\n                else -> null\n            }\n        } into QUANTITY\n        sum {\n            val quantity = when(side) {\n                "BUY" -> quantity\n                "SELL" -> -quantity\n                else -> 0\n            }\n            quantity * price\n        } into VALUE\n    }\n    onCommit {\n        val quantity = output.quantity ?: 0\n        val marketPrice = when {\n            quantity > 0 -> input.emsBidPrice ?: 0.0\n            quantity < 0 -> input.emsAskPrice ?: 0.0\n            else -> 0.0\n        }\n        output.notional = marketPrice * quantity\n        output.pnl = output.value - output.notional\n    }\n    groupBy {\n        instrumentId\n    } into {\n        lookup {\n            Position.ByInstrumentId(groupId)\n        }\n        build {\n            Position {\n                instrumentId = groupId\n                quantity = 0\n                value = 0.0\n                pnl = 0.0\n                notional = 0.0\n            }\n        }\n    }\n}\n')),(0,i.kt)("h3",{id:"table-definitions-used-in-above-examples"},"Table definitions used in above examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'  table("ORDER", 1001) {\n    ORDER_ID\n    ORDER_DATE not null\n    ORDER_STATE\n    QUANTITY\n    FILLED_QUANTITY not null\n    ENTERED_BY\n    ASSIGNED_TO\n    SYMBOL\n    AVERAGE_PRICE\n    LIMIT_PRICE\n    TRADE_COUNT\n    TOTAL_QUANTITY\n    TOTAL_NOTIONAL\n    MAX_PRICE\n    MIN_PRICE\n    SIDE\n    ORDER_TYPE\n    COUNTERPARTY_ID\n\n    primaryKey {\n      ORDER_ID\n    }\n  }\n\n  table("ORDER_SUMMARY", 1003) {\n    GROUP_ID\n    TOTAL_QUANTITY\n    TOTAL_NOTIONAL\n    TRADE_COUNT\n\n    primaryKey {\n      GROUP_ID\n    }\n  }\n\n  table("CONSOLIDATOR_TRADE", 1004) {\n    TRADE_ID\n    ORDER_ID\n    TRADE_DATE\n    QUANTITY\n    TRADE_STATUS\n    PRICE\n\n    primaryKey {\n      TRADE_ID\n    }\n\n    indices {\n      nonUnique {\n        ORDER_ID\n      }\n    }\n  }\n')))}c.isMDXComponent=!0}}]);