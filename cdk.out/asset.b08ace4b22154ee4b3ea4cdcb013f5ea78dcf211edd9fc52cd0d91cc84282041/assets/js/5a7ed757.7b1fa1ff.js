"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[50628],{36635:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return d},default:function(){return b},frontMatter:function(){return l},metadata:function(){return o},toc:function(){return m}});var i=a(87462),n=a(63366),s=(a(67294),a(3905)),r=(a(61839),["components"]),l={title:"Data types - Views entities",sidebar_label:"Views entities",id:"views-entities",keywords:["database","data types","views entities"],tags:["database","data types","views entities"]},d=void 0,o={unversionedId:"database/data-types/views-entities",id:"version-2022.3/database/data-types/views-entities",title:"Data types - Views entities",description:"View entities are classes generated by Genesis that match your application's\xa0data model. The name of the view entity that is generated will be the name specified in its definition, but it is converted from snake case to camel case; for example,\xa0VIEW_NAME\xa0becomes\xa0ViewName. All table/view entities implement a common interface called\xa0DbEntity.",source:"@site/versioned_docs/version-2022.3/02_database/04_data-types/03_views-entities.md",sourceDirName:"02_database/04_data-types",slug:"/database/data-types/views-entities",permalink:"/database/data-types/views-entities",draft:!1,tags:[{label:"database",permalink:"/tags/database"},{label:"data types",permalink:"/tags/data-types"},{label:"views entities",permalink:"/tags/views-entities"}],version:"2022.3",sidebarPosition:3,frontMatter:{title:"Data types - Views entities",sidebar_label:"Views entities",id:"views-entities",keywords:["database","data types","views entities"],tags:["database","data types","views entities"]},sidebar:"databaseSidebar",previous:{title:"Index entities",permalink:"/database/data-types/index-entities"},next:{title:"DbRecord",permalink:"/database/data-types/dbrecord"}},p={},m=[{value:"Index entities",id:"index-entities",level:2},{value:"Building a view entity",id:"building-a-view-entity",level:2},{value:"Examples",id:"examples",level:2}],u={toc:m};function b(e){var t=e.components,a=(0,n.Z)(e,r);return(0,s.kt)("wrapper",(0,i.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"View entities are classes generated by Genesis that match your application's\xa0",(0,s.kt)("a",{parentName:"p",href:"/database/fields-tables-views/fields-tables-views/"},"data model"),". The name of the view entity that is generated will be the name specified in its definition, but it is converted from snake case to camel case; for example,\xa0",(0,s.kt)("inlineCode",{parentName:"p"},"VIEW_NAME"),"\xa0becomes\xa0",(0,s.kt)("inlineCode",{parentName:"p"},"ViewName"),". All table/view entities implement a common interface called\xa0",(0,s.kt)("a",{parentName:"p",href:"/database/data-types/dbentity/"},"DbEntity"),"."),(0,s.kt)("p",null,"There are two types of view entity:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"SingleCardinalityViewEntity"),(0,s.kt)("li",{parentName:"ul"},"MultiCardinalityViewEntity")),(0,s.kt)("p",null,"For more information, see our page about ",(0,s.kt)("a",{parentName:"p",href:"/database/fields-tables-views/views/"},"Views"),"."),(0,s.kt)("h2",{id:"index-entities"},"Index entities"),(0,s.kt)("p",null,"You can also construct an index entity from a view entity.\xa0",(0,s.kt)("inlineCode",{parentName:"p"},"byPrimaryKey()"),"\xa0will return an entity for the primary key. Additionally, for each index, there will be a\xa0",(0,s.kt)("inlineCode",{parentName:"p"},"by...()"),"\xa0call with the index name."),(0,s.kt)("h2",{id:"building-a-view-entity"},"Building a view entity"),(0,s.kt)("p",null,"Generated ViewEntities are Kotlin data classes and can be built using the primary constructor. Just before the object is built, the object is validated to make sure all ",(0,s.kt)("a",{parentName:"p",href:"/database/data-types/table-entities/"},"required fields"),"\xa0have been set. In addition to ",(0,s.kt)("a",{parentName:"p",href:"/database/data-types/dbentity/"},"DbEntity"),"\xa0methods, there are some useful methods/properties, which are described below:"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Name"),(0,s.kt)("th",{parentName:"tr",align:null},"Signature"),(0,s.kt)("th",{parentName:"tr",align:null},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"byPrimaryKey"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"fun byPrimaryKey(): UniqueEntityIndex<*, *>")),(0,s.kt)("td",{parentName:"tr",align:null},"gets entity by primaryKey")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"by{indexField}"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"fun by{indexField}(): By{indexField}")),(0,s.kt)("td",{parentName:"tr",align:null},"gets entity by index fields")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"toString"),(0,s.kt)("td",{parentName:"tr",align:null},"fun toString(): String"),(0,s.kt)("td",{parentName:"tr",align:null},"gets the string representation of the view with sensitive fields masked (for example, passwords)")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"toStringWithSensitivesUnmasked"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"fun toStringWithSensitivesUnmasked(): String")),(0,s.kt)("td",{parentName:"tr",align:null},"gets the string representation of view with sensitive fields(Ex: Password) unmasked")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"fieldToPropertyMap"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"val fieldToPropertyMap: Map<String, KProperty1<V, Any?>>")),(0,s.kt)("td",{parentName:"tr",align:null},"this is a class property that maps a field name to its property")))),(0,s.kt)("h2",{id:"examples"},"Examples"),(0,s.kt)("p",null,"Given the following table and view definitions, declared as described ",(0,s.kt)("a",{parentName:"p",href:"/database/fields-tables-views/tables/"},"here")," and ",(0,s.kt)("a",{parentName:"p",href:"/database/fields-tables-views/views/"},"here"),", the platform will generate view entities as shown in the examples."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'// table definition    \ntable(name="CUSTOMER", id = 11002) {      \n  CUSTOMER_NAME      \n  CUSTOMER_ADDRESS      \n  COUNTRY      \n  CUSTOMER_PASSWORD sensitive "XXXXXX"      \n  primaryKey {        \n    CUSTOMER_NAME      \n  }    \n}  \n\n// view definition     \nview("CUSTOMER_VIEW", CUSTOMER) {       \n  fields {         \n    CUSTOMER.CUSTOMER_NAME         \n    CUSTOMER.CUSTOMER_PASSWORD         \n    CUSTOMER.CUSTOMER_ADDRESS         \n    CUSTOMER.COUNTRY       \n  }     \n}\n')),(0,s.kt)("p",null,"Examples:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'val customerView = CustomerView("Customer_1", "PASSWORD", "London", "UK")  \n\ncustomerView.toGenesisSet(listOf("CUSTOMER_NAME"))  \n// Output: CUSTOMER_NAME = Customer_1  \n\ncustomerView.toGenesisSetFormatted(listOf(ColumnConfig.Field.Aliased("COUNTRY", "CUSTOMER_COUNTRY")))  \n// Output: CUSTOMER_COUNTRY = UK \n\ncustomerView.toString()  \n// Output: global.genesis.gen.view.entity.CustomerView{serialVersionUID=\'1\', customerName=Customer_1, customerPassword=XXXXXX, customerAddress=London, country=UK, recordId={not-set}, timestamp={not-set}}  \n\ncustomerView.toStringWithSensitivesUnmasked()  \n// Output: global.genesis.gen.view.entity.CustomerView{serialVersionUID=\'1\', customerName=Customer_1, customerPassword=PASSWORD, customerAddress=London, country=UK, recordId={not-set}, timestamp={not-set}}  \n\ncustomerView.get("CUSTOMER_NAME")  \n// Output: Customer_1\n')))}b.isMDXComponent=!0}}]);