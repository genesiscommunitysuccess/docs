"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[79674],{28191:function(e){e.exports=JSON.parse('{"label":"inter-process messages","permalink":"/tags/inter-process-messages","allTagsPath":"/tags","count":4,"items":[{"id":"version-2022.3/server/inter-process-messages/genesisSet","title":"Inter-process messages - GenesisSet","description":"GenesisSet is a generic message format used to send data between Genesis processes. The information in the messages must be stored as key-value pairs. A GenesisSet can store integers, booleans, text, etc. Importantly, it can also contain other GenesisSets.","permalink":"/server/inter-process-messages/genesisSet"},{"id":"version-2022.3/server/inter-process-messages/introduction","title":"Inter-process messages - Introduction","description":"In this area, we\'ll look at the standard message format sent between Genesis processes.","permalink":"/server/inter-process-messages/introduction"},{"id":"version-2022.3/server/inter-process-messages/metadata-annotations","title":"Inter-process messages - Metadata annotations","description":"The following annotations are found in the package global.genesis.message.core.annotation and can be applied when defining Kotlin data classes to be used as input I message types.","permalink":"/server/inter-process-messages/metadata-annotations"},{"id":"version-2022.3/server/inter-process-messages/type-safe-messages","title":"Inter-process messages - type-safe messages","description":"The Genesis low-code platform uses type-safe messages to perform message serialisation and deserialisation. In addition to this, it automatically extracts relevant metadata to expose this to the front end. These type-safe messages are most commonly used in Request Servers, GPAL Event Handlers and Event Handlers that have been implemented as a set of classes.","permalink":"/server/inter-process-messages/type-safe-messages"}]}')}}]);