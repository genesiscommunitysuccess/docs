"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[11961],{85162:function(e,t,n){n.d(t,{Z:function(){return s}});var a=n(67294),r=n(86010),l="tabItem_Ymn6";function s(e){var t=e.children,n=e.hidden,s=e.className;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,s),hidden:n},t)}},65488:function(e,t,n){n.d(t,{Z:function(){return m}});var a=n(87462),r=n(67294),l=n(86010),s=n(72389),i=n(67392),u=n(7094),o=n(12466),d="tabList__CuJ",p="tabItem_LNqP";function g(e){var t,n,s=e.lazy,g=e.block,m=e.defaultValue,k=e.values,c=e.groupId,N=e.className,S=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=k?k:S.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),f=(0,i.l)(v,(function(e,t){return e.value===t.value}));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===m?m:null!=(t=null!=m?m:null==(n=S.find((function(e){return e.props.default})))?void 0:n.props.value)?t:S[0].props.value;if(null!==b&&!v.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=(0,u.U)(),h=y.tabGroupChoices,E=y.setTabGroupChoices,G=(0,r.useState)(b),T=G[0],I=G[1],_=[],w=(0,o.o5)().blockElementScrollPositionUntilNextRender;if(null!=c){var A=h[c];null!=A&&A!==T&&v.some((function(e){return e.value===A}))&&I(A)}var D=function(e){var t=e.currentTarget,n=_.indexOf(t),a=v[n].value;a!==T&&(w(t),I(a),null!=c&&E(c,String(a)))},R=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a,r=_.indexOf(e.currentTarget)+1;n=null!=(a=_[r])?a:_[0];break;case"ArrowLeft":var l,s=_.indexOf(e.currentTarget)-1;n=null!=(l=_[s])?l:_[_.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",d)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":g},N)},v.map((function(e){var t=e.value,n=e.label,s=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:function(e){return _.push(e)},onKeyDown:R,onFocus:D,onClick:D},s,{className:(0,l.Z)("tabs__item",p,null==s?void 0:s.className,{"tabs__item--active":T===t})}),null!=n?n:t)}))),s?(0,r.cloneElement)(S.filter((function(e){return e.props.value===T}))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},S.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==T})}))))}function m(e){var t=(0,s.Z)();return r.createElement(g,(0,a.Z)({key:String(t)},e))}},43019:function(e,t,n){n.r(t),n.d(t,{assets:function(){return g},contentTitle:function(){return d},default:function(){return c},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return m}});var a=n(87462),r=n(63366),l=(n(67294),n(3905)),s=(n(61839),n(65488)),i=n(85162),u=["components"],o={title:"Inter-process messages - GenesisSet",sidebar_label:"GenesisSet",id:"genesisSet",keywords:["server","inter-process messages","genesisSet"],tags:["server","inter-process messages","genesisSet"]},d=void 0,p={unversionedId:"server/inter-process-messages/genesisSet",id:"server/inter-process-messages/genesisSet",title:"Inter-process messages - GenesisSet",description:"GenesisSet is a generic message format used to send data between Genesis processes. The information in the messages must be stored as key-value pairs. A GenesisSet can store integers, booleans, text, etc. Importantly, it can also contain other GenesisSets.",source:"@site/docs/03_server/09_inter-process-messages/02_genesisset.md",sourceDirName:"03_server/09_inter-process-messages",slug:"/server/inter-process-messages/genesisSet",permalink:"/next/server/inter-process-messages/genesisSet",draft:!1,tags:[{label:"server",permalink:"/next/tags/server"},{label:"inter-process messages",permalink:"/next/tags/inter-process-messages"},{label:"genesisSet",permalink:"/next/tags/genesis-set"}],version:"current",sidebarPosition:2,frontMatter:{title:"Inter-process messages - GenesisSet",sidebar_label:"GenesisSet",id:"genesisSet",keywords:["server","inter-process messages","genesisSet"],tags:["server","inter-process messages","genesisSet"]},sidebar:"serverModulesSidebar",previous:{title:"Introduction",permalink:"/next/server/inter-process-messages/introduction"},next:{title:"Type-safe messages",permalink:"/next/server/inter-process-messages/type-safe-messages"}},g={},m=[{value:"Send message to Event Handler service",id:"send-message-to-event-handler-service",level:2},{value:"Send message to Request Server",id:"send-message-to-request-server",level:2},{value:"Using constructor",id:"using-constructor",level:2},{value:"Constructors",id:"constructors",level:2},{value:"Functions",id:"functions",level:2},{value:"Companion object",id:"companion-object",level:2}],k={toc:m};function c(e){var t=e.components,n=(0,r.Z)(e,u);return(0,l.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"GenesisSet")," is a generic message format used to send data between Genesis processes. The information in the messages must be stored as key-value pairs. A GenesisSet can store integers, booleans, text, etc. Importantly, it can also contain other GenesisSets."),(0,l.kt)("p",null,"In this section, we give you some examples that illustrate usage and structure."),(0,l.kt)("h2",{id:"send-message-to-event-handler-service"},"Send message to Event Handler service"),(0,l.kt)(s.Z,{defaultValue:"kotlin",values:[{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'genesisSet {\n    MESSAGE_TYPE with "EVENT_LOGIN_AUTH"\n    SERVICE_NAME with "GENESIS_AUTH_MANAGER"\n    SOURCE_REF with "sourceRef"\n    DETAILS with genesisSet {\n        USER_NAME with "User"\n        PASSWORD with "Password"\n    }\n}\n'))),(0,l.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'GenesisSet.builder()\n    .setString(MESSAGE_TYPE, "EVENT_LOGIN_AUTH")\n    .setString(SERVICE_NAME, "GENESIS_AUTH_MANAGER")\n    .setString(SOURCE_REF, "sourceRef")\n    .setGenesisSet("DETAILS", GenesisSet.builder()\n            .setString("USER_NAME", "User")\n            .setString("PASSWORD", "Password")\n            .build()\n    ).build();\n')))),(0,l.kt)("h2",{id:"send-message-to-request-server"},"Send message to Request Server"),(0,l.kt)(s.Z,{defaultValue:"kotlin",values:[{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'genesisSet {\n    MESSAGE_TYPE with "REQ_INSTRUMENT"\n    SERVICE_NAME with "GCOM_REQUEST_SERVER"\n    SOURCE_REF with "sourceRef"\n    REQUEST with genesisSet {\n        "INSTRUMENT_ID" with "*"\n    }\n}\n'))),(0,l.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'GenesisSet.builder()\n    .setString(MESSAGE_TYPE, "REQ_INSTRUMENT")\n    .setString(SERVICE_NAME, "GCOM_REQUEST_SERVER")\n    .setString(SOURCE_REF, "sourceRef")\n    .setGenesisSet("REQUEST", GenesisSet.builder()\n            .setString("INSTRUMENT_ID", "*")\n            .build()\n    ).build();\n')))),(0,l.kt)("h2",{id:"using-constructor"},"Using constructor"),(0,l.kt)(s.Z,{defaultValue:"kotlin",values:[{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'val genesisSet = GenesisSet()\ngenesisSet.setInteger("PRICE", 10)\ngenesisSet.setString("MESSAGE_TYPE", "EVENT_LOGIN_AUTH")\n'))),(0,l.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'GenesisSet genesisSet = new GenesisSet();\ngenesisSet.setInteger("PRICE", 10)\ngenesisSet.setString("MESSAGE_TYPE", "EVENT_LOGIN_AUTH")\n')))),(0,l.kt)("h2",{id:"constructors"},"Constructors"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Signature"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"GenesisSet(expectedSize: Int = 32)"),(0,l.kt)("td",{parentName:"tr",align:null},"Creates a GenesisSet object with a predetermined expected number of key-value pairs.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"GenesisSet(fields: MutableMap<String, Any?>)"),(0,l.kt)("td",{parentName:"tr",align:null},"Creates a GenesisSet object using an already existing ",(0,l.kt)("inlineCode",{parentName:"td"},"Map")," object containing key-value pairs.")))),(0,l.kt)("h2",{id:"functions"},"Functions"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Signature"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"containsField"),(0,l.kt)("td",{parentName:"tr",align:null},"fun containsField(fieldName: String): Boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Checks whether provided field name exists in GenesisSet")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"equals"),(0,l.kt)("td",{parentName:"tr",align:null},"override fun equals(other: Any?): Boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Checks equality of two GenesisSets")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"getArray"),(0,l.kt)("td",{parentName:"tr",align:null},"open operator override fun equals(other: Any?): Boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Get an array value, or default value if property not present.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"getBigDecimal"),(0,l.kt)("td",{parentName:"tr",align:null},"fun getBigDecimal(property: String, defaultValue: BigDecimal)"),(0,l.kt)("td",{parentName:"tr",align:null},"Get a BigDecimal value, or default value if property not present.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"getBoolean"),(0,l.kt)("td",{parentName:"tr",align:null},"fun getBoolean(property: String, defaultValue: Boolean)"),(0,l.kt)("td",{parentName:"tr",align:null},"Get a boolean value, or the 'defaultValue' parameter if field not found.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"getByteArray"),(0,l.kt)("td",{parentName:"tr",align:null},"fun getByteArray(property: String): ByteArray?"),(0,l.kt)("td",{parentName:"tr",align:null},"Get a byte array value (assume a Base64 string if a string is found).  You can use a full stop to denote an embedded Genesis set, or retrieve the set directly.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"getDate"),(0,l.kt)("td",{parentName:"tr",align:null},"fun getDate(key: String, defaultValue: DateTime)"),(0,l.kt)("td",{parentName:"tr",align:null},"Get a DateTime value, or default value if property not present.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"getDouble"),(0,l.kt)("td",{parentName:"tr",align:null},"fun getDouble(property: String, defaultValue: Double)"),(0,l.kt)("td",{parentName:"tr",align:null},"Get a double value, or default value if property not present.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"getGenesisSet"),(0,l.kt)("td",{parentName:"tr",align:null},"fun getGenesisSet(property: String, defaultValue: GenesisSet)"),(0,l.kt)("td",{parentName:"tr",align:null},"Get a Genesis set, or default value if property not present.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"getInteger"),(0,l.kt)("td",{parentName:"tr",align:null},"fun getInteger(property: String, defaultValue: Int)"),(0,l.kt)("td",{parentName:"tr",align:null},"Get an integer value, or default value if property not present.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"getLong"),(0,l.kt)("td",{parentName:"tr",align:null},"fun getLong(property: String, defaultValue: Long)"),(0,l.kt)("td",{parentName:"tr",align:null},"Get a long value, or default value if property not present.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"getObject"),(0,l.kt)("td",{parentName:"tr",align:null},"tailrec fun getObject(property: String, genesisSet: GenesisSet = this): Any?"),(0,l.kt)("td",{parentName:"tr",align:null},"Recursively get an object.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"getShort"),(0,l.kt)("td",{parentName:"tr",align:null},"fun getShort(property: String, defaultValue: Short)"),(0,l.kt)("td",{parentName:"tr",align:null},"Get a short value, or default value if property not present.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"getString"),(0,l.kt)("td",{parentName:"tr",align:null},"fun getString(property: String, defaultValue: String)"),(0,l.kt)("td",{parentName:"tr",align:null},"Get a string value, or the default value if property not found.  You can use a full stop to denote an embedded Genesis set, or retrieve the set directly.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"setArray"),(0,l.kt)("td",{parentName:"tr",align:null},"fun setArray(key: String, value: Any?)"),(0,l.kt)("td",{parentName:"tr",align:null},"Set an array value.  Method can be called repeatedly with the same key to build up a list of values.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"setBigDecimal"),(0,l.kt)("td",{parentName:"tr",align:null},"fun setBigDecimal(key: String, value: BigDecimal?)"),(0,l.kt)("td",{parentName:"tr",align:null},"Set BigDecimal value.  If the value exists in the set it is overwritten.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"setBoolean"),(0,l.kt)("td",{parentName:"tr",align:null},"fun setBoolean(key: String, value: Boolean?)"),(0,l.kt)("td",{parentName:"tr",align:null},"Set integer value.  If the value exists in the set it is overwritten.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"setByteArray"),(0,l.kt)("td",{parentName:"tr",align:null},"fun setByteArray(key: String, value: ByteArray?)"),(0,l.kt)("td",{parentName:"tr",align:null},"Set byte array value.  If the value exists in the set it is overwritten.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"setDate"),(0,l.kt)("td",{parentName:"tr",align:null},"fun setDate(key: String, date: DateTime?)"),(0,l.kt)("td",{parentName:"tr",align:null},"Set date value.  If the value exists in the set it is overwritten.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"setDirect"),(0,l.kt)("td",{parentName:"tr",align:null},"fun setDirect(property: String, value: Any?)"),(0,l.kt)("td",{parentName:"tr",align:null},"Shorthand method to set a field that may be multiple sets deep.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"setDirectNull"),(0,l.kt)("td",{parentName:"tr",align:null},"fun setDirectNull(property: String, value: Any?, defaultValue: Any)"),(0,l.kt)("td",{parentName:"tr",align:null},"Shorthand method to set a field that may be multiple sets deep, and accepts a default value for null parameters.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"setDouble"),(0,l.kt)("td",{parentName:"tr",align:null},"fun setDouble(key: String, value: Double?)"),(0,l.kt)("td",{parentName:"tr",align:null},"Set integer value.  If the value exists in the set it is overwritten.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"setFullArray"),(0,l.kt)("td",{parentName:"tr",align:null},"fun setFullArray(key: String, array: Iterable<*>)"),(0,l.kt)("td",{parentName:"tr",align:null},"Set a full list of values.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"setGenesisSet"),(0,l.kt)("td",{parentName:"tr",align:null},"setGenesisSet(key: String, set: GenesisSet?)"),(0,l.kt)("td",{parentName:"tr",align:null},"Embed a set inside this set.  If the value exists in the set it is overwritten.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"setInteger"),(0,l.kt)("td",{parentName:"tr",align:null},"fun setInteger(key: String, value: Int?)"),(0,l.kt)("td",{parentName:"tr",align:null},"Set integer value.  If the value exists in the set it is overwritten.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"setLong"),(0,l.kt)("td",{parentName:"tr",align:null},"fun setLong(key: String, value: Long?)"),(0,l.kt)("td",{parentName:"tr",align:null},"Set long value.  If the value exists in the set it is overwritten.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"setString"),(0,l.kt)("td",{parentName:"tr",align:null},"fun setString(key: String, value: String?"),(0,l.kt)("td",{parentName:"tr",align:null},"Set string value.  If the value exists in the set it is overwritten.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"toString"),(0,l.kt)("td",{parentName:"tr",align:null},"override fun toString(): String"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns a pretty-print string.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"unSet"),(0,l.kt)("td",{parentName:"tr",align:null},"fun unSet(field: String)"),(0,l.kt)("td",{parentName:"tr",align:null},"Shorthand method to unset a single field.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"unSetDirect"),(0,l.kt)("td",{parentName:"tr",align:null},"tailrec fun unSetDirect(property: String, genesisSet: GenesisSet = this)"),(0,l.kt)("td",{parentName:"tr",align:null},"Shorthand method to unset a field that may be multiple sets deep")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"unSetGenesisSet"),(0,l.kt)("td",{parentName:"tr",align:null},"fun unSetGenesisSet(key: String)"),(0,l.kt)("td",{parentName:"tr",align:null},"Shorthand method to unset a GenesisSet.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"with"),(0,l.kt)("td",{parentName:"tr",align:null},"infix fun String.with(any: Any?)"),(0,l.kt)("td",{parentName:"tr",align:null},"Sets key-value in GenesisSet Ex: MESSAGE_TYPE with EVENT_INSERT")))),(0,l.kt)("h2",{id:"companion-object"},"Companion object"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Functions")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"fun genesisSet(init: GenesisSet.() -> Unit): GenesisSet")," : This function enables the Kotlin DSL builder used in these ",(0,l.kt)("a",{parentName:"p",href:"#send-message-to-event-handler-service"},"examples"),"."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"fun builder(): GenesisSetBuilder")," : This method is commonly used as an alternative to the Kotlin DSL builder when creating GenesisSet objects in Java. GenesisSetBuilder allows you to create new instances of GenesisSet in a fluent way, as shown in the above ",(0,l.kt)("a",{parentName:"p",href:"#send-message-to-event-handler-service"},"examples"),"."))}c.isMDXComponent=!0}}]);