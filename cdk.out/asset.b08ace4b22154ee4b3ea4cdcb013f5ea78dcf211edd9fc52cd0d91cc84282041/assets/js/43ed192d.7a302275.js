"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[28774],{83054:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return o},default:function(){return g},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return d}});var a=n(87462),r=n(63366),s=(n(67294),n(3905)),i=(n(61839),["components"]),l={title:"Quick Start - Prepare the server & build",sidebar_label:"Prepare the server & build",id:"prepare-the-server-and-build",keywords:["getting started","quick start","server","build"],tags:["getting started","quick start","server","build"]},o=void 0,p={unversionedId:"getting-started/quick-start/prepare-the-server-and-build",id:"getting-started/quick-start/prepare-the-server-and-build",title:"Quick Start - Prepare the server & build",description:"The application has three files that contain vital configuration information:",source:"@site/docs/01_getting-started/02_quick-start/05_prepare-the-server-and-build.md",sourceDirName:"01_getting-started/02_quick-start",slug:"/getting-started/quick-start/prepare-the-server-and-build",permalink:"/next/getting-started/quick-start/prepare-the-server-and-build",draft:!1,tags:[{label:"getting started",permalink:"/next/tags/getting-started"},{label:"quick start",permalink:"/next/tags/quick-start"},{label:"server",permalink:"/next/tags/server"},{label:"build",permalink:"/next/tags/build"}],version:"current",sidebarPosition:5,frontMatter:{title:"Quick Start - Prepare the server & build",sidebar_label:"Prepare the server & build",id:"prepare-the-server-and-build",keywords:["getting started","quick start","server","build"],tags:["getting started","quick start","server","build"]},sidebar:"learningSidebar",previous:{title:"Add business logic",permalink:"/next/getting-started/quick-start/add-business-logic"},next:{title:"Create a user interface",permalink:"/next/getting-started/quick-start/create-a-user-interface"}},u={},d=[{value:"Process and service definition",id:"process-and-service-definition",level:3},{value:"Database layer",id:"database-layer",level:3}],c={toc:d};function g(e){var t=e.components,l=(0,r.Z)(e,i);return(0,s.kt)("wrapper",(0,a.Z)({},c,l,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"The application has three files that contain vital configuration information:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"alpha-processes.xml")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"alpha-service-definitions.xml")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"genesis-system-definitions.kts"))),(0,s.kt)("h3",{id:"process-and-service-definition"},"Process and service definition"),(0,s.kt)("p",null,"At present, these files are empty. You need to insert the details of the Data Server and Event Handler that you have just created."),(0,s.kt)("p",null,"Add the following content to the ",(0,s.kt)("strong",{parentName:"p"},"alpha-processes.xml")," file."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-xml"},'<processes>\n    <process name="ALPHA_DATASERVER">\n        <groupId>ALPHA</groupId>\n        <start>true</start>\n        <options>-Xmx1024m -DXSD_VALIDATE=false</options>\n        <module>genesis-pal-dataserver</module>\n        <package>global.genesis.dataserver.pal</package>\n        <script>alpha-dataserver.kts<\/script>\n        <description>Displays real-time details</description>\n        <language>pal</language>\n        <loggingLevel>DEBUG,DATADUMP_ON</loggingLevel>\n    </process>\n    <process name="ALPHA_EVENT_HANDLER">\n        <groupId>ALPHA</groupId>\n        <start>true</start>\n        <options>-Xmx256m -DRedirectStreamsToLog=true -DXSD_VALIDATE=false</options>\n        <module>genesis-pal-eventhandler</module>\n        <package>global.genesis.eventhandler.pal</package>\n        <script>alpha-eventhandler.kts<\/script>\n        <description>Handles events</description>\n        <classpath>alpha-messages*,alpha-eventhandler*</classpath>\n        <language>pal</language>\n    </process>\n</processes>\n')),(0,s.kt)("p",null,"You can find more info on the ",(0,s.kt)("strong",{parentName:"p"},"-processes.xml")," file ",(0,s.kt)("a",{parentName:"p",href:"/server/configuring-runtime/processes/"},"here"),"."),(0,s.kt)("p",null,"You can then add the following content to the ",(0,s.kt)("strong",{parentName:"p"},"alpha-service-definitions.xml")," file."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-xml"},'<configuration>\n    <service host="localhost" name="ALPHA_DATASERVER" port="11000"/>\n    <service host="localhost" name="ALPHA_EVENT_HANDLER" port="11001"/>\n</configuration>\n')),(0,s.kt)("p",null,"You can find more info on the ",(0,s.kt)("strong",{parentName:"p"},"-service-defintions.xml")," file ",(0,s.kt)("a",{parentName:"p",href:"/server/configuring-runtime/service-definitions/"},"here"),"."),(0,s.kt)("h3",{id:"database-layer"},"Database layer"),(0,s.kt)("p",null,"You can specify which database to use in your application by editing ",(0,s.kt)("strong",{parentName:"p"},"genesis-system-definition.kts"),", which is located in **genesis-product\\alpha-site-specific\\src\\main\\resources\\cfg","*","*."),(0,s.kt)("p",null,"You can find more information on the ",(0,s.kt)("strong",{parentName:"p"},"genesis-system-defintions.kts")," file ",(0,s.kt)("a",{parentName:"p",href:"/server/configuring-runtime/system-definitions/"},"here"),"."),(0,s.kt)("p",null,"If you are running your application using ",(0,s.kt)("a",{parentName:"p",href:"/getting-started/quick-start/run-the-application-docker/"},(0,s.kt)("strong",{parentName:"a"},"Docker")),", you need to use the Postgres database. Add the highlighted items ",(0,s.kt)("inlineCode",{parentName:"p"},"DbLayer")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"DbHost")," exactly as they are specified below to ",(0,s.kt)("strong",{parentName:"p"},"genesis-system-definition.kts"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:"{4,10}","{4,10}":!0},'systemDefinition {\n    global {\n        ...\n        item(name = "DbLayer", value = "SQL")\n        item(name = "DictionarySource", value = "DB")\n        item(name = "AliasSource", value = "DB")\n        item(name = "MetricsEnabled", value = "false")\n        item(name = "ZeroMQProxyInboundPort", value = "5001")\n        item(name = "ZeroMQProxyOutboundPort", value = "5000")\n        item(name = "DbHost", value = "jdbc:postgresql://localhost:5432/?user=postgres&password=postgres")\n        item(name = "DbMode", value = "VANILLA")\n        ...\n    }\n    \n}\n\n')),(0,s.kt)("p",null,"Finally, you can build the server."),(0,s.kt)("p",null,"In the Gradle menu on the right of IntelliJ, select ",(0,s.kt)("strong",{parentName:"p"},"genesis-project-alpha"),"/",(0,s.kt)("strong",{parentName:"p"},"Tasks"),"/",(0,s.kt)("strong",{parentName:"p"},"Build/Assemble"),"."),(0,s.kt)("p",null,(0,s.kt)("img",{src:n(91003).Z,width:"421",height:"474"})))}g.isMDXComponent=!0},91003:function(e,t,n){t.Z=n.p+"assets/images/assemble-server-2643a153bb1d2f1c616d781b624d2547.png"}}]);