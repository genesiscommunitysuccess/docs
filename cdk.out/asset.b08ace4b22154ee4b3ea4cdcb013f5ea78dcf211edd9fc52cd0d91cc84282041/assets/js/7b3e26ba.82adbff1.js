"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[32067],{10028:function(e){e.exports=JSON.parse('{"label":"operations","permalink":"/tags/operations","allTagsPath":"/tags","count":25,"items":[{"id":"version-2022.3/operations/artifactory/artifact-access","title":"Artifact access","description":"This document covers the Genesis artifact store, which is an instance of JFrog\'s Artifactory.","permalink":"/operations/artifactory/artifact-access"},{"id":"version-2022.3/operations/testing/component-testing","title":"Component testing","description":"There are two easy ways of testing components in your application:","permalink":"/operations/testing/component-testing"},{"id":"version-2022.3/operations/console/data","title":"Genesis Console - Data","description":"This lists all the tables in your data model.","permalink":"/operations/console/data"},{"id":"version-2022.3/operations/console/introduction","title":"Genesis Console - introduction","description":"Console enables you to monitor your application with precision, enabling you to see individual processes, resources and data. You can view logs for each process, insert data, control logging levels, monitor CPU and memory usage, and examine the code of specific processes.","permalink":"/operations/console/introduction"},{"id":"version-2022.3/operations/console/messages","title":"Genesis Console - messages","description":"This page displays system messages.","permalink":"/operations/console/messages"},{"id":"version-2022.3/operations/console/microservices","title":"Genesis Console - microservices","description":"This screen enables you to view all the processes (microservices) that are running. The services are listed on the left of the page.","permalink":"/operations/console/microservices"},{"id":"version-2022.3/operations/console/packages","title":"Genesis Console - packages","description":"Following a successful deployment, details of each process in the deployment are displayed here with the following details:","permalink":"/operations/console/packages"},{"id":"version-2022.3/operations/console/resources","title":"Genesis Console - Resources","description":"This page shows all the available resources that publish data to the web UI.","permalink":"/operations/console/resources"},{"id":"version-2022.3/operations/containerisation/build","title":"Genesis Containerisation - building a container","description":"The Genesis low-code platform provides two different options for building a Docker image.","permalink":"/operations/containerisation/build"},{"id":"version-2022.3/operations/containerisation/configuration","title":"Genesis Containerisation - configutation","description":"Configuration options","permalink":"/operations/containerisation/configuration"},{"id":"version-2022.3/operations/containerisation/healthchecks","title":"Genesis Containerisation - health checks","description":"The Genesis low-code platform Docker image provides a health check endpoint, which reports the status of the container.","permalink":"/operations/containerisation/healthchecks"},{"id":"version-2022.3/operations/containerisation/introduction","title":"Genesis containerisation - introduction","description":"You can run a full Genesis application in a self-contained Docker container.","permalink":"/operations/containerisation/introduction"},{"id":"version-2022.3/operations/containerisation/pushing","title":"Genesis containerisation - pushing the image to a registry","description":"If you choose to use the Gradle plugin to build the image, the Genesis low-code platform also offers a Gradle task that pushes your built image to your chosen repository.","permalink":"/operations/containerisation/pushing"},{"id":"version-2022.3/operations/containerisation/run","title":"Genesis containerisation - running a container","description":"If you haven\u2019t already initialised the database, you can run the Docker container passing the environment variable GENESISDBINSTALL=true;this will trigger a remap to create all the tables and will exit on completion.","permalink":"/operations/containerisation/run"},{"id":"version-2022.3/operations/containerisation/dockerfile","title":"Genesis containerisation - using your own Dockerfile","description":"If you want more control over the image, you can create your own Dockerfile, which gives you complete control over the base image and the versions of the underlying dependencies.","permalink":"/operations/containerisation/dockerfile"},{"id":"version-2022.3/operations/testing/integration-testing","title":"Integration testing","description":"Database and service tests","permalink":"/operations/testing/integration-testing"},{"id":"version-2022.3/operations/metrics/metrics","title":"Metrics","description":"The Genesis Metrics module enables you to capture metrics for specific components of your application. You achieve this by inserting programmatic calls into appropriate places in your code.","permalink":"/operations/metrics/metrics"},{"id":"version-2022.3/operations/pipeline-setup/intro","title":"Pipeline setup - Introduction","description":"Using Genesis Data Pipelines often requires some set-up/configuration of your external database. You must ensure that databases are correctly configured for Change Data Capture (CDC). Each database technology is slightly different and will therefore require slightly different set-up instructions.","permalink":"/operations/pipeline-setup/"},{"id":"version-2022.3/operations/pipeline-setup/mssql","title":"Pipeline setup - Microsoft SQL Server","description":"CDC capabilities are only supported by MS SQL Server 2016 and later Standard and Enterprise editions. Ensure that your MS SQL instance is the Standard or Enterprise version before continuing.","permalink":"/operations/pipeline-setup/mssql"},{"id":"version-2022.3/operations/pipeline-setup/oracle","title":"Pipeline setup - Oracle DB","description":"CDC capabilities are only supported by Oracle Enterprise edition. Ensure that your Oracle instance is the Enterprise version before continuing.","permalink":"/operations/pipeline-setup/oracle"},{"id":"version-2022.3/operations/pipeline-setup/postgres","title":"Pipeline setup - Postgres","description":"PostgreSQL configuration","permalink":"/operations/pipeline-setup/postgres"},{"id":"version-2022.3/operations/release-notes/introduction","title":"Release notes - Introduction","description":"Our documentation covers the following releases:","permalink":"/operations/release-notes/introduction"},{"id":"version-2022.3/operations/release-notes/version-2022-1","title":"Release notes - Version 2022.1","description":"This is version v2022.1 of the documentation for the Genesis low-code platform.","permalink":"/operations/release-notes/version-2022-1"},{"id":"version-2022.3/operations/release-notes/version-2022-2","title":"Release notes - Version 2022.2","description":"Release notes","permalink":"/operations/release-notes/version-2022-2"},{"id":"version-2022.3/operations/testing/unit-testing","title":"Unit testing","description":"Unit testing does not require a database or the running of a Genesis service, so, as you define your application, each component should be unit tested according to standard best practice.","permalink":"/operations/testing/unit-testing"}]}')}}]);