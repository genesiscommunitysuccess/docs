"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[45815],{87574:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return r},metadata:function(){return u},toc:function(){return c}});var s=n(87462),i=n(63366),a=(n(67294),n(3905)),o=(n(61839),["components"]),r={title:"Foundation testing",sidebar_label:"Foundation testing",id:"foundation-testing",keywords:["web","testing","frontend","ui","unit","end-to-end","e2e","uvu","playwright"],tags:["test","testing","frontend","ui","unit","end-to-end","e2e","uvu","playwright"]},l="Genesis Foundation testing",u={unversionedId:"web/testing/foundation-testing",id:"version-2022.3/web/testing/foundation-testing",title:"Foundation testing",description:"foundation-testing provides shared unit and e2e testing functionality.",source:"@site/versioned_docs/version-2022.3/04_web/06_testing/01_foundation-testing.md",sourceDirName:"04_web/06_testing",slug:"/web/testing/foundation-testing",permalink:"/web/testing/foundation-testing",draft:!1,tags:[{label:"test",permalink:"/tags/test"},{label:"testing",permalink:"/tags/testing"},{label:"frontend",permalink:"/tags/frontend"},{label:"ui",permalink:"/tags/ui"},{label:"unit",permalink:"/tags/unit"},{label:"end-to-end",permalink:"/tags/end-to-end"},{label:"e2e",permalink:"/tags/e-2-e"},{label:"uvu",permalink:"/tags/uvu"},{label:"playwright",permalink:"/tags/playwright"}],version:"2022.3",sidebarPosition:1,frontMatter:{title:"Foundation testing",sidebar_label:"Foundation testing",id:"foundation-testing",keywords:["web","testing","frontend","ui","unit","end-to-end","e2e","uvu","playwright"],tags:["test","testing","frontend","ui","unit","end-to-end","e2e","uvu","playwright"]},sidebar:"frontendSidebar",previous:{title:"Foundation login",permalink:"/web/micro-front-ends/foundation-login"},next:{title:"Introduction",permalink:"/web/deploying/introduction"}},p={},c=[{value:"API Docs",id:"api-docs",level:3},{value:"Unit Testing with UVU",id:"unit-testing-with-uvu",level:2},{value:"UVU features",id:"uvu-features",level:3},{value:"E2E testing with Playwright",id:"e2e-testing-with-playwright",level:2},{value:"Playwright features",id:"playwright-features",level:3},{value:"Test organisation",id:"test-organisation",level:2},{value:"Test scripts",id:"test-scripts",level:2},{value:"Testing logic",id:"testing-logic",level:2},{value:"Testing components",id:"testing-components",level:2},{value:"Testing E2E",id:"testing-e2e",level:2}],d={toc:c};function g(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,s.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"genesis-foundation-testing"},"Genesis Foundation testing"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"foundation-testing")," provides shared unit and e2e testing functionality."),(0,a.kt)("h3",{id:"api-docs"},(0,a.kt)("a",{parentName:"h3",href:"/web/testing/docs/api/"},"API Docs")),(0,a.kt)("h2",{id:"unit-testing-with-uvu"},"Unit Testing with UVU"),(0,a.kt)("p",null,"Unit testing is provided by ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/lukeed/uvu"},"UVU"),"."),(0,a.kt)("h3",{id:"uvu-features"},"UVU features"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"super ",(0,a.kt)("a",{parentName:"li",href:"https://npm.anvaka.com/#/view/2d/uvu"},"lightweight")),(0,a.kt)("li",{parentName:"ul"},"extremely ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/lukeed/uvu/tree/master#benchmarks"},"performant")),(0,a.kt)("li",{parentName:"ul"},"individually executable test files"),(0,a.kt)("li",{parentName:"ul"},"supports ",(0,a.kt)("inlineCode",{parentName:"li"},"async"),"/",(0,a.kt)("inlineCode",{parentName:"li"},"await")," tests"),(0,a.kt)("li",{parentName:"ul"},"supports native ES modules"),(0,a.kt)("li",{parentName:"ul"},"browser-compatible"),(0,a.kt)("li",{parentName:"ul"},"familiar API")),(0,a.kt)("h2",{id:"e2e-testing-with-playwright"},"E2E testing with Playwright"),(0,a.kt)("p",null,"E2E testing is provided by ",(0,a.kt)("a",{parentName:"p",href:"https://playwright.dev/docs/intro"},"Playwright")),(0,a.kt)("h3",{id:"playwright-features"},"Playwright features"),(0,a.kt)("p",null,"Playwright enables you to perform a number of very useful functions."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Run tests across all browsers."),(0,a.kt)("li",{parentName:"ul"},"Execute tests in parallel."),(0,a.kt)("li",{parentName:"ul"},"Enjoy context isolation out of the box."),(0,a.kt)("li",{parentName:"ul"},"Capture videos, screenshots and other artifacts on failure."),(0,a.kt)("li",{parentName:"ul"},"Integrate your POMs as extensible fixtures.")),(0,a.kt)("h2",{id:"test-organisation"},"Test organisation"),(0,a.kt)("p",null,"Unit testing specific logic can be done by adding a test file alongside the source file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"logic.ts\nlogic.test.ts\n")),(0,a.kt)("p",null,"If your test spans more than one file or is more of an end-to-end test, you could wish to add your test to your package's\n",(0,a.kt)("strong",{parentName:"p"},"/test")," directory instead. An example structure might be:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\u251c\u2500\u2500 src \n\u2502   \u2514\u2500\u2500 logic.ts\n\u2502   \u2514\u2500\u2500 logic.test.ts\n\u2502   \u2514\u2500\u2500 component.ts\n\u2502   \u2514\u2500\u2500 component.test.ts\n\u251c\u2500\u2500 test \n\u2502   \u2514\u2500\u2500 e2e\n\u2502       \u2514\u2500\u2500 baseline.e2e.ts\n\u2502   \u2514\u2500\u2500 unit\n\u2502       \u2514\u2500\u2500 baseline.test.ts\n\u251c\u2500\u2500 jsdom.setup.ts \n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 playwright.config.ts\n")),(0,a.kt)("p",null,"The contents of the ",(0,a.kt)("strong",{parentName:"p"},"jsdom.setup.ts")," file for your package could simply be:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export * from '@genesislcap/foundation-testing/jsdom';\n")),(0,a.kt)("p",null,"The contents of the ",(0,a.kt)("strong",{parentName:"p"},"playwright.config.ts")," file for your package could include:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { PlaywrightTestConfig } from '@playwright/test';\nconst config: PlaywrightTestConfig = {\n  testMatch: '**/*.e2e.ts',\n  globalSetup: '@genesislcap/foundation-testing/playwright', // returns teardown\n  projects: [\n    {\n      name: 'Chrome Stable',\n      use: {\n        browserName: 'chromium',\n        channel: 'chrome',\n      },\n    },\n  ],\n};\nexport default config;\n")),(0,a.kt)("h2",{id:"test-scripts"},"Test scripts"),(0,a.kt)("p",null,"You could add the following test-related scripts to the ",(0,a.kt)("strong",{parentName:"p"},"package.json")," file for your package:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'"test": "npm run test:unit && npm run test:e2e",\n"test:coverage": "c8 --include=src npm run test:unit",\n"test:coverage:report": "npm run test:coverage && c8 report --reporter=text-lcov > coverage.lcov",\n"test:coverage:report:nyc": "npm run test:unit:browser -- --cov && npx nyc report --reporter=html",\n"test:e2e": "npx playwright test --config=./playwright.config.ts",\n"test:e2e:debug": "cross-env PWDEBUG=1 npm run test:e2e",\n"test:unit": "npm run test:unit:node",\n"test:unit:browser": "playwright-test \\"./**/*.test.ts\\" --runner uvu",\n"test:unit:browser:watch": "npm run test:unit:browser -- -w -d",\n"test:unit:node": "npm run test:unit:node:src && npm run test:unit:node:test",\n"test:unit:node:src": "uvu -r tsm -r esm -r ./jsdom.setup.ts ./src \\".*.test.ts\\"",\n"test:unit:node:test": "uvu -r tsm -r esm -r ./jsdom.setup.ts ./test/unit \\".*.test.ts\\"",\n"test:unit:watch": "watchlist src test -- npm run test:unit"\n')),(0,a.kt)("p",null,"To provide the dev dependencies for these test scripts, you need to install: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"@playwright/test playwright-test c8 esm jsdom tsm uvu watchlist\n")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"We are working on enhancing the ",(0,a.kt)("inlineCode",{parentName:"em"},"genx")," cli to abstract test running, so you can offload this setup and tasks.")),(0,a.kt)("h2",{id:"testing-logic"},"Testing logic"),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"logic.test.ts")," will probably use ",(0,a.kt)("inlineCode",{parentName:"p"},"createLogicSuite"),", which is used to test function output given certain input\narguments. Based on user feedback, these arguments are now passed as an array by convention:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// logic.test.ts\nimport { createLogicSuite } from '@genesislcap/foundation-testing';\nimport { myFunction } from './logic';\n\nconst Suite = createLogicSuite('myFunction');\nSuite('myFunction should provide expected results', ({ runCases }) => {\n  runCases(myFunction, [\n    [['1'], true],\n    [[123], true],\n    [['60%'], true],\n    [['$60'], false],\n    [['1.1'], false],\n    [[''], false],\n    [[true], false],\n    [[null], false],\n    [[undefined], false],\n  ]);\n});\n\nSuite.run();\n")),(0,a.kt)("h2",{id:"testing-components"},"Testing components"),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"component.test.ts")," file or any test that directly or indirectly uses the DI will also use\n",(0,a.kt)("inlineCode",{parentName:"p"},"createComponentSuite"),". Apart from setting up and tearing down your element fixture with a wrapping design system and DI\ncontainer, this util also allows you to provide DI container mocks, which will be required for certain testing flows."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// component.test.ts\nimport { Connect } from '@genesislcap/foundation-comms';\nimport { ConnectMock } from '@genesislcap/foundation-comms/testing';\nimport { assert, createComponentSuite, Registration } from '@genesislcap/foundation-testing';\nimport { MyComponent } from './component';\n\n/**\n * As we're using tag name in the Suite, we hold a reference to avoid tree shaking.\n */\nMyComponent;\n\n/**\n * Create mock\n */\nconst connectMock = new ConnectMock();\nconnectMock.nextMetadata = {\n  FIELD: [\n    {\n      NAME: 'foo',\n      TYPE: 'bar',\n    },\n  ],\n};\n\n/**\n * Resister mock instance\n */\nconst mocks = [Registration.instance(Connect, connectMock)];\n\nconst Suite = createComponentSuite<MyComponent>(\n  'MyComponent',\n  'my-component', // < or () => myComponent() if your component is composeable\n  null,\n  mocks,\n);\n\nSuite('Can be created in the DOM', async ({ element }) => {\n  assert.ok(element);\n});\n\nSuite('Connect is mocked in the container', async ({ container }) => {\n  const serviceMock = container.get(Connect);\n  assert.instance(serviceMock, ConnectMock);\n});\n\nSuite('Attr changes update internals as expected', async ({ element }) => {\n  element.setAttribute('resource-name', 'ALL_USERS');\n  assert.match(element.optionsHash, /ALL_USERS/);\n  element.setAttribute('order-by', 'USERNAME');\n  assert.match(element.optionsHash, /USERNAME/);\n});\n\nSuite('Connect.getMetadata returns expected nextMetadata', async ({ container }) => {\n  const serviceMock = container.get(Connect) as ConnectMock;\n  /**\n   * Assert base case\n   */\n  let serviceMeta = await serviceMock.getMetadata('someResource');\n  assert.is(serviceMeta.FIELD[0].NAME, 'foo');\n  /**\n   * Apply next and assert\n   */\n  const metadata = {\n    FIELD: [\n      {\n        NAME: 'hello',\n        TYPE: 'world',\n      },\n    ],\n  };\n  serviceMock.nextMetadata = {\n    ...metadata,\n  };\n  serviceMeta = await serviceMock.getMetadata('someResource');\n  assert.equal(serviceMeta, {\n    ...metadata,\n  });\n  // TODO: Trigger and cross check component reactions to underlying data changes\n});\n\nSuite.run();\n")),(0,a.kt)("h2",{id:"testing-e2e"},"Testing E2E"),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"baseline.e2e.ts")," file uses ",(0,a.kt)("inlineCode",{parentName:"p"},"playwright"),", and test cases will have access to the fixtures provided during set-up."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { expect } from '@playwright/test';\nimport { test } from '@genesislcap/foundation-testing/e2e';\n\ntest('baseline test', async ({ page }) => {\n    await page.goto('https://playwright.dev/');\n    const name = await page.innerText('.navbar__title');\n    expect(name).toBe('Playwright');\n});\n")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"We will be adding more details on E2E in future updates.")))}g.isMDXComponent=!0}}]);