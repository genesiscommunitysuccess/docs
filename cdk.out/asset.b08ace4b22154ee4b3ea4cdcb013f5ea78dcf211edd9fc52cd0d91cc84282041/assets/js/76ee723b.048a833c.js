"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[89125],{74529:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return d},metadata:function(){return l},toc:function(){return v}});var a=t(87462),r=t(63366),s=(t(67294),t(3905)),i=(t(61839),["components"]),d={title:"State Machine - Examples",sidebar_label:"Examples",id:"examples",keywords:["server","state machine","examples"],tags:["server","state machine","examples"]},o=void 0,l={unversionedId:"server/state-machine/examples",id:"version-2022.3/server/state-machine/examples",title:"State Machine - Examples",description:"The following example of a state machine defines five events that control the transition of trades from one state to another.",source:"@site/versioned_docs/version-2022.3/03_server/06_state-machine/04_examples.md",sourceDirName:"03_server/06_state-machine",slug:"/server/state-machine/examples",permalink:"/server/state-machine/examples",draft:!1,tags:[{label:"server",permalink:"/tags/server"},{label:"state machine",permalink:"/tags/state-machine"},{label:"examples",permalink:"/tags/examples"}],version:"2022.3",sidebarPosition:4,frontMatter:{title:"State Machine - Examples",sidebar_label:"Examples",id:"examples",keywords:["server","state machine","examples"],tags:["server","state machine","examples"]},sidebar:"serverModulesSidebar",previous:{title:"Advanced",permalink:"/server/state-machine/advanced"},next:{title:"Configuring Runtime",permalink:"/server/state-machine/configuring-runtime"}},m={},v=[],c={toc:v};function u(e){var n=e.components,t=(0,r.Z)(e,i);return(0,s.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"The following example of a state machine defines five events that control the transition of trades from one state to another."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},"eventHandler {\n    stateMachine(TRADE.TRADE_STATUS) {\n        insertEvent {\n            initialStates(TradeStatus.DRAFT)\n\n            excludedFields {\n                ENTERED_BY\n                ENTERED_TIME\n                MODIFIED_BY\n                MODIFIED_TIME\n            }\n\n            onEvent { event ->\n                event.withDetails {\n                    enteredBy = event.userName\n                    enteredTime = now()\n                }\n            }\n\n            onValidate { trade ->\n                verifyOnly { trade hasField TRADE.PRICE }\n                verifyOnly { trade hasField TRADE.QUANTITY greaterThan 0 }\n            }\n        }\n\n        modifyEvent {\n            mutableStates(TradeStatus.DRAFT, TradeStatus.OPEN)\n\n            excludedFields {\n                ENTERED_BY\n                ENTERED_TIME\n                MODIFIED_BY\n                MODIFIED_TIME\n            }\n\n            onEvent { event, trade ->\n                trade.modifiedBy = event.userName\n                trade.modifiedTime = now()\n            }\n\n            onValidate { trade ->\n                verifyOnly { trade hasField TRADE.PRICE }\n                verifyOnly { trade hasField TRADE.QUANTITY greaterThanOrEqual 0 }\n            }\n        }\n\n        transitionEvent(TradeStatus.OPEN) {\n            fromStates(TradeStatus.DRAFT)\n\n            onEvent { event, trade ->\n                trade.modifiedBy = event.userName\n                trade.modifiedTime = now()\n            }\n        }\n\n        transitionEvent(TradeStatus.CLOSED) {\n            fromStates(TradeStatus.DRAFT)\n\n            onEvent { event, trade ->\n                trade.modifiedBy = event.userName\n                trade.modifiedTime = now()\n            }\n        }\n\n        transitionEvent(TradeStatus.CANCELLED) {\n            fromStates(TradeStatus.DRAFT)\n\n            onEvent { event, trade ->\n                trade.modifiedBy = event.userName\n                trade.modifiedTime = now()\n            }\n        }\n    }\n}\n\n")))}u.isMDXComponent=!0}}]);