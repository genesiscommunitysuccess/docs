"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[54978],{128:function(t,e,a){a.r(e),a.d(e,{assets:function(){return u},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return d},metadata:function(){return o},toc:function(){return c}});var n=a(87462),i=a(63366),r=(a(67294),a(3905)),l=(a(61839),["components"]),d={title:"State Machine - Advanced",sidebar_label:"Advanced",id:"advanced",keywords:["server","state machine","advanced"],tags:["server","state machine","advanced"]},s=void 0,o={unversionedId:"server/state-machine/advanced",id:"version-2022.3/server/state-machine/advanced",title:"State Machine - Advanced",description:"The state machine can be injected to the Event Handler script or API.",source:"@site/versioned_docs/version-2022.3/03_server/06_state-machine/03_advanced.md",sourceDirName:"03_server/06_state-machine",slug:"/server/state-machine/advanced",permalink:"/server/state-machine/advanced",draft:!1,tags:[{label:"server",permalink:"/tags/server"},{label:"state machine",permalink:"/tags/state-machine"},{label:"advanced",permalink:"/tags/advanced"}],version:"2022.3",sidebarPosition:3,frontMatter:{title:"State Machine - Advanced",sidebar_label:"Advanced",id:"advanced",keywords:["server","state machine","advanced"],tags:["server","state machine","advanced"]},sidebar:"serverModulesSidebar",previous:{title:"Basics",permalink:"/server/state-machine/basics"},next:{title:"Examples",permalink:"/server/state-machine/examples"}},u={},c=[{value:"StateMachineBuilder",id:"statemachinebuilder",level:2},{value:"readState",id:"readstate",level:3},{value:"state",id:"state",level:3},{value:"StateBuilder",id:"statebuilder",level:4},{value:"StateMachine",id:"statemachine",level:2},{value:"Inject state machine",id:"inject-state-machine",level:2},{value:"Inject state machine in Event Handler file",id:"inject-state-machine-in-event-handler-file",level:3},{value:"Inject state machine in event handler API",id:"inject-state-machine-in-event-handler-api",level:3}],p={toc:c};function m(t){var e=t.components,a=(0,i.Z)(t,l);return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The state machine can be injected to the Event Handler script or API."),(0,r.kt)("h2",{id:"statemachinebuilder"},"StateMachineBuilder"),(0,r.kt)("p",null,"You can build state machine using this interface by providing following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Entity of the state machine. In below example it is called Trade."),(0,r.kt)("li",{parentName:"ul"},"State of entity field to manage, this field needs to be ENUM field. In the below example it is called TradeStatus"),(0,r.kt)("li",{parentName:"ul"},"The side effect of a state change, is something you can subscribe to when the state changes. In below example it is called TradeEffect.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"sealed class TradeEffect {\n    object New : TradeEffect()\n    object Allocated : TradeEffect()\n    object Cancelled : TradeEffect()\n}\n")),(0,r.kt)("p",null,"It has got following functions:"),(0,r.kt)("h3",{id:"readstate"},"readState"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fun readState(init: T.() -> S)"),"\nSpecifies which state to read from table."),(0,r.kt)("h3",{id:"state"},"state"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fun state(state: S, stateHandler: StateBuilder<T, S, E>.() -> Unit)"),"\nThis is the method where you define how to handle the state of the table. Handling of the state is managed by StateBuilder, which is explained in detail below."),(0,r.kt)("h4",{id:"statebuilder"},"StateBuilder"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"Signature"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isMutable"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"var isMutable: Boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"When set to false, any modification to the  entity while in this state will be rejected")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"initialState"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"fun initialState(sideEffect: E, transitionBuilder: TransitionBuilderInit<T>? = null)")),(0,r.kt)("td",{parentName:"tr",align:null},"The state machine will accept the specified state on creation")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"initialState"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"fun initialState(sideEffect: E,priority: Int,transitionBuilder: TransitionBuilderInit<T>? = null)")),(0,r.kt)("td",{parentName:"tr",align:null},"The state machine will accept the specified state on creation and you can specify priority for this transition")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"initialStateWithContext"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"fun <C : Any> initialStateWithContext(sideEffect: E,transitionBuilder: ContextTransitionBuilder<T, C>.() -> Unit,)")),(0,r.kt)("td",{parentName:"tr",align:null},"The state machine will accept the current state on creation. The validation will share a context.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"initialStateWithContext"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"fun <C : Any> initialStateWithContext(sideEffect: E,priority: Int,transitionBuilder: ContextTransitionBuilder<T, C>.() -> Unit,)")),(0,r.kt)("td",{parentName:"tr",align:null},"The state machine will accept the current state on creation and you can specify priority for this transition. The validation will share a context.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"transition"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"fun transition(newState: S,sideEffect: E,transitionBuilder: TransitionBuilderInit<T>? = null,)")),(0,r.kt)("td",{parentName:"tr",align:null},"The state machine will a transition from the current state to ","[newState]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"transition"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"fun transition(newState: S,sideEffect: E,priority: Int,transitionBuilder: TransitionBuilderInit<T>? = null,)")),(0,r.kt)("td",{parentName:"tr",align:null},"The state machine will a transition from the current state to ","[newState]","  and you can specify priority for this transition")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"transitionWithContext"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"fun <C : Any> transitionWithContext(newState: S,sideEffect: E,transitionBuilder: ContextTransitionBuilder<T, C>.() -> Unit,) ")),(0,r.kt)("td",{parentName:"tr",align:null},"The state machine will a transition from the current state to ","[newState]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"transitionWithContext"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"fun <C : Any> transitionWithContext(newState: S,sideEffect: E,priority: Int,transitionBuilder: ContextTransitionBuilder<T, C>.() -> Unit,)")),(0,r.kt)("td",{parentName:"tr",align:null},"The state machine will a transition from the current state to ","[newState]"," and you can specify priority for this transition. The validation will share a context")))),(0,r.kt)("p",null,"State machine creation is explained with the example below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Module\nclass TradeStateMachine @Inject constructor(\n    db: AsyncEntityDb\n) {\n    private val internalState: StateMachine<Trade, TradeStatus, TradeEffect> = db.stateMachineBuilder {\n        // Read TRADE_STATUS from Trade table\n        readState { tradeStatus }\n\n        // Defines how the status NEW is handled\n        state(TradeStatus.NEW) {\n            // Allows the status to change\n            isMutable = true\n\n            // State machine will accept the specified state on creation of trade\n            initialState(TradeEffect.New) {\n                onValidate { trade ->\n                    if (trade.isTradeIdInitialised && trade.tradeId.isNotEmpty()) {\n                        verify {\n                            db hasNoEntry Trade.ById(trade.tradeId)\n                        }\n                    }\n                }\n            }\n\n            onCommit { trade ->\n                if (trade.enteredBy == \"TestUser\") {\n                    trade.price = 10.0\n                }\n            }\n\n            // Allowed transitions are from NEW to ALLOCATED\n            transition(TradeStatus.ALLOCATED, TradeEffect.Allocated)\n            // Allowed transitions are from NEW to CANCELLED\n            transition(TradeStatus.CANCELLED, TradeEffect.Cancelled)\n        }\n\n        // Defines how the status ALLOCATED is handled\n        state(TradeStatus.ALLOCATED) {\n            // Doesn't allow the status to change\n            isMutable = false\n\n            transition(TradeStatus.NEW, TradeEffect.New)\n            transition(TradeStatus.CANCELLED, TradeEffect.Cancelled)\n        }\n\n        // Defines how the status CANCELLED is handled\n        state(TradeStatus.CANCELLED) {\n            // Doesn't allow the status to change\n            isMutable = false\n        }\n    }\n}\n")),(0,r.kt)("h2",{id:"statemachine"},"StateMachine"),(0,r.kt)("p",null,"State machine properties and functions:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"Signature"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"sideEffects"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"val sideEffects: Set<E>")),(0,r.kt)("td",{parentName:"tr",align:null},"Provides all possible side effects")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"subscribe"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"fun subscribe(): Flow<Transition<T, S, E>>")),(0,r.kt)("td",{parentName:"tr",align:null},"Subscribers will be notified of state transitions")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"highestPriorityTransition"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"suspend fun highestPriorityTransition(value: T,): ValidationResult<S>?")),(0,r.kt)("td",{parentName:"tr",align:null},"Given the table name, it gives the highest priority transition of the table if present or null")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"currentState"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"suspend fun currentState(value: T): S?")),(0,r.kt)("td",{parentName:"tr",align:null},"Reads the current state ","[S]"," of ","[value][T]"," from the database")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"create"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"suspend fun create(value: T): Transition<T, S, E>")),(0,r.kt)("td",{parentName:"tr",align:null},"Creates a new entity in the database.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"update"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"suspend fun update(value: T): Transition<T, S, E>?")),(0,r.kt)("td",{parentName:"tr",align:null},"Will validate and write ","[value]"," to the database. Returns a ","[Transition]"," if the update caused a transition, else null and throws IllegalArgumentException if the value is not valid")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"update"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"suspend fun update(uniqueEntityIndex: UniqueEntityIndex<T, *>,updateEntity: suspend (entity: T, transaction: AsyncMultiEntityReadWriteGenericSupport) -> Unit,): Transition<T, S, E>?")),(0,r.kt)("td",{parentName:"tr",align:null},"Accepts a ","[UniqueEntityIndex]"," and a update lambda and validates and writes ","[value]"," to the database. Returns a ","[Transition]"," if the update caused a transition, else null and throws IllegalArgumentException if the value is not valid, or if the item doesn't exist in the database.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"updateIfExists"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"suspend fun updateIfExists(uniqueEntityIndex: UniqueEntityIndex<T, *>,updateEntity: suspend (entity: T, transaction: AsyncMultiEntityReadWriteGenericSupport) -> Unit,): Transition<T, S, E>?")),(0,r.kt)("td",{parentName:"tr",align:null},"Accepts a ","[UniqueEntityIndex]"," and a update lambda and validates and writes ","[value]"," to the database. Returns a ","[Transition]"," if the update caused a transition, else null and throws IllegalArgumentException if the value is not valid")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"validate"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"suspend fun validate(value: T,newState: S,): ValidationResult<S>")),(0,r.kt)("td",{parentName:"tr",align:null},"Validates if ","[value]"," can successfully transition to ","[newState]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"withTransaction"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"suspend fun <O : Any?> withTransaction(transaction: AsyncMultiEntityReadWriteGenericSupport,handling: suspend StateMachine<T, S, E>.() -> O,): O")),(0,r.kt)("td",{parentName:"tr",align:null},"Will take a transaction and will handle all state machine calls within ","[handling]"," within the provided transaction")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"withTransaction"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"suspend fun <O : Any?> withTransaction(handling: suspend StateMachine<T, S, E>.() -> O,): O")),(0,r.kt)("td",{parentName:"tr",align:null},"Will create a transaction and will handle all state machine calls within ","[handling]"," within the provided transaction")))),(0,r.kt)("p",null,"Example for above state machine usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"suspend fun insert(trade: Trade): Transition<Trade, TradeStatus, TradeEffect> = internalState.create(trade)\n\nsuspend fun modify(tradeId: String, modify: suspend (Trade) -> Unit): Transition<Trade, TradeStatus, TradeEffect>? =\n        internalState.update(Trade.ById(tradeId)) { trade, _ -> modify(trade) }\n\nsuspend fun modify(trade: Trade): Transition<Trade, TradeStatus, TradeEffect>? = internalState.update(trade)\n")),(0,r.kt)("h2",{id:"inject-state-machine"},"Inject state machine"),(0,r.kt)("h3",{id:"inject-state-machine-in-event-handler-file"},"Inject state machine in ",(0,r.kt)("a",{parentName:"h3",href:"/server/event-handler/basics"},"Event Handler")," file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'eventHandler {\n    val stateMachine = inject<TradeStateMachine>()\n\n    eventHandler<Trade>(name = "TRADE_INSERT", transactional = true) {\n        permissioning {\n            permissionCodes = listOf("TRADER")\n            auth(mapName = "ENTITY_VISIBILITY") {\n                field { counterpartyId }\n            }\n        }\n        onValidate { event ->\n            val message = event.details\n            verify {\n                entityDb hasEntry Counterparty.ById(message.counterpartyId)\n                entityDb hasEntry Instrument.ById(message.instrumentId)\n            }\n            ack()\n        }\n        onCommit { event ->\n            val trade = event.details\n            trade.enteredBy = event.userName\n            stateMachine.insert(entityDb, trade)\n            ack()\n        }\n    }\n}\n')),(0,r.kt)("p",null,"You can also see a state machine being created in practice in our ",(0,r.kt)("a",{parentName:"p",href:"/server/state-machine/introduction/"},"tutorial"),"."),(0,r.kt)("h3",{id:"inject-state-machine-in-event-handler-api"},"Inject state machine in event handler ",(0,r.kt)("a",{parentName:"h3",href:"/database/api-reference/event-handler-api/"},"API")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Module\nclass EventCompanyHandlerAsync @Inject constructor(\n  private val entityDb: AsyncEntityDb,\n  private val tradeMachine: TradeStateMachine\n) : AsyncEventHandler<Company, EventReply> {\n  override suspend fun process(message: Event<Company>): EventReply {\n    val company = message.details\n    // custom code block..\n    return EventReply.EventAck()\n  }\n}\n")))}m.isMDXComponent=!0}}]);