"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[24295],{9264:function(e,n,a){a.r(n),a.d(n,{assets:function(){return p},contentTitle:function(){return s},default:function(){return v},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return m}});var t=a(87462),r=a(63366),i=(a(67294),a(3905)),l=(a(61839),["components"]),o={title:"Event Handler - Examples",sidebar_label:"Examples",id:"examples",keywords:["server","event handler","examples"],tags:["server","event handler","examples"]},s=void 0,d={unversionedId:"server/event-handler/examples",id:"version-2022.3/server/event-handler/examples",title:"Event Handler - Examples",description:"On this page, you can find useful examples of code for an Event Handler. We start with a very basic example, and then we provide further examples to cover key functions, such as exception handling and permissioning.",source:"@site/versioned_docs/version-2022.3/03_server/04_event-handler/04_examples.md",sourceDirName:"03_server/04_event-handler",slug:"/server/event-handler/examples",permalink:"/server/event-handler/examples",draft:!1,tags:[{label:"server",permalink:"/tags/server"},{label:"event handler",permalink:"/tags/event-handler"},{label:"examples",permalink:"/tags/examples"}],version:"2022.3",sidebarPosition:4,frontMatter:{title:"Event Handler - Examples",sidebar_label:"Examples",id:"examples",keywords:["server","event handler","examples"],tags:["server","event handler","examples"]},sidebar:"serverModulesSidebar",previous:{title:"Advanced",permalink:"/server/event-handler/advanced"},next:{title:"Configuring runtime",permalink:"/server/event-handler/configuring-runtime"}},p={},m=[{value:"Basic",id:"basic",level:2},{value:"Carrying context",id:"carrying-context",level:2},{value:"Handling exceptions",id:"handling-exceptions",level:2},{value:"Authorisation",id:"authorisation",level:2},{value:"Permissioning",id:"permissioning",level:3},{value:"fixed permissions",id:"fixed-permissions",level:3},{value:"ACID compliance",id:"acid-compliance",level:2},{value:"Approval requests",id:"approval-requests",level:2}],c={toc:m};function v(e){var n=e.components,a=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,t.Z)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"On this page, you can find useful examples of code for an Event Handler. We start with a very basic example, and then we provide further examples to cover key functions, such as exception handling and permissioning."),(0,i.kt)("p",null,"Also, there is a nice simple example of an ",(0,i.kt)("inlineCode",{parentName:"p"},"eventHandler")," codeblock in our ",(0,i.kt)("a",{parentName:"p",href:"/getting-started/go-to-the-next-level/setting-genesis-evaluator-rules/#create-the-eventhandler"},"tutorial"),". "),(0,i.kt)("h2",{id:"basic"},"Basic"),(0,i.kt)("p",null,"The example below is a simple Event Handler to validate input and insert a record in the database. There is an ",(0,i.kt)("a",{parentName:"p",href:"/server/event-handler/basics/#adding-validation"},(0,i.kt)("inlineCode",{parentName:"a"},"onValidate"))," block that defines the validation and an ",(0,i.kt)("a",{parentName:"p",href:"/server/event-handler/basics/#a-simple-example-of-an-event-handler"},(0,i.kt)("inlineCode",{parentName:"a"},"onCommit"))," block that specifies the action that is to be taken."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'   eventHandler<Company>(name = "COMPANY_INSERT") {\n        onValidate { event ->\n            val company = event.details\n            require(company.companyName != "MY_COMPANY") {\n                "We don\'t accept your company"\n            }\n            ack()\n        }\n        onCommit { event ->\n            val company = event.details\n            val result = entityDb.insert(company)\n            ack(listOf(mapOf("COMPANY_ID" to result.record.companyId)))\n        }\n    }\n')),(0,i.kt)("h2",{id:"carrying-context"},"Carrying context"),(0,i.kt)("p",null,"This next snippet is an example of how to reuse data between ",(0,i.kt)("a",{parentName:"p",href:"/server/event-handler/basics/#adding-validation"},"onValidate")," and ",(0,i.kt)("a",{parentName:"p",href:"/server/event-handler/basics/#a-simple-example-of-an-event-handler"},"onCommit")," using a ",(0,i.kt)("inlineCode",{parentName:"p"},"contextEventHandler"),". In the ",(0,i.kt)("inlineCode",{parentName:"p"},"onValidate")," block, we check to see if a trade exists in the database, and we pass it as ",(0,i.kt)("em",{parentName:"p"},"context")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},"onCommit")," block so we don't have to do another database lookup."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'    contextEventHandler<TradeAlertAck, Trade>(name = "TRADE_ALERT_ACK") {\n        onValidate { event ->\n            val tradeAlert = event.details\n            val tradeId = tradeAlert.tradeId\n            val existingTrade = entityDb.get(tradeId)\n            require(existingTrade != null) {\n                "Failed to find trade with id: $tradeId"\n            }\n            validationAck(validationContext = existingTrade)\n        }\n        onCommit { event, context ->\n            val tradeAlert = event.details\n            val trade = context ?: throw IllegalStateException("Expected trade with id ${tradeAlert.tradeId} as context but it is missing")\n            trade.acknowledged = true\n            entityDb.modify(trade)\n            ack()\n        }\n    }\n')),(0,i.kt)("h2",{id:"handling-exceptions"},"Handling exceptions"),(0,i.kt)("p",null,"GPAL exception handling differs from the standard Java/Kotlin method. Take a look at this example below. When an exception occurs, the ",(0,i.kt)("a",{parentName:"p",href:"/server/event-handler/advanced/#onexception"},(0,i.kt)("inlineCode",{parentName:"a"},"onException"))," codeblock extracts the company name from the source request and includes it in the error message."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'    eventHandler<Company>(name = "COMPANY_INSERT") {\n        onException { event, throwable ->\n            val company = event.details\n            nack("Error when trying to insert company with id ${company.companyId}! ${throwable.message}")\n        }\n\n        onCommit { event ->\n            val company = event.details\n            val result = entityDb.insert(company)\n            ack(listOf(mapOf("VALUE" to result.record.companyId)))\n        }\n    }\n')),(0,i.kt)("h2",{id:"authorisation"},"Authorisation"),(0,i.kt)("h3",{id:"permissioning"},"Permissioning"),(0,i.kt)("p",null,"This is an example of how to add ",(0,i.kt)("a",{parentName:"p",href:"/server/event-handler/advanced/#permissioning-and-permissioncodes"},"authorisation"),"\nto an Event Handler."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'    eventHandler<Company>(name = "AUTH_COMPANY_INSERT") {\n        permissioning {\n            auth(mapName = "COMPANY"){\n                COMPANY.COMPANY_NAME\n            }\n        }\n\n        onCommit { event ->\n            val company = event.details\n            val result = entityDb.insert(company)\n            ack(listOf(mapOf("VALUE" to result.record.companyId)))\n        }\n    }\n')),(0,i.kt)("h3",{id:"fixed-permissions"},"fixed permissions"),(0,i.kt)("p",null,"And now an example with fixed permissions."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'    eventHandler<Company>(name = "AUTH_COMPANY_INSERT") {\n        permissionCodes = listOf("INSERT_TRADE")\n        onCommit { event ->\n            val company = event.details\n            val result = entityDb.insert(company)\n            ack(listOf(mapOf("VALUE" to result.record.companyId)))\n        }\n    }\n')),(0,i.kt)("h2",{id:"acid-compliance"},"ACID compliance"),(0,i.kt)("p",null,"Below is an example of how to make an Event Handler ",(0,i.kt)("a",{parentName:"p",href:"/getting-started/glossary/glossary/#acid"},"ACID"),"-compliant. The opening line declares that this ",(0,i.kt)("inlineCode",{parentName:"p"},"eventHandler")," codeblock is ",(0,i.kt)("a",{parentName:"p",href:"/server/event-handler/basics/#transactional-event-handlers-acid"},"transactional"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'    eventHandler<Company>(name = "COMPANY_INSERT", transactional = true) {\n        onValidate {\n            ack()\n        }\n        onCommit { event ->\n            val company = event.details\n            entityDb.insert(company)\n            ack(listOf(mapOf("VALUE" to "SUCCESS!")))\n        }\n    }\n')),(0,i.kt)("h2",{id:"approval-requests"},"Approval requests"),(0,i.kt)("p",null,"The example below is a simple ",(0,i.kt)("inlineCode",{parentName:"p"},"eventHandler")," codeblock that ",(0,i.kt)("a",{parentName:"p",href:"/server/event-handler/advanced/#pending-approvals"},"requires approval"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"\neventHandler {\n    eventHandler<Company> {\n        requiresPendingApproval = true\n        onCommit { event ->\n            val company = event.details\n            // custom code block..\n            ack()\n        }\n    }\n}\n")))}v.isMDXComponent=!0}}]);