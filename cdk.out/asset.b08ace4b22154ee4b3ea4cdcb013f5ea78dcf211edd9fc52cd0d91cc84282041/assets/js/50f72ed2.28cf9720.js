"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[66198],{61009:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return o},default:function(){return c},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return p}});var a=n(87462),r=n(63366),s=(n(67294),n(3905)),i=(n(61839),["components"]),l={title:"Testing Java Event Handlers",sidebar_label:"Testing Java Event Handlers",id:"testing-java-event-handlers",keywords:["server","event handler","java event handlers","testing"],tags:["server","event handler","java event handlers","testing"]},o=void 0,d={unversionedId:"server/event-handler/testing-java-event-handlers",id:"version-2022.3/server/event-handler/testing-java-event-handlers",title:"Testing Java Event Handlers",description:"Integration testing",source:"@site/versioned_docs/version-2022.3/03_server/04_event-handler/08_testing-java-event-handlers.md",sourceDirName:"03_server/04_event-handler",slug:"/server/event-handler/testing-java-event-handlers",permalink:"/server/event-handler/testing-java-event-handlers",draft:!1,tags:[{label:"server",permalink:"/tags/server"},{label:"event handler",permalink:"/tags/event-handler"},{label:"java event handlers",permalink:"/tags/java-event-handlers"},{label:"testing",permalink:"/tags/testing"}],version:"2022.3",sidebarPosition:8,frontMatter:{title:"Testing Java Event Handlers",sidebar_label:"Testing Java Event Handlers",id:"testing-java-event-handlers",keywords:["server","event handler","java event handlers","testing"],tags:["server","event handler","java event handlers","testing"]},sidebar:"serverModulesSidebar",previous:{title:"Java Event Handlers",permalink:"/server/event-handler/java-event-handlers"},next:{title:"Introduction",permalink:"/server/access-control/introduction"}},u={},p=[{value:"Integration testing",id:"integration-testing",level:2},{value:"Writing tests",id:"writing-tests",level:2},{value:"Simple test",id:"simple-test",level:3},{value:"Error response test",id:"error-response-test",level:3},{value:"Testing with authorisation",id:"testing-with-authorisation",level:3},{value:"Set-up",id:"set-up",level:3},{value:"Tests",id:"tests",level:3}],v={toc:p};function c(e){var t=e.components,n=(0,r.Z)(e,i);return(0,s.kt)("wrapper",(0,a.Z)({},v,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"integration-testing"},"Integration testing"),(0,s.kt)("p",null,"The Genesis low-code platform provides the ",(0,s.kt)("inlineCode",{parentName:"p"},"AbstractGenesisTestSupport")," abstract class that enables end-to-end testing of specific areas of your application."),(0,s.kt)("p",null,"In this case, build ",(0,s.kt)("inlineCode",{parentName:"p"},"GenesisTestConfig")," with the following information:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Set packages: ",(0,s.kt)("inlineCode",{parentName:"li"},"global.genesis.eventhandler")," this is the standard package name from the framework, which is needed for all Java events/custom events. Make sure you\nname the package where you defined the events. In the example below, it is ",(0,s.kt)("inlineCode",{parentName:"li"},"global.genesis.position.samples.events.rxjava")),(0,s.kt)("li",{parentName:"ul"},"Set genesis home"),(0,s.kt)("li",{parentName:"ul"},"Set initial data: we want to ensure that we have a database, seeded with information")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'public class TradingEventHandlerTest extends AbstractGenesisTestSupport<EventResponse> {\n        public TradingEventHandlerTest() {\n            super(GenesisTestConfig.builder()\n                .setPackageNames(List.of("global.genesis.eventhandler","global.genesis.position.samples.events.rxjava"))\n                .setGenesisHome("/GenesisHome/")\n                .setInitialDataFiles("seed-data.csv")\n                .setParser(EventResponse.Companion)\n                .build()\n        );\n    }\n}\n')),(0,s.kt)("p",null,"For more information about ",(0,s.kt)("inlineCode",{parentName:"p"},"AbstractGenesisTestSupport"),", see the ",(0,s.kt)("a",{parentName:"p",href:"/operations/testing/integration-testing/#abstractgenesistestsupport"},"Testing pages"),"."),(0,s.kt)("p",null,"Once you have set up your configuration, you can start writing tests against your Event Handler."),(0,s.kt)("h2",{id:"writing-tests"},"Writing tests"),(0,s.kt)("p",null,"Let's write some tests for the simple Event Handler defined below:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'        @Module\n        public class EventTrade implements Rx3ValidatingEventHandler<Trade, EventReply> {\n\n            private final RxEntityDb entityDb;\n\n            @Inject\n            public EventTrade(RxEntityDb entityDb) {\n                this.entityDb = entityDb;\n            }\n\n            @Nullable\n            @Override\n            public String messageType() {\n                return "TRADE_INSERT";\n            }\n\n            @NotNull\n            @Override\n            public Single<EventReply> onCommit(@NotNull Event<Trade> tradeEvent) {\n                    Trade trade = tradeEvent.getDetails();\n                    return entityDb.writeTransaction(txn -> {\n                    Trade result = txn.insert(trade).blockingGet().getRecord();\n                    return ack(this, List.of(Map.of("TRADE_ID", result.getTradeId())));\n                }).map(result -> result.getFirst());\n            }\n\n            @NotNull\n            @Override\n            public Single<EventReply> onValidate(@NotNull Event<Trade> event) {\n                Trade trade = event.getDetails();\n                if (entityDb.get(Counterparty.byId(trade.getCounterpartyId())).blockingGet() == null) {\n                    return Single.just(new StandardError("INTERNAL_ERROR", "COUNTERPARTY ById(counterpartyId=" + trade.getCounterpartyId() +") not found in database").toEventNackError());\n                } else if (entityDb.get(Instrument.byId(trade.getInstrumentId())).blockingGet() == null) {\n                    return Single.just(new StandardError("INTERNAL_ERROR", "INSTRUMENT ById(instrumentId=" + trade.getInstrumentId() +") not found in database").toEventNackError());\n                }\n                return ack(this);\n            }\n        }\n')),(0,s.kt)("h3",{id:"simple-test"},"Simple test"),(0,s.kt)("p",null,"Below is an example of a simple test."),(0,s.kt)("p",null,"First, this creates an ",(0,s.kt)("inlineCode",{parentName:"p"},"Event"),' object, setting the event details and specifying the intended Event Handler for the message "EVENT_TRADE_INSERT" and username.'),(0,s.kt)("p",null,"Second, it sends a message to the Event Handler using ",(0,s.kt)("inlineCode",{parentName:"p"},"getMessageClient().request(event, EventReply.class)"),". The result is first verified to be an ",(0,s.kt)("inlineCode",{parentName:"p"},"EventAck"),". "),(0,s.kt)("p",null,"Finally, it checks that the inserted trade can be retrieved from the database.:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'    @Test\n    public void testTradeInsert() throws InterruptedException {\n        Trade trade = Trade.builder()\n            .setTradeId("1")\n            .setCounterpartyId("CP1")\n            .setInstrumentId("I2")\n            .setSide("BUY")\n            .setPrice(1.123)\n            .setQuantity(1000)\n            .build();\n        Event event = new Event(trade, "EVENT_TRADE_INSERT", "JohnDoe");\n        EventReply reply = getMessageClient().request(event, EventReply.class).blockingGet();\n        assertEquals(reply, new EventReply.EventAck(List.of(Map.of("TRADE_ID", trade.getTradeId()))));\n        Trade result = getRxDb().entityDb().get(Trade.byId("1")).blockingGet();\n        assertNotNull(result);\n    }\n')),(0,s.kt)("h3",{id:"error-response-test"},"Error response test"),(0,s.kt)("p",null,"You may also want to test a negative case, where you expect to receive an error as a response."),(0,s.kt)("p",null,"In the example below, we expect the response to be of type ",(0,s.kt)("inlineCode",{parentName:"p"},"EventNack")," when we try to insert a wrong instrument ID. As in the Event Handler above, there is a check to see if the instrument exists in the database."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'    @Test\n    public void testTradeInsertWrongInstrumentId() throws InterruptedException {\n        Trade trade = Trade.builder()\n            .setTradeId("1")\n            .setCounterpartyId("CP1")\n            .setInstrumentId("DOESNOTEXIST")\n            .setSide("BUY")\n            .setPrice(1.213)\n            .setQuantity(100)\n            .build();\n        Event event = new Event(trade, "EVENT_TRADE_INSERT_JAVA", "JohnDoe");\n        EventReply reply = getMessageClient().request(event, EventReply.class).blockingGet();\n        GenesisError genesisError = new StandardError("INTERNAL_ERROR", "INSTRUMENT ById(instrumentId=DOESNOTEXIST) not found in database");\n        assertEquals(reply, new EventReply.EventNack(List.of(), List.of(genesisError)));\n    }\n')),(0,s.kt)("h3",{id:"testing-with-authorisation"},"Testing with authorisation"),(0,s.kt)("h3",{id:"set-up"},"Set-up"),(0,s.kt)("p",null,"To test that the Event Handler authorisation works correctly, you need to do some setting up."),(0,s.kt)("p",null,"First, make sure that your authorisation set-up is designed to behave as follows:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},'A user who enters a trade must have an entry in the "ENTITY_VISIBILITY" auth map; the entity code for this user must match the ',(0,s.kt)("inlineCode",{parentName:"li"},"counterpartyId")," of the trade."),(0,s.kt)("li",{parentName:"ul"},'The user must have an entry in the "RIGHT_SUMMARY" table with "RIGHT_CODE" as "TRADER".')),(0,s.kt)("p",null,"Second, you need to modify the previous example Event Handler so that only authorised users can insert trades."),(0,s.kt)("p",null,"You can find an ",(0,s.kt)("a",{parentName:"p",href:"/database/api-reference/authorisation-api"},"Event example")," in our Authorization API pages written in Kotlin."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'    @Module\n    public class EventTrade implements Rx3EventHandler<Trade, EventReply> {\n\n        private final RxEntityDb entityDb;\n        private final RxDb rxDb;\n        private final RightSummaryCache rightSummaryCache;\n\n        private Authority authCache;\n\n        @Inject\n        public EventTrade(RxEntityDb entityDb, RxDb rxDb, RightSummaryCache rightSummaryCache) {\n            this.entityDb = entityDb;\n            this.rightSummaryCache = rightSummaryCache;\n            this.rxDb = rxDb;\n        }\n\n        @Inject\n        public void init() {\n            this.authCache = AuthCache.newReader("ENTITY_VISIBILITY", rxDb.getUpdateQueue());\n        }\n\n        @Nullable\n        @Override\n        public String messageType() {\n            return "TRADE_INSERT_JAVA";\n        }\n\n        @Override\n        public Single<EventReply> process(Event<Trade> tradeEvent) {\n            String userName = tradeEvent.getUserName();\n\n            if(rightSummaryCache.userHasRight(userName, "TRADER")){\n                Trade trade = tradeEvent.getDetails();\n                return entityDb.writeTransaction(txn -> {\n                    Trade result = txn.insert(trade).blockingGet().getRecord();\n                    return ack(this, List.of(Map.of("TRADE_ID", result.getTradeId())));\n                }).map(result -> result.getFirst());\n            }\n            return Single.just(new StandardError("NOT_AUTHORISED", "User " + userName + " lacks sufficient permissions").toEventNackError());\n        }\n    }\n')),(0,s.kt)("p",null,"Third, you need to specify the auth cache override in the ",(0,s.kt)("inlineCode",{parentName:"p"},"GenesisTestConfig"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'    public class TradingEventHandlerTest extends AbstractGenesisTestSupport<EventResponse> {\n        public TradingEventHandlerTest() {\n            super(GenesisTestConfig.builder()\n                .setPackageNames(List.of("global.genesis.eventhandler","global.genesis.rxjava"))\n                .setGenesisHome("/GenesisHome/")\n                .setInitialDataFiles("TEST_DATA.csv")\n                .setAuthCacheOverride(List.of("ENTITY_VISIBILITY"))\n                .setParser(EventResponse.Companion)\n                .build()\n            );\n        }\n    }\n')),(0,s.kt)("p",null,"Fourth, in your test set-up, let's authorise one user to be able to insert trades and another who is not."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'    @Before\n    public void setUp() {\n        authorise("ENTITY_VISIBILITY", "CP1", "TraderUser");\n        getRxDb().insert(RightSummary.builder().setRightCode("TRADER").setUserName("TraderUser").build().toDbRecord()).blockingGet();\n        getRxDb().insert(RightSummary.builder().setRightCode("SUPPORT").setUserName("SupportUser").build().toDbRecord()).blockingGet();\n    }\n')),(0,s.kt)("p",null,"For more information on authorisation, see the ",(0,s.kt)("a",{parentName:"p",href:"/server/access-control/authorisation-overview"},"authorisation docs"),"."),(0,s.kt)("h3",{id:"tests"},"Tests"),(0,s.kt)("p",null,"After you have set things up. Now you can create the tests themselves."),(0,s.kt)("p",null,"Below is a test that verifies that only Traders can enter trades:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'    @Test\n    public void testTradeInsertedByTrader() {\n        Trade trade = Trade.builder()\n            .setTradeId("1")\n            .setCounterpartyId("CP1")\n            .setInstrumentId("I2")\n            .setSide("BUY")\n            .setPrice(5.0)\n            .setQuantity(1)\n            .build();\n        Event event = new Event(trade, "EVENT_TRADE_INSERT", "TraderUser");\n        EventReply reply = getMessageClient().request(event, EventReply.class).blockingGet();\n        assertEquals(reply, new EventReply.EventAck(List.of(Map.of("TRADE_ID", trade.getTradeId()))));\n\n        Trade insertedUser = getRxDb().entityDb().get(Trade.byId("1")).blockingGet();\n        assertNotNull(insertedUser);\n    }\n')),(0,s.kt)("p",null,"Following that, we have a test to verify that a trade cannot be entered if the user is ",(0,s.kt)("em",{parentName:"p"},"not")," a Trader:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'    @Test\n    public void testTradeCannotBeInsertedIfNotTrader() {\n        Trade trade = Trade.builder()\n            .setTradeId("1")\n            .setCounterpartyId("CP1")\n            .setInstrumentId("I2")\n            .setSide("BUY")\n            .setPrice(5.0)\n            .setQuantity(1)\n            .build();\n        Event event = new Event(trade, "EVENT_TRADE_INSERT_JAVA", "SupportUser");\n        EventReply reply = getMessageClient().request(event, EventReply.class).blockingGet();\n\n        GenesisError genesisError = new StandardError("NOT_AUTHORISED", "User SupportUser lacks sufficient permissions");\n        assertEquals(reply, new EventReply.EventNack(List.of(), List.of(genesisError)));\n    }\n')))}c.isMDXComponent=!0}}]);