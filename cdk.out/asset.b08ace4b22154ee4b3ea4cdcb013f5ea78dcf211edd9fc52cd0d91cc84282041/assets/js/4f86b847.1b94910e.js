"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[98858],{72675:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return o},default:function(){return g},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return d}});var a=n(87462),i=n(63366),l=(n(67294),n(3905)),r=(n(61839),["components"]),s={title:"Gateways and Streamers - FIX-Xlator",sidebar_label:"FIX-Xlator",id:"fix-xlator",keywords:["server","integration","gateways","streamers","fix-xlator"],tags:["server","integration","gateways","streamers","fix-xlator"]},o=void 0,p={unversionedId:"server/integration/gateways-and-streamers/fix-xlator",id:"version-2022.3/server/integration/gateways-and-streamers/fix-xlator",title:"Gateways and Streamers - FIX-Xlator",description:"The FIX Xlator is a plugin for the streamer and streamer client, which enables type-safe handling of FIX messages. It also gives access to a set of vital integration features, such as FIXIN, EXECUTIONREPORT and CUSTOM_FIX.",source:"@site/versioned_docs/version-2022.3/03_server/10_integration/04_gateways-and-streamers/04_fix-xlator.md",sourceDirName:"03_server/10_integration/04_gateways-and-streamers",slug:"/server/integration/gateways-and-streamers/fix-xlator",permalink:"/server/integration/gateways-and-streamers/fix-xlator",draft:!1,tags:[{label:"server",permalink:"/tags/server"},{label:"integration",permalink:"/tags/integration"},{label:"gateways",permalink:"/tags/gateways"},{label:"streamers",permalink:"/tags/streamers"},{label:"fix-xlator",permalink:"/tags/fix-xlator"}],version:"2022.3",sidebarPosition:4,frontMatter:{title:"Gateways and Streamers - FIX-Xlator",sidebar_label:"FIX-Xlator",id:"fix-xlator",keywords:["server","integration","gateways","streamers","fix-xlator"],tags:["server","integration","gateways","streamers","fix-xlator"]},sidebar:"serverModulesSidebar",previous:{title:"Streamer Client",permalink:"/server/integration/gateways-and-streamers/streamer-client"},next:{title:"Customisation",permalink:"/server/integration/gateways-and-streamers/customisation"}},u={},d=[{value:"Enabling the FIX Xlator",id:"enabling-the-fix-xlator",level:3},{value:"Streamer",id:"streamer",level:3},{value:"Types of fixStream",id:"types-of-fixstream",level:4},{value:"Streamer Client",id:"streamer-client",level:3},{value:"Message extension functions",id:"message-extension-functions",level:4},{value:"GenesisSet extension functions",id:"genesisset-extension-functions",level:4},{value:"FIX code generation plugin",id:"fix-code-generation-plugin",level:3}],c={toc:d};function g(e){var t=e.components,n=(0,i.Z)(e,r);return(0,l.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The FIX Xlator is a plugin for the streamer and streamer client, which enables type-safe handling of FIX messages. It also gives access to a set of vital integration features, such as FIX_IN, EXECUTION_REPORT and CUSTOM_FIX."),(0,l.kt)("h3",{id:"enabling-the-fix-xlator"},"Enabling the FIX Xlator"),(0,l.kt)("p",null,"To enable the plugin:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Add an Xlator plugin dependency to the module pom for the streamer or streamer-client.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-xml"},"<dependency> \n    <groupId>global.genesis</groupId>\n    <artifactId>fix-xlator</artifactId>\n    <version>${fix.distribution-version}</version>\n</dependency>\n")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Add a dependency on the class path for the module called {applicationName}-fix-messages. This file is generated using the ",(0,l.kt)("a",{parentName:"p",href:"/server/integration/gateways-and-streamers/fix-xlator#fix-code-generation-plugin"},"fix-codegen-plugin"),".")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Add the following code block at the beginning of the configuration file for the streamer or streamer-client:"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"plugins {\n    plugin(FixXlatorPlugin)\n}\n\nfixConfiguration {\n    version = fix50ref\n}\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"plugins")," tag enables the plugin, and the ",(0,l.kt)("inlineCode",{parentName:"p"},"fixConfiguration")," tag specifies the version to use. The version refers to a class generated by the fix-codegen-plugin as part of step 2, and will match the version name specified in the plugin configuration in the pom.xml file."),(0,l.kt)("h3",{id:"streamer"},"Streamer"),(0,l.kt)("p",null,"Enabling the plugin in a streamer definition enables the ",(0,l.kt)("inlineCode",{parentName:"p"},"fixStream")," definition."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"FIX Streams"),":\nFIX Streams are enhanced stream definitions that come with a few useful defaults, enhanced fixed handling and automatic conversion to GenesisSet."),(0,l.kt)("h4",{id:"types-of-fixstream"},"Types of fixStream"),(0,l.kt)("p",null,"There are three separate types of fixStream configuration:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'fixStream("FIX_IN") \n\nfixStream<ExecutionReport>("EXECUTION_REPORT")\n\nfixStream("CUSTOM", CUSTOM_FIX.FIX_INDEX, CUSTOM_FIX.DATA, ExecutionReport::class)\n')),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Source Table"),(0,l.kt)("th",{parentName:"tr",align:null},"Stream Index"),(0,l.kt)("th",{parentName:"tr",align:null},"Fix Column"),(0,l.kt)("th",{parentName:"tr",align:null},"Stream Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"FIX_IN"),(0,l.kt)("td",{parentName:"tr",align:null},"FIX_IN"),(0,l.kt)("td",{parentName:"tr",align:null},"BY_RX_SEQUENCE"),(0,l.kt)("td",{parentName:"tr",align:null},"FIX_DATA"),(0,l.kt)("td",{parentName:"tr",align:null},"Message")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"EXECUTION_REPORT"),(0,l.kt)("td",{parentName:"tr",align:null},"FIX_IN"),(0,l.kt)("td",{parentName:"tr",align:null},"BY_RX_SEQUENCE"),(0,l.kt)("td",{parentName:"tr",align:null},"FIX_DATA"),(0,l.kt)("td",{parentName:"tr",align:null},"ExecutionReport")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"CUSTOM"),(0,l.kt)("td",{parentName:"tr",align:null},"CUSTOM_FIX"),(0,l.kt)("td",{parentName:"tr",align:null},"FIX_INDEX"),(0,l.kt)("td",{parentName:"tr",align:null},"DATA"),(0,l.kt)("td",{parentName:"tr",align:null},"ExecutionReport")))),(0,l.kt)("p",null,"When using the FIX_IN table, the appropriate index and column are selected automatically."),(0,l.kt)("p",null,'When specifying a message type, this will become a filter on type, so the "EXECUTION_REPORT" stream will only stream execution reports. The fields can now be accessed in a type-safe manner:'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'fixStream<ExecutionReport>("EXECUTION_REPORT_VODL") {\n    where { report ->\n        report.lastMkt() == "VODL"\n    }\n}\n')),(0,l.kt)("h3",{id:"streamer-client"},"Streamer Client"),(0,l.kt)("p",null,"The FIX-Xlator plugin enables a number of extension functions for the streamer client. These are explained below."),(0,l.kt)("h4",{id:"message-extension-functions"},"Message extension functions"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"toGenesisSet")),(0,l.kt)("p",null,"This converts a fix message to a GenesisSet. Optional parameters, list of fields:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"val set = message.toGenesisSet()\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"set")),(0,l.kt)("p",null,"This is an operator function that allows you to set message fields straight from a GenesisSet or a value."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"executionReport.set(executionReport.yield, set)\n// or\nexecutionReport[executionReport.yield] = set\n// or\nexecutionReport[executionReport.yield] = 1.2\n")),(0,l.kt)("p",null,"Please note that this function will only accept joda DateTime values for any of the quickfix date types. The value will be converted appropriately internally."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"get")),(0,l.kt)("p",null,"This function will get any field from a quick fix message:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"val yield = executionReport[executionReport.yield]\n")),(0,l.kt)("p",null,"The return values are always nullable. Any quick fix date type will automatically be converted to a joda DateTime value before being returned."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"encodeInGenesisSet")),(0,l.kt)("p",null,"Creates genesis set with FIX_VERSION, MESSAGE_TYPE and FIX_STRING keys, based on calling FIX message"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"message.encodeInGenesisSet()\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"createFieldWithDefault")),(0,l.kt)("p",null,"Creates a field with default value for provided FIX message tag."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"message.createFieldWithDefault(fixMessageTag)\n")),(0,l.kt)("h4",{id:"genesisset-extension-functions"},"GenesisSet extension functions"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"set")),(0,l.kt)("p",null,"This function sets the field value in the GenesisSet. Optionally, you can specify the field name. Otherwise, the field name will be automatically converted"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'genesisSet.set(executionReport.yield)\n\ngenesisSet.set("REPORTED_YIELD", executionReport.yield)\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"setWithDefault")),(0,l.kt)("p",null,"This function is similar to ",(0,l.kt)("inlineCode",{parentName:"p"},"set"),", but enables you to specify a default value, default value can be constant or value of another field"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'// set yield with value 1.0\ngenesisSet.setWithDefault(executionReport.yield, 1.0)\n\n// Set key: REPORTED_YIELD with executionReport.yield or 1.0 if executionReport.yield is null\ngenesisSet.setWithDefault("REPORTED_YIELD", executionReport.yield, 1.0)\n\n// Set key: REPORTED_YIELD with executionReport.yield or executionReport.otherYield if executionReport.yield is null\ngenesisSet.setWithDefault("REPORTED_YIELD", executionReport.yield, executionReport.otherYield)\n')),(0,l.kt)("h3",{id:"fix-code-generation-plugin"},"FIX code generation plugin"),(0,l.kt)("p",null,"Fix code generation plugin is used to generate Java sources from a QuickFIX XML dictionary."),(0,l.kt)("p",null,"Create a new maven module called {applicationName}-fix-messages. Add the following plugin dependency to the module pom file."),(0,l.kt)("p",null,"If you need to create multiple modules, the name of each module must be:"),(0,l.kt)("p",null,"{applicationName}-fix-{type}-messages."),(0,l.kt)("p",null,"For example:"),(0,l.kt)("p",null,"test-fix-abc-messages\ntest-fix-xyz-messages"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-xml"},"<plugins>\n    <plugin>\n        <groupId>org.quickfixj</groupId>\n        <artifactId>quickfixj-codegenerator</artifactId>\n        <version>${quickfix.version}</version>\n\n        <executions>\n            <execution>\n                <phase>generate-sources</phase>\n                <goals>\n                    <goal>generate</goal>\n                </goals>\n                <configuration>\n                    <dictFile>${project.basedir}/src/main/resources/specs/${dictionary-file}</dictFile>\n                    <decimal>true</decimal>\n                    <orderedFields>true</orderedFields>\n                    <packaging>global.genesis.quickfix.${fix.protocol.version}</packaging>\n                    <fieldPackage>global.genesis.quickfix.${fix.protocol.version}.field</fieldPackage>\n                </configuration>\n            </execution>\n        </executions>\n    </plugin>\n    <plugin>\n        <groupId>${project.parent.groupId}</groupId>\n        <artifactId>fix-codegen-plugin</artifactId>\n        <version>${fix.distribution.version}</version>\n\n        <executions>\n            <execution>\n                <phase>generate-sources</phase>\n                <goals>\n                    <goal>generateFix</goal>\n                </goals>\n                <configuration>\n                    <dictionaryFile>${project.basedir}/src/main/resources/specs/${dictionary-file}</dictionaryFile>\n                    <fixVersion>${fix-version}</fixVersion>\n                    <packageName>global.genesis.quickfix.${fix.protocol.version}</packageName>\n                </configuration>\n            </execution>\n        </executions>\n    </plugin>\n</plugins>\n")),(0,l.kt)("p",null,"In addition, make sure to add a depdendency on the fix-xlator plugin in this new module:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-xml"},"<dependencies>\n    <dependency>\n        <groupId>global.genesis</groupId>\n        <artifactId>fix-xlator</artifactId>\n        <version>${fix.distribution.version}</version>\n    </dependency>\n</dependencies>\n")))}g.isMDXComponent=!0}}]);