"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[21895],{80268:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return g},frontMatter:function(){return o},metadata:function(){return r},toc:function(){return u}});var n=a(87462),i=a(63366),d=(a(67294),a(3905)),l=(a(61839),["components"]),o={title:"Go to the next level - Calculated data using derived fields",sidebar_label:"Calculated data using derived fields",id:"calculated-data",keywords:["getting started","quick start","next level","calculated data","derived fields"],tags:["getting started","quick start","next level","calculated data","derived fields"]},s=void 0,r={unversionedId:"getting-started/go-to-the-next-level/calculated-data",id:"version-2022.3/getting-started/go-to-the-next-level/calculated-data",title:"Go to the next level - Calculated data using derived fields",description:"Section objectives",source:"@site/versioned_docs/version-2022.3/01_getting-started/03_go-to-the-next-level/07_calculated-data.md",sourceDirName:"01_getting-started/03_go-to-the-next-level",slug:"/getting-started/go-to-the-next-level/calculated-data",permalink:"/getting-started/go-to-the-next-level/calculated-data",draft:!1,tags:[{label:"getting started",permalink:"/tags/getting-started"},{label:"quick start",permalink:"/tags/quick-start"},{label:"next level",permalink:"/tags/next-level"},{label:"calculated data",permalink:"/tags/calculated-data"},{label:"derived fields",permalink:"/tags/derived-fields"}],version:"2022.3",sidebarPosition:7,frontMatter:{title:"Go to the next level - Calculated data using derived fields",sidebar_label:"Calculated data using derived fields",id:"calculated-data",keywords:["getting started","quick start","next level","calculated data","derived fields"],tags:["getting started","quick start","next level","calculated data","derived fields"]},sidebar:"learningSidebar",previous:{title:"Create a form to input data",permalink:"/getting-started/go-to-the-next-level/forms"},next:{title:"Consolidators",permalink:"/getting-started/go-to-the-next-level/consolidators"}},c={},u=[{value:"Section objectives",id:"section-objectives",level:2},{value:"Adding a derived field",id:"adding-a-derived-field",level:2},{value:"Conclusion",id:"conclusion",level:2}],v={toc:u};function g(e){var t=e.components,a=(0,i.Z)(e,l);return(0,d.kt)("wrapper",(0,n.Z)({},v,a,{components:t,mdxType:"MDXLayout"}),(0,d.kt)("h2",{id:"section-objectives"},"Section objectives"),(0,d.kt)("p",null,"The goal of this section is to add a derived field to our existing ",(0,d.kt)("inlineCode",{parentName:"p"},"TRADE_VIEW"),"."),(0,d.kt)("h2",{id:"adding-a-derived-field"},"Adding a derived field"),(0,d.kt)("p",null,"In certain cases, you might want to display pieces of information that can be derived from the data in hand. To achieve that, you can use ",(0,d.kt)("a",{parentName:"p",href:"/database/fields-tables-views/views/views-advanced/#derived-fields"},"derived fields"),". They are a useful way of providing calculated data and can be added to views. Note that you can only use fields that are in the view to create a derived field."),(0,d.kt)("p",null,"Let's add a derived field named ",(0,d.kt)("inlineCode",{parentName:"p"},"CONSIDERATION")," that uses the ",(0,d.kt)("inlineCode",{parentName:"p"},"QUANTITY")," and the ",(0,d.kt)("inlineCode",{parentName:"p"},"PRICE")," from the ",(0,d.kt)("inlineCode",{parentName:"p"},"TRADE")," table and returns their product:"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-kotlin"},'derivedField("CONSIDERATION", DOUBLE) {\n    withInput(TRADE.QUANTITY, TRADE.PRICE) { QUANTITY, PRICE ->\n        QUANTITY * PRICE\n    }\n}\n')),(0,d.kt)("p",null,"Add this ",(0,d.kt)("inlineCode",{parentName:"p"},"derivedField")," to your view now. The final view should be like this:"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-kotlin"},'views {\n\n    view("TRADE_VIEW", TRADE) {\n\n        joins {\n            joining(COUNTERPARTY) {\n                on(TRADE.COUNTERPARTY_ID to COUNTERPARTY { COUNTERPARTY_ID })\n            }\n            joining(INSTRUMENT) {\n                on(TRADE.INSTRUMENT_ID to INSTRUMENT { INSTRUMENT_ID })\n            }\n        }\n\n        fields {\n            TRADE.allFields()\n\n            COUNTERPARTY.COUNTERPARTY_NAME withPrefix COUNTERPARTY\n            INSTRUMENT.INSTRUMENT_SYMBOL withPrefix INSTRUMENT\n            INSTRUMENT.CURRENCY_ID withAlias "CURRENCY"\n\n            derivedField("CONSIDERATION", DOUBLE) {\n                withInput(TRADE.QUANTITY, TRADE.PRICE) { QUANTITY, PRICE ->\n                    QUANTITY * PRICE\n                }\n            }\n        }\n    }\n}\n')),(0,d.kt)("h2",{id:"conclusion"},"Conclusion"),(0,d.kt)("p",null,"We just added a derived field. To see it in action, follow the steps on the next page that will show you how to glue the consolidator and view together."))}g.isMDXComponent=!0}}]);