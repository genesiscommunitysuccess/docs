"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[87411],{74460:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return u}});var a=t(87462),r=t(63366),i=(t(67294),t(3905)),l=(t(61839),["components"]),o={title:"Java Event Handlers",sidebar_label:"Java Event Handlers",id:"java-event-handlers",keywords:["server","event handler","java event handlers"],tags:["server","event handler","java event handlers"]},s=void 0,p={unversionedId:"server/event-handler/java-event-handlers",id:"server/event-handler/java-event-handlers",title:"Java Event Handlers",description:"Event Handlers can be written in Java using Event Handler APIs. On this page, we look at Event Handlers written using the Rx3 Event handlers",source:"@site/docs/03_server/04_event-handler/07_java-event-handlers.md",sourceDirName:"03_server/04_event-handler",slug:"/server/event-handler/java-event-handlers",permalink:"/next/server/event-handler/java-event-handlers",draft:!1,tags:[{label:"server",permalink:"/next/tags/server"},{label:"event handler",permalink:"/next/tags/event-handler"},{label:"java event handlers",permalink:"/next/tags/java-event-handlers"}],version:"current",sidebarPosition:7,frontMatter:{title:"Java Event Handlers",sidebar_label:"Java Event Handlers",id:"java-event-handlers",keywords:["server","event handler","java event handlers"],tags:["server","event handler","java event handlers"]},sidebar:"serverModulesSidebar",previous:{title:"Testing",permalink:"/next/server/event-handler/testing"},next:{title:"Testing Java Event Handlers",permalink:"/next/server/event-handler/testing-java-event-handlers"}},d={},u=[{value:"A simple example of an Event Handler",id:"a-simple-example-of-an-event-handler",level:2},{value:"Adding a name",id:"adding-a-name",level:2},{value:"Adding validation",id:"adding-validation",level:2},{value:"Returning a nack",id:"returning-a-nack",level:3},{value:"Default reply types",id:"default-reply-types",level:3},{value:"Transactional Event Handlers (ACID)",id:"transactional-event-handlers-acid",level:2},{value:"Context Event Handlers",id:"context-event-handlers",level:3}],v={toc:u};function m(e){var n=e.components,t=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},v,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Event Handlers can be written in Java using Event Handler ",(0,i.kt)("a",{parentName:"p",href:"/database/api-reference/event-handler-api"},"APIs"),". On this page, we look at Event Handlers written using the ",(0,i.kt)("a",{parentName:"p",href:"/database/api-reference/event-handler-api/#rx3eventhandler"},"Rx3 Event handlers")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"We recommend using ",(0,i.kt)("strong",{parentName:"p"},"Kotlin")," to implement Event Handlers."),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Java")," Event Handlers can only be implemented using ",(0,i.kt)("a",{parentName:"li",href:"#rx3"},(0,i.kt)("strong",{parentName:"a"},"RxJava3"))," ",(0,i.kt)("a",{parentName:"li",href:"#sync"},(0,i.kt)("strong",{parentName:"a"},"Sync"))," Event Handlers."),(0,i.kt)("li",{parentName:"ul"},"Async Event Handlers are widely used in Kotlin events and cannot be used for Java events, as there is no implementation for Kotlin coroutines in Java."))),(0,i.kt)("h2",{id:"a-simple-example-of-an-event-handler"},"A simple example of an Event Handler"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"This method passes the input message type ",(0,i.kt)("inlineCode",{parentName:"li"},"CounterParty")," as a parameter and expects the output message type ",(0,i.kt)("inlineCode",{parentName:"li"},"EventReply")," to be returned."),(0,i.kt)("li",{parentName:"ul"},"The default name will be ",(0,i.kt)("inlineCode",{parentName:"li"},"EVENT_<input message type name>"),". So, for an input message type declared as ",(0,i.kt)("inlineCode",{parentName:"li"},"CounterParty"),", the event with the name ",(0,i.kt)("inlineCode",{parentName:"li"},"EVENT_COUNTERPARTY")," is automatically registered.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"        @Module\n        public class EventCounterParty implements Rx3EventHandler<Counterparty, EventReply> {\n\n            private final RxEntityDb entityDb;\n\n            @Inject\n            public EventCounterParty(RxEntityDb entityDb) {\n                this.entityDb = entityDb;\n            }\n\n            @Override\n            public Single<EventReply> process(Event<Counterparty> counterpartyEvent) {\n                Counterparty counterparty = counterpartyEvent.getDetails();\n                return entityDb.insert(counterparty).flatMap(result -> ack(this));\n            }\n        }\n")),(0,i.kt)("h2",{id:"adding-a-name"},"Adding a name"),(0,i.kt)("p",null,"Every ",(0,i.kt)("inlineCode",{parentName:"p"},"eventHandler")," must have a unique name. If you do not provide one, it will be allocated a default name automatically, as shown in the previous example."),(0,i.kt)("p",null,"It is good practice to provide your own name for each ",(0,i.kt)("inlineCode",{parentName:"p"},"eventHandler"),". For example, if you have insert and modify codeblocks for the same table and you don't name them, then the platform will probably generate identical names for both - which will give you a problem.\nNote that the prefix ",(0,i.kt)("inlineCode",{parentName:"p"},"EVENT_")," is automatically added to the name that you specify."),(0,i.kt)("p",null,"So, below, we modify our previous example by defining the name of the ",(0,i.kt)("inlineCode",{parentName:"p"},"eventHandler"),": COUNTERPARTY_INSERT by overriding messageType method of the Rx3EventHandler. This will automatically become EVENT_COUNTERPARTY_INSERT."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'\n    @Module\n    public class EventCounterParty implements Rx3EventHandler<Counterparty, EventReply> {\n\n        private final RxEntityDb entityDb;\n\n        @Inject\n        public EventCounterParty(RxEntityDb entityDb) {\n            this.entityDb = entityDb;\n        }\n\n        @Nullable\n        @Override\n        public String messageType() {\n            return "COUNTERPARTY_INSERT";\n        }\n\n        @Override\n        public Single<EventReply> process(Event<Counterparty> counterpartyEvent) {\n            Counterparty counterparty = counterpartyEvent.getDetails();\n            return entityDb.insert(counterparty).flatMap(result -> ack(this));\n        }\n}\n')),(0,i.kt)("h2",{id:"adding-validation"},"Adding validation"),(0,i.kt)("p",null,"So far, we have overridden the process method in our ",(0,i.kt)("inlineCode",{parentName:"p"},"eventHandler"),". This is where the active instructions are - usually database changes."),(0,i.kt)("p",null,"If you want to provide some validation before the action, you need to implement the ",(0,i.kt)("inlineCode",{parentName:"p"},"Rx3ValidatingEventHandler")," interface and override ",(0,i.kt)("inlineCode",{parentName:"p"},"onCommit")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"onValidate")," methods."),(0,i.kt)("p",null,"in the example below, the ",(0,i.kt)("inlineCode",{parentName:"p"},"onValidate")," method will be executed first and the ",(0,i.kt)("inlineCode",{parentName:"p"},"onCommit")," method will only be executed if the ",(0,i.kt)("inlineCode",{parentName:"p"},"counterparty")," field is not null."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'\n    @Module\n    public class EventCounterParty implements Rx3ValidatingEventHandler<Counterparty, EventReply> {\n\n        private final RxEntityDb entityDb;\n\n        @Inject\n        public EventCounterParty(RxEntityDb entityDb) {\n            this.entityDb = entityDb;\n        }\n\n        @Nullable\n        @Override\n        public String messageType() {\n            return "COUNTERPARTY_INSERT";\n        }\n\n        @NotNull\n        @Override\n        public Single<EventReply> onCommit(@NotNull Event<Counterparty> event) {\n            Counterparty counterparty = event.getDetails();\n            return entityDb.insert(counterparty) .flatMap(result -> ack(this));\n        }\n\n        @NotNull\n        @Override\n        public Single<EventReply> onValidate(@NotNull Event<Counterparty> event) {\n            Counterparty counterparty = event.getDetails();\n            if(counterparty.getName().isEmpty()) {\n                return nack(this, "Counterparty should have a name");\n            }\n            return ack(this);\n        }\n}\n')),(0,i.kt)("h3",{id:"returning-a-nack"},"Returning a nack"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"onValidate")," method must always return either an ",(0,i.kt)("inlineCode",{parentName:"p"},"ack()")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"nack(...)"),"."),(0,i.kt)("p",null,"Look at the ",(0,i.kt)("inlineCode",{parentName:"p"},"onValidate")," method in the previous example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"if the counterparty field is empty, the ",(0,i.kt)("inlineCode",{parentName:"li"},"eventHandler")," returns a ",(0,i.kt)("inlineCode",{parentName:"li"},"nack"),", along with a suitable message."),(0,i.kt)("li",{parentName:"ul"},"if the counterparty field has content, then the ",(0,i.kt)("inlineCode",{parentName:"li"},"eventHandler")," returns an ",(0,i.kt)("inlineCode",{parentName:"li"},"ack"))),(0,i.kt)("h3",{id:"default-reply-types"},"Default reply types"),(0,i.kt)("p",null,"So far, we have seen ",(0,i.kt)("inlineCode",{parentName:"p"},"ack")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"nack.  There is a third reply type: "),"warningNack`. Let's stop and look at the specifications for all three default reply types:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ack"),": used to signify a successful result. ",(0,i.kt)("inlineCode",{parentName:"li"},"ack")," takes an optional parameter of ",(0,i.kt)("inlineCode",{parentName:"li"},"List<Map<String, Any>>"),". For example, ",(0,i.kt)("inlineCode",{parentName:"li"},'ack(listOf(mapOf("TRADE_ID", "1")))'),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nack"),": used to signify an unsuccessful result. ",(0,i.kt)("inlineCode",{parentName:"li"},"nack")," accepts either a ",(0,i.kt)("inlineCode",{parentName:"li"},"String")," parameter or a ",(0,i.kt)("inlineCode",{parentName:"li"},"Throwable"),". For example, ",(0,i.kt)("inlineCode",{parentName:"li"},'nack("Error!")')," or ",(0,i.kt)("inlineCode",{parentName:"li"},"nack(myThrowable)"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"warningNack"),": used to warn the client. ",(0,i.kt)("inlineCode",{parentName:"li"},"warningNack"),", like ",(0,i.kt)("inlineCode",{parentName:"li"},"nack"),", accepts either a ",(0,i.kt)("inlineCode",{parentName:"li"},"String")," parameter or a ",(0,i.kt)("inlineCode",{parentName:"li"},"Throwable"),". For example, ",(0,i.kt)("inlineCode",{parentName:"li"},'warningNack("Provided User alias $userAlias will override Username $username.")')," or ",(0,i.kt)("inlineCode",{parentName:"li"},"warningNack(myThrowable)"),".")),(0,i.kt)("h2",{id:"transactional-event-handlers-acid"},"Transactional Event Handlers (ACID)"),(0,i.kt)("p",null,"If you want your  ",(0,i.kt)("inlineCode",{parentName:"p"},"eventHandler")," to comply with ACID, you need to use the RxEntityDb ",(0,i.kt)("a",{parentName:"p",href:"/database/database-interface/entity-db/#write-transactions"},"writeTransaction"),". Any exception or nack returned will result in a complete rollback of all parts of the ",(0,i.kt)("inlineCode",{parentName:"p"},"onCommit")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"onValidate")," (the transaction also covers read commands) methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'\n    @Module\n    public class EventCounterParty implements Rx3EventHandler<Counterparty, EventReply> {\n\n        private final RxEntityDb entityDb;@Inject\n\n        public EventCounterParty(RxEntityDb entityDb) {\n            this.entityDb = entityDb;\n        }\n\n        @Nullable\n        @Override\n        public String messageType() {\n            return "COUNTERPARTY_INSERT";\n        }\n\n        @Override\n        public Single<EventReply> process(Event<Counterparty> counterpartyEvent) {\n            Counterparty counterparty = counterpartyEvent.getDetails();\n            return entityDb.writeTransaction(txn -> {\n                txn.insert(counterparty);\n                return ack(this);\n            }).map(result -> result.getFirst());\n        }\n    }\n')),(0,i.kt)("h3",{id:"context-event-handlers"},"Context Event Handlers"),(0,i.kt)("p",null,"In order to optimise database look-up operations, you might want to use data obtained by the ",(0,i.kt)("inlineCode",{parentName:"p"},"onValidate")," method inside your ",(0,i.kt)("inlineCode",{parentName:"p"},"onCommit")," method. To do this,\nimplement the Rx3ContextValidatingEventHandler interface, as shown below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'\n    @Module\n    public class ContextEvent implements Rx3ContextValidatingEventHandler<Company, EventReply, String> {\n        private final RxEntityDb entityDb;\n\n        @Inject\n        public ContextEvent(RxEntityDb entityDb) {\n            this.entityDb = entityDb;\n        }\n\n        @Nullable\n        @Override\n        public String messageType() {\n            return "CONTEXT_COMPANY_INSERT";\n        }\n\n        @NotNull\n        @Override\n        public Single<EventReply> onCommit(@NotNull Event<Company> event, @Nullable String context) {\n            String parsedContext;\n            parsedContext = Objects.requireNonNullElse(context, "Missing context");\n            Company company = event.getDetails();\n            return entityDb.insert(company).flatMap(result -> ack(this, List.of(Map.of("VALUE",parsedContext))));\n        }\n\n        @NotNull\n        @Override\n        public Single<ValidationResult<EventReply, String>> onValidate(@NotNull Event<Company> event) {\n            Company company = event.getDetails();\n            if(company.getCompanyName().equals("MY_COMPANY")) {\n                return ack(this).map(result -> validationResult(result, "Best company in the world"));\n            } else {\n                return ack(this).map(this::validationResult);\n            }\n        }\n    }\n')))}m.isMDXComponent=!0}}]);