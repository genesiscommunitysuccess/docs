"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[37925],{38560:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return r},metadata:function(){return p},toc:function(){return d}});var a=n(87462),o=n(63366),i=(n(67294),n(3905)),l=(n(61839),["components"]),r={title:"Go to the next level - Setting Genesis Evaluator rules",sidebar_label:"Setting Genesis Evaluator rules",id:"setting-genesis-evaluator-rules",keywords:["getting started","quick start","next level","evaluator","rules"],tags:["getting started","quick start","next level","evaluator","rules"]},s=void 0,p={unversionedId:"getting-started/go-to-the-next-level/setting-genesis-evaluator-rules",id:"getting-started/go-to-the-next-level/setting-genesis-evaluator-rules",title:"Go to the next level - Setting Genesis Evaluator rules",description:"It is often useful to run tasks periodically - for example, to schedule the production of EOD reports, or to send a warning when a defined limit is reached. For such purposes, the Genesis low-code platform provides a feature called the Evaluator. In system terms, Evaluators enable you to connect Event Handlers to two different kinds of event",source:"@site/docs/01_getting-started/03_go-to-the-next-level/11_setting_genesis_rules.md",sourceDirName:"01_getting-started/03_go-to-the-next-level",slug:"/getting-started/go-to-the-next-level/setting-genesis-evaluator-rules",permalink:"/next/getting-started/go-to-the-next-level/setting-genesis-evaluator-rules",draft:!1,tags:[{label:"getting started",permalink:"/next/tags/getting-started"},{label:"quick start",permalink:"/next/tags/quick-start"},{label:"next level",permalink:"/next/tags/next-level"},{label:"evaluator",permalink:"/next/tags/evaluator"},{label:"rules",permalink:"/next/tags/rules"}],version:"current",sidebarPosition:11,frontMatter:{title:"Go to the next level - Setting Genesis Evaluator rules",sidebar_label:"Setting Genesis Evaluator rules",id:"setting-genesis-evaluator-rules",keywords:["getting started","quick start","next level","evaluator","rules"],tags:["getting started","quick start","next level","evaluator","rules"]},sidebar:"learningSidebar",previous:{title:"Using Auditable Tables",permalink:"/next/getting-started/go-to-the-next-level/audit"},next:{title:"Ingest external data",permalink:"/next/getting-started/go-to-the-next-level/data-pipeline"}},u={},d=[{value:"Section objectives",id:"section-objectives",level:2},{value:"Configure the Evaluator",id:"configure-the-evaluator",level:2},{value:"Define the business logic",id:"define-the-business-logic",level:2},{value:"Create a data class",id:"create-a-data-class",level:3},{value:"Create the eventHandler",id:"create-the-eventhandler",level:3},{value:"Setting up the dynamic rules",id:"setting-up-the-dynamic-rules",level:2},{value:"Defining the rule",id:"defining-the-rule",level:3},{value:"Loading the rule into the database",id:"loading-the-rule-into-the-database",level:3},{value:"Configure Notify",id:"configure-notify",level:2},{value:"Add connection details",id:"add-connection-details",level:3},{value:"Enable Notify",id:"enable-notify",level:3},{value:"Set up GENESIS_NOTIFY in the database",id:"set-up-genesis_notify-in-the-database",level:2},{value:"Insert a gateway route",id:"insert-a-gateway-route",level:3},{value:"Insert NOTIFY_ROUTE",id:"insert-notify_route",level:3},{value:"Build and deploy the application",id:"build-and-deploy-the-application",level:2},{value:"Switch on data dumps",id:"switch-on-data-dumps",level:2},{value:"Trigger the event to test the rule",id:"trigger-the-event-to-test-the-rule",level:2},{value:"Static rules (Cron rules)",id:"static-rules-cron-rules",level:2},{value:"Cron rules (static events)",id:"cron-rules-static-events",level:3},{value:"The rule",id:"the-rule",level:3},{value:"Configure the Evaluator",id:"configure-the-evaluator-1",level:3},{value:"Create a new class",id:"create-a-new-class",level:3},{value:"Create an eventHandler",id:"create-an-eventhandler",level:3},{value:"Load the cron rule on to the database",id:"load-the-cron-rule-on-to-the-database",level:3},{value:"Change the log level",id:"change-the-log-level",level:3},{value:"Conclusion",id:"conclusion",level:3}],c={toc:d};function m(e){var t=e.components,n=(0,o.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"It is often useful to run tasks periodically - for example, to schedule the production of EOD reports, or to send a warning when a defined limit is reached. For such purposes, the Genesis low-code platform provides a feature called the ",(0,i.kt)("a",{parentName:"p",href:"/server/evaluator/introduction/"},"Evaluator"),". In system terms, Evaluators enable you to connect ",(0,i.kt)("a",{parentName:"p",href:"/server/event-handler/introduction/"},"Event Handlers")," to two different kinds of event: dynamic and static (cron rules): "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/getting-started/go-to-the-next-level/setting-genesis-evaluator-rules/#setting-up-the-dynamic-rules"},"Dynamic Rules"),", also known as dynamic events, are defined as ",(0,i.kt)("a",{parentName:"li",href:"https://groovy-lang.org/syntax.html"},"groovy expressions"),", which respond to changes to database table entries."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/getting-started/go-to-the-next-level/setting-genesis-evaluator-rules/#static-rules-cron-rules"},"Static Rules")," are scheduling rules; these are static events, defined as ",(0,i.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Cron#CRON_expression"},"standard cron expressions"),".")),(0,i.kt)("p",null,"In both cases, you define the rules in a table in the database: ",(0,i.kt)("inlineCode",{parentName:"p"},"DYNAMIC_RULES")," for dynamic rules and ",(0,i.kt)("inlineCode",{parentName:"p"},"CRON_RULES")," for static rules. We're going start with dynamic rules."),(0,i.kt)("h2",{id:"section-objectives"},"Section objectives"),(0,i.kt)("p",null,"The goal of this section is to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"configure and define our Evaluator"),(0,i.kt)("li",{parentName:"ul"},"create ",(0,i.kt)("inlineCode",{parentName:"li"},"eventHandler")," codeblocks for both static and dynamic events"),(0,i.kt)("li",{parentName:"ul"},"load our static and dynamic events to their given tables"),(0,i.kt)("li",{parentName:"ul"},"update our system definitions"),(0,i.kt)("li",{parentName:"ul"},"configure and define our Notify process")),(0,i.kt)("h2",{id:"configure-the-evaluator"},"Configure the Evaluator"),(0,i.kt)("p",null,"An Evaluator is a process that runs cron jobs (static) and conditional (dynamic) rules.\nTo start, create a process called ",(0,i.kt)("inlineCode",{parentName:"p"},"POSITIONS_APP_TUTORIAL_EVALUATOR")," and add it to your ",(0,i.kt)("strong",{parentName:"p"},"positions-app-tutorial-processes.xml")," file inside your project folder ",(0,i.kt)("strong",{parentName:"p"},"server/jvm/positions-app-tutorial-config/src/main/resources/cfg"),". Here is the code you need to add:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="positions-app-tutorial-processes.xml"',title:'"positions-app-tutorial-processes.xml"'},'<process name="POSITIONS_APP_TUTORIAL_EVALUATOR">\n    <start>true</start>\n    <groupId>POSITIONS_APP_TUTORIAL</groupId>\n    <options>-Xmx512m -DXSD_VALIDATE=false</options>\n    <module>genesis-evaluator</module>\n    <primaryOnly>true</primaryOnly>\n    <package>global.genesis.eventhandler,global.genesis.evaluator</package>\n    <description>Dynamic/time rules engine</description>\n</process>\n')),(0,i.kt)("p",null,"Add the ",(0,i.kt)("inlineCode",{parentName:"p"},"POSITIONS_APP_TUTORIAL_EVALUATOR")," to your ",(0,i.kt)("strong",{parentName:"p"},"positions-app-tutorial-service-definitions.xml")," inside your project folder ",(0,i.kt)("strong",{parentName:"p"},"server/jvm/positions-app-tutorial-config/src/main/resources/cfg")," with the code below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="positions-app-tutorial-service-definitions.xml"',title:'"positions-app-tutorial-service-definitions.xml"'},'<service host="localhost" name="POSITIONS_APP_TUTORIAL_EVALUATOR" port="11004"/>\n')),(0,i.kt)("p",null,"We have just defined our Evaluator. Next we're going to add our business logic."),(0,i.kt)("h2",{id:"define-the-business-logic"},"Define the business logic"),(0,i.kt)("h3",{id:"create-a-data-class"},"Create a data class"),(0,i.kt)("p",null,"Now we need to create a ",(0,i.kt)("inlineCode",{parentName:"p"},"PositionCancel")," class. This class should be created under ",(0,i.kt)("strong",{parentName:"p"},"server/jvm/positions-app-tutorial-messages/src/main/kotlin/global/genesis/message/event"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"data class PositionCancel(val positionId: String)\n")),(0,i.kt)("h3",{id:"create-the-eventhandler"},"Create the eventHandler"),(0,i.kt)("p",null,"Next we need to create an ",(0,i.kt)("inlineCode",{parentName:"p"},"eventHandler")," codeblock that will trigger Notify to send an email. Navigate to ",(0,i.kt)("strong",{parentName:"p"},"positions-app-tutorial-script-config")," and insert the following ",(0,i.kt)("inlineCode",{parentName:"p"},"eventHandler")," codeblock:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="positions-app-tutorial-eventhandler.kts"',title:'"positions-app-tutorial-eventhandler.kts"'},'eventHandler<PositionCancel>(name = "POSITION_CANCEL", transactional = true) {\n    onCommit { event ->\n        val positionId = event.details.positionId\n        entityDb.insert(\n            Notify {\n                topic = "PositionAlert"\n                header = "Position Alert for $positionId"\n                body = mapOf<String, Any?>(\n                    "emailDistribution" to mapOf(\n                        "to" to listOf("dev-training@freesmtpserver.com"),\n                        "cc" to emptyList(),\n                        "bcc" to emptyList(),\n                    ),\n                    "content" to "Position $positionId breached the limit"\n                ).toJsonString(true)\n            }\n        )\n        ack()\n    }\n}\n')),(0,i.kt)("p",null,"Next we are going to load our rule definitions into the database."),(0,i.kt)("h2",{id:"setting-up-the-dynamic-rules"},"Setting up the dynamic rules"),(0,i.kt)("h3",{id:"defining-the-rule"},"Defining the rule"),(0,i.kt)("p",null,"Now we can load the dynamic rule csv below into the ",(0,i.kt)("inlineCode",{parentName:"p"},"DYNAMIC_RULE")," table."),(0,i.kt)("p",null,"Navigate to ",(0,i.kt)("strong",{parentName:"p"},"/home/genesis/run/position/data/")," in your WSL terminal and create a file called ",(0,i.kt)("strong",{parentName:"p"},"dynamic-rule.csv")," with the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csv",metastring:'title="dynamic-rule.csv"',title:'"dynamic-rule.csv"'},"NAME,DESCRIPTION,RULE_TABLE,RULE_STATUS,RULE_EXPRESSION,USER_NAME,PROCESS_NAME,MESSAGE_TYPE,RESULT_EXPRESSION\nMY_RULE,It\u2019s a rule,POSITION,ENABLED,(QUANTITY > 500),JaneDee,POSITIONS_APP_TUTORIAL_EVENT_HANDLER,EVENT_POSITION_CANCEL,((QUANTITY = 0) && (POSITION_ID = POSITION_ID))\n")),(0,i.kt)("p",null,"The second is a csv file that enables you to test the rule. Create another file called ",(0,i.kt)("strong",{parentName:"p"},"position.csv")," with the following data:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csv",metastring:'title="position.csv"',title:'"position.csv"'},"POSITION_ID,INSTRUMENT_ID,QUANTITY,NOTIONAL\n1,1,600,1100000\n")),(0,i.kt)("h3",{id:"loading-the-rule-into-the-database"},"Loading the rule into the database"),(0,i.kt)("p",null,"Now we need to import this rule into our ",(0,i.kt)("inlineCode",{parentName:"p"},"DYNAMIC_RULE")," table. Run the following command in your WSL terminal:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="From the WSL Distribution"',title:'"From',the:!0,WSL:!0,'Distribution"':!0},"SendIt -f dynamic-rule.csv -t DYNAMIC_RULE\n")),(0,i.kt)("p",null,"To validate the file was imported correctly, run ",(0,i.kt)("inlineCode",{parentName:"p"},"DbMon"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"table DYNAMIC_RULE")," then ",(0,i.kt)("inlineCode",{parentName:"p"},"search 1"),". You should see the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Contents of table DYNAMIC_RULE"',title:'"Contents',of:!0,table:!0,'DYNAMIC_RULE"':!0},"Field Name                               Value                                    Type\n===========================================================================================\nTIMESTAMP                                2022-09-06 14:00:49.771(n:0,s:2407)      NANO_TIMESTAMP\nDESCRIPTION                              It\u2019s a rule                              STRING\nID                                       cbdcbb88-9fb0-4d02-8400-e9a186204a27D... STRING\nMESSAGE_TYPE                             EVENT_POSITION_CANCEL                    STRING\nNAME                                     MY_RULE                                  STRING\nPROCESS_NAME                             POSITIONS_APP_TUTORIAL_EVENT_HANDLER     STRING\nRESULT_EXPRESSION                        ((QUANTITY = 0) && (POSITION_ID = POS... STRING\nRULE_EXPRESSION                          (QUANTITY > 500)                         STRING\nRULE_STATUS                              ENABLED                                  ENUM[ENABLED DISABLED]\nRULE_TABLE                               POSITION                                 STRING\nTABLE_OPERATION                          INSERT                                   STRING\nUSER_NAME                                JaneDee                                  STRING\n-------------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------------\nTotal Results:  1\n")),(0,i.kt)("p",null,"We will load the ",(0,i.kt)("strong",{parentName:"p"},"position.csv")," file later when we are ready to trigger the event."),(0,i.kt)("p",null,"Ok now we have configured our evaluator, defined our business logic and loaded the dynamic rule in to the database. In order for Notify to send an email, we first need define and configure it in our system."),(0,i.kt)("h2",{id:"configure-notify"},"Configure Notify"),(0,i.kt)("p",null,"For a more detailed explanation of ",(0,i.kt)("strong",{parentName:"p"},"GENESIS_NOTIFY")," and ",(0,i.kt)("strong",{parentName:"p"},"GATEWAY"),", see our ",(0,i.kt)("a",{parentName:"p",href:"/server/integration/notify/configuring/"},"Integration section"),"."),(0,i.kt)("h3",{id:"add-connection-details"},"Add connection details"),(0,i.kt)("p",null,"The first step is to configure Notify to use the email server. Under ",(0,i.kt)("strong",{parentName:"p"},"server/jvm/positions-app-tutorial-script-config/src/main/resources/scripts")," create new file called ",(0,i.kt)("strong",{parentName:"p"},"positions-app-tutorial-notify.kts"),". Add the following code to it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="positions-app-tutorial-notify.kts"',title:'"positions-app-tutorial-notify.kts"'},'notify {\n\n    email {\n        smtpHost = "smtp.freesmtpservers.com"\n        smtpPort = 25\n        smtpUser = ""\n        smtpPw = ""\n        smtpProtocol = "SMTP"\n        systemDefaultUserName = "admin@positions.app"\n        systemDefaultEmail = "admin@positions.app"\n    }\n}\n')),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"We use freely available SMTP server for testing purposes. Change the email configuration accordingly when developing an enterprise grade application.")),(0,i.kt)("h3",{id:"enable-notify"},"Enable Notify"),(0,i.kt)("p",null,"The ",(0,i.kt)("strong",{parentName:"p"},"GENESIS_NOTIFY")," module does not run by default. To change this, we are adding a customised module to our project. To do that, create a process called ",(0,i.kt)("inlineCode",{parentName:"p"},"POSITIONS_APP_TUTORIAL_NOTIFY")," and add it to the file ",(0,i.kt)("strong",{parentName:"p"},"positions-app-tutorial-processes.xml")," inside your project folder ",(0,i.kt)("strong",{parentName:"p"},"server/jvm/positions-app-tutorial-config/src/main/resources/cfg"),". The process definition should reference the Notify script created in the previous paragraph. Use the code below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="positions-app-tutorial-processes.xml"',title:'"positions-app-tutorial-processes.xml"'},'<process name="POSITIONS_APP_TUTORIAL_NOTIFY">\n    <start>true</start>\n    <groupId>GENESIS</groupId>\n    <options>-Xmx512m -DXSD_VALIDATE=false</options>\n    <module>genesis-notify</module>\n    <package>global.genesis.notify</package>\n    <script>positions-app-tutorial-notify.kts<\/script>\n    <language>pal</language>\n    <description>Notify Mechanism for sending messages to external systems, such as Email and Symphony</description>\n</process>\n')),(0,i.kt)("p",null,"Add the ",(0,i.kt)("inlineCode",{parentName:"p"},"POSITIONS_APP_TUTORIAL_NOTIFY")," process to your ",(0,i.kt)("strong",{parentName:"p"},"positions-app-tutorial-service-definitions.xml"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="positions-app-tutorial-service-definitions.xml"',title:'"positions-app-tutorial-service-definitions.xml"'},'<service host="localhost" name="POSITIONS_APP_TUTORIAL_NOTIFY" port="11005"/>\n')),(0,i.kt)("h2",{id:"set-up-genesis_notify-in-the-database"},"Set up GENESIS_NOTIFY in the database"),(0,i.kt)("h3",{id:"insert-a-gateway-route"},"Insert a gateway route"),(0,i.kt)("p",null,"Navigate to ",(0,i.kt)("strong",{parentName:"p"},"/home/genesis/run/temp-data")," in your WSL terminal and create a file called ",(0,i.kt)("strong",{parentName:"p"},"gateway.csv"),", in the following ",(0,i.kt)("a",{parentName:"p",href:"/server/integration/notify/email/#gateway"},"format"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csv",metastring:'title="gateway.csv"',title:'"gateway.csv"'},'GATEWAY_ID,GATEWAY_TYPE,GATEWAY_VALUE,INCOMING_TOPIC\n"EmailDistribution1","EmailDistribution","{ \\"emailDistribution\\" : { \\"to\\" : [ ], \\"cc\\" : [ ], \\"bcc\\" : [ ] } }",\n')),(0,i.kt)("p",null,"Then run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="From the WSL Distribution"',title:'"From',the:!0,WSL:!0,'Distribution"':!0},"SendIt -f gateway.csv -t GATEWAY\n")),(0,i.kt)("p",null,"To validate the file was imported correctly, run ",(0,i.kt)("inlineCode",{parentName:"p"},"DbMon"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"table GATEWAY")," then ",(0,i.kt)("inlineCode",{parentName:"p"},"search 1"),". You should see the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Contents of table GATEWAY"',title:'"Contents',of:!0,table:!0,'GATEWAY"':!0},'GATEWAY\n==================================\nField Name                               Value                                    Type\n===========================================================================================\nTIMESTAMP                                2022-09-06 14:28:12.302(n:0,s:2537)      NANO_TIMESTAMP\nCONNECTION_ID                                                                     STRING\nGATEWAY_ID                               EmailDistribution1                       STRING\nGATEWAY_TYPE                             EmailDistribution                        ENUM[Log EmailUser EmailDistribution SymphonyByUserEmail SymphonyRoom MsTeamsChannel SymphonyRoomReqRep]\nGATEWAY_VALUE                            { \\"emailDistribution\\" : { \\"to\\" : ... STRING\nINCOMING_TOPIC                                                                    STRING\n-------------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------------\nTotal Results:  1\n')),(0,i.kt)("h3",{id:"insert-notify_route"},"Insert NOTIFY_ROUTE"),(0,i.kt)("p",null,"Navigate to ",(0,i.kt)("strong",{parentName:"p"},"/home/genesis/run/temp-data")," in your WSL terminal and create a file called ",(0,i.kt)("strong",{parentName:"p"},"notify-route.csv"),", in the following ",(0,i.kt)("a",{parentName:"p",href:"/server/integration/notify/email/#notify-route"},"format"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csv",metastring:'title="notify-route.csv"',title:'"notify-route.csv"'},'ENTITY_ID,ENTITY_ID_TYPE,TOPIC_MATCH,GATEWAY_ID\n,"GATEWAY","PositionAlert","EmailDistribution1"\n')),(0,i.kt)("p",null,"Then run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"SendIt -f notify-route.csv -t NOTIFY_ROUTE\n")),(0,i.kt)("p",null,"To check that the file was imported correctly, run ",(0,i.kt)("inlineCode",{parentName:"p"},"DbMon"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"table NOTIFY_ROUTE")," then ",(0,i.kt)("inlineCode",{parentName:"p"},"search 1"),". You should see the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Contents of table NOTIFY_ROUTE"',title:'"Contents',of:!0,table:!0,'NOTIFY_ROUTE"':!0},"NOTIFY_ROUTE\n==================================\nField Name                               Value                                    Type\n===========================================================================================\nTIMESTAMP                                2022-09-06 14:33:35.763(n:0,s:3357)      NANO_TIMESTAMP\nENTITY_ID                                                                         STRING\nENTITY_ID_TYPE                           GATEWAY                                  ENUM[USER_NAME PROFILE_NAME GATEWAY]\nGATEWAY_ID                               EmailDistribution1                       STRING\nNOTIFY_ROUTE_ID                          c0a645f7-4d53-48eb-99b8-87b56f42bc45N... STRING\nTOPIC_MATCH                              PositionAlert                            STRING\n-------------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------------\nTotal Results:  1\n")),(0,i.kt)("h2",{id:"build-and-deploy-the-application"},"Build and deploy the application"),(0,i.kt)("p",null,"Now run the following commands in order:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"assemble")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"positions-app-tutorial-config:assemble")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"install-positions-app-tutorial-site-specific")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"deploy-genesisproduct-positions-app-tutorial"))),(0,i.kt)("p",null,"Once deployed, run ",(0,i.kt)("inlineCode",{parentName:"p"},"mon"),". You should be able to see the Evaluator process is present, but on ",(0,i.kt)("inlineCode",{parentName:"p"},"STANDBY"),"."),(0,i.kt)("p",null,"This is because the Evaluator process is set to run only on the primary node. Our application only has one node, but we still have to identify it as the primary node."),(0,i.kt)("p",null,"Run ",(0,i.kt)("inlineCode",{parentName:"p"},"SetPrimary")," in your WSL terminal and you should be able to see all processes running."),(0,i.kt)("h2",{id:"switch-on-data-dumps"},"Switch on data dumps"),(0,i.kt)("p",null,"Data dumps need to be switched on for both EVALUATOR and NOTIFY so that we can see some additional data in the logs."),(0,i.kt)("p",null,"Run the ",(0,i.kt)("a",{parentName:"p",href:"/operations/commands/server-commands/#loglevel-script"},"LogLevel")," command for that:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="From the WSL Distribution"',title:'"From',the:!0,WSL:!0,'Distribution"':!0},"LogLevel -p POSITIONS_APP_TUTORIAL_EVALUATOR -DATADUMP_ON -l DEBUG\nLogLevel -p POSITIONS_APP_TUTORIAL_NOTIFY -DATADUMP_ON -l DEBUG\n")),(0,i.kt)("p",null,"And then to see the logs run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="From the WSL Distribution"',title:'"From',the:!0,WSL:!0,'Distribution"':!0},"cd $L\ntail -f POSITIONS_APP_TUTORIAL_EVALUATOR.log\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"$L is an alias to the logs folder (~/run/runtime/logs) provided by the Genesis Platform. Feel free to use your favorite command to view logs such as tail, less, etc.")),(0,i.kt)("h2",{id:"trigger-the-event-to-test-the-rule"},"Trigger the event to test the rule"),(0,i.kt)("p",null,"So, let's see if that has worked."),(0,i.kt)("p",null,"Insert the file ",(0,i.kt)("strong",{parentName:"p"},"POSITION.csv")," into the database. This is the file that you prepared earlier; it contains a value that breaches a limit, so it should trigger our event."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="From the WSL Distribution"',title:'"From',the:!0,WSL:!0,'Distribution"':!0},"SendIt -f position.csv -t POSITION\n")),(0,i.kt)("p",null,"You can see that when the limit is breached, you receive an email automatically."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Go to ",(0,i.kt)("a",{parentName:"p",href:"https://www.wpoven.com/tools/free-smtp-server-for-testing"},"https://www.wpoven.com/tools/free-smtp-server-for-testing")," and access the inbox ",(0,i.kt)("em",{parentName:"p"},(0,i.kt)("a",{parentName:"em",href:"mailto:dev-training@freesmtpserver.com"},"dev-training@freesmtpserver.com")))),(0,i.kt)("p",null,"This section showed how to trigger events based on a condition in the database. This enables you to raise alarms on certain conditions or to react to specific states. In the next section you will see how to run static events."),(0,i.kt)("h2",{id:"static-rules-cron-rules"},"Static rules (Cron rules)"),(0,i.kt)("p",null,"It is often useful to run tasks periodically - for example, to schedule the production of EOD reports, or to send a warning when a defined limit is reached. For such purposes, the Genesis low-code platform provides a feature called the ",(0,i.kt)("a",{parentName:"p",href:"/server/evaluator/introduction/"},"Evaluator"),". In system terms, Evaluators enable you to connect ",(0,i.kt)("a",{parentName:"p",href:"/server/event-handler/introduction/"},"Event Handlers")," to two different kinds of event: dynamic and static (cron rules): "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Cron Rules"),"  are scheduling rules; these are static events, defined as ",(0,i.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Cron#CRON_expression"},"standard cron expressions"),". "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Dynamic Rules"),", also known as dynamic events, are defined as ",(0,i.kt)("a",{parentName:"li",href:"https://groovy-lang.org/syntax.html"},"groovy expressions"),", which respond to changes to database table entries.")),(0,i.kt)("p",null,"In both cases, you define the rule in a table in the database: ",(0,i.kt)("inlineCode",{parentName:"p"},"CRON_RULES")," for static rules and ",(0,i.kt)("inlineCode",{parentName:"p"},"DYNAMIC_RULES")," for dynamic rules. In this section, we're going to use ",(0,i.kt)("inlineCode",{parentName:"p"},"CRON_RULES"),"."),(0,i.kt)("h3",{id:"cron-rules-static-events"},"Cron rules (static events)"),(0,i.kt)("p",null,"Let's create a cron rule that triggers a batch job to run once every 30 seconds."),(0,i.kt)("p",null,"The batch job will generate a position report as a csv for each counterparty. This will be stored in Genesis environments ",(0,i.kt)("strong",{parentName:"p"},"runtime/position-30seconds-report"),". The file name of each report written will be in the format ",(0,i.kt)("strong",{parentName:"p"},"[COUNTERPARTY_ID]","-","[DATE]",".csv"),"."),(0,i.kt)("h3",{id:"the-rule"},"The rule"),(0,i.kt)("p",null,"Our cron rule takes the following form:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"CRON_EXPRESSION"),(0,i.kt)("th",{parentName:"tr",align:null},"DESCRIPTION"),(0,i.kt)("th",{parentName:"tr",align:null},"TIME_ZONE"),(0,i.kt)("th",{parentName:"tr",align:null},"RULE_STATUS"),(0,i.kt)("th",{parentName:"tr",align:null},"NAME"),(0,i.kt)("th",{parentName:"tr",align:null},"USER_NAME"),(0,i.kt)("th",{parentName:"tr",align:null},"PROCESS_NAME"),(0,i.kt)("th",{parentName:"tr",align:null},"MESSAGE_TYPE"),(0,i.kt)("th",{parentName:"tr",align:null},"RESULT_EXPRESSION"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"0/30 * * * ",(0,i.kt)("em",{parentName:"td"}," ? ")),(0,i.kt)("td",{parentName:"tr",align:null},"It\u2019s a rule"),(0,i.kt)("td",{parentName:"tr",align:null},"Europe/London"),(0,i.kt)("td",{parentName:"tr",align:null},"ENABLED"),(0,i.kt)("td",{parentName:"tr",align:null},"A rule"),(0,i.kt)("td",{parentName:"tr",align:null},"JaneDee"),(0,i.kt)("td",{parentName:"tr",align:null},"POSITIONS_APP_TUTORIAL_EVALUATOR"),(0,i.kt)("td",{parentName:"tr",align:null},"EVENT_POSITION_REPORT"),(0,i.kt)("td",{parentName:"tr",align:null})))),(0,i.kt)("p",null,"Let's look at the most important fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"RULE_STATUS")," can be ",(0,i.kt)("strong",{parentName:"li"},"ENABLED")," or ",(0,i.kt)("strong",{parentName:"li"},"DISABLED"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"CRON_EXPRESSION")," determines when the rule is evaluated."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"PROCESS_NAME")," is the target process for the rule. When the rule is triggered, it will send a message to the process specified here."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"MESSAGE_TYPE")," is the message that needs to be sent to the specified ",(0,i.kt)("strong",{parentName:"li"},"PROCESS_NAME"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"RESULT_EXPRESSION")," is the value or values that will be sent as part of the transaction to the target PROCESS_NAME; we can leave RESULT_EXPRESSION empty, as we are going to generate a report for all positions anyway.")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"We use ",(0,i.kt)("a",{parentName:"p",href:"http://www.quartz-scheduler.org/"},"Quartz")," to manage our cron expression. All cron expression formats should match that of Quartz specification.")),(0,i.kt)("h3",{id:"configure-the-evaluator-1"},"Configure the Evaluator"),(0,i.kt)("p",null,"An Evaluator is a process that runs cron jobs.\nTo start, create a process called ",(0,i.kt)("strong",{parentName:"p"},"POSITIONS_APP_TUTORIAL_EVALUATOR")," and add it to the file ",(0,i.kt)("strong",{parentName:"p"},"positions-app-tutorial-processes.xml")," inside your project folder ",(0,i.kt)("strong",{parentName:"p"},"server/jvm/positions-app-tutorial-config/src/main/resources/cfg")," as the code below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<process name="POSITIONS_APP_TUTORIAL_EVALUATOR">\n    <start>true</start>\n    <groupId>POSITIONS_APP_TUTORIAL</groupId>\n    <options>-Xmx512m -DXSD_VALIDATE=false</options>\n    <module>genesis-evaluator</module>\n    <primaryOnly>true</primaryOnly>\n    <package>global.genesis.eventhandler,global.genesis.evaluator</package>\n    <description>Dynamic/time rules engine</description>\n</process>\n')),(0,i.kt)("p",null,"Add the ",(0,i.kt)("inlineCode",{parentName:"p"},"POSITIONS_APP_TUTORIAL_EVALUATOR")," to the file ",(0,i.kt)("strong",{parentName:"p"},"positions-app-tutorial-service-definitions.xml")," inside your project folder ",(0,i.kt)("strong",{parentName:"p"},"server/jvm/positions-app-tutorial-config/src/main/resources/cfg")," with the code below. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<service host="localhost" name="POSITIONS_APP_TUTORIAL_EVALUATOR" port="11004"/>\n')),(0,i.kt)("h3",{id:"create-a-new-class"},"Create a new class"),(0,i.kt)("p",null,"Now we need to create a ",(0,i.kt)("inlineCode",{parentName:"p"},"PositionReport")," class to trigger the new event. This class should be created under ",(0,i.kt)("strong",{parentName:"p"},"server/jvm/positions-app-tutorial-messages/src/main/kotlin/global/genesis/messages/event"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"class PositionReport\n")),(0,i.kt)("h3",{id:"create-an-eventhandler"},"Create an eventHandler"),(0,i.kt)("p",null,"Next we need to create an ",(0,i.kt)("inlineCode",{parentName:"p"},"EventHandler")," codeblock that will write the csv files to the ",(0,i.kt)("strong",{parentName:"p"},"runtime/position-30seconds-report")," folder. First, open the ",(0,i.kt)("strong",{parentName:"p"},"positions-app-tutorial-eventhandler.kts")," file and add a variable called ",(0,i.kt)("inlineCode",{parentName:"p"},"tradeViewRepo"),", injecting the class ",(0,i.kt)("inlineCode",{parentName:"p"},"TradeViewAsyncRepository"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val tradeViewRepo = inject<TradeViewAsyncRepository>()\n")),(0,i.kt)("p",null,"Then, add this an ",(0,i.kt)("inlineCode",{parentName:"p"},"EventHandler")," codeblock to generate the csv file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'eventHandler<PositionReport>(name = "EVENT_POSITION_REPORT", transactional = true) {\n    onCommit {\n        val mapper = GenesisJacksonMapper.csvWriter<TradeView>()\n        val today = LocalDate.now().toString()\n        val positionReportFolder = File(GenesisPaths.runtime()).resolve("position-30seconds-report")\n        if (!positionReportFolder.exists()) positionReportFolder.mkdirs()\n\n        tradeViewRepo.getBulk()\n            .toList()\n            .groupBy { it.counterpartyCounterpartyName }\n            .forEach { (counterParty, trades) ->\n                val file = positionReportFolder.resolve("${counterParty}_$today.csv")\n                if (file.exists()) file.delete()\n                mapper.writeValues(file).use { it.writeAll(trades) }\n            }\n        ack()\n    }\n}\n')),(0,i.kt)("p",null,"Now run the following commands in order:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"assemble")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"positions-app-tutorial-config:assemble")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"deploy-genesisproduct-positions-app-tutorial"))),(0,i.kt)("p",null,"Once deployed, run ",(0,i.kt)("inlineCode",{parentName:"p"},"mon"),". You should be able to see the process is present, but on ",(0,i.kt)("inlineCode",{parentName:"p"},"STANDBY"),"."),(0,i.kt)("p",null,"This is because the Evaluator process is set to run only on the primary node. Our application only has one node, but we still have to identify it as the primary node."),(0,i.kt)("p",null,"Run ",(0,i.kt)("inlineCode",{parentName:"p"},"SetPrimary")," in your WSL terminal and you should be able to see all processes running."),(0,i.kt)("h3",{id:"load-the-cron-rule-on-to-the-database"},"Load the cron rule on to the database"),(0,i.kt)("p",null,"Now we can load the cron rule csv below into the database, ",(0,i.kt)("a",{parentName:"p",href:"/server/evaluator/configuring-runtime/#cron_rule-table"},"CRON_RULE")," table."),(0,i.kt)("p",null,"Navigate to ",(0,i.kt)("strong",{parentName:"p"},"home/genesis/run/temp-data")," in your WSL terminal and create a file called ",(0,i.kt)("strong",{parentName:"p"},"cron-rule.csv")," with the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csv"},'CRON_EXPRESSION,DESCRIPTION,TIME_ZONE,RULE_STATUS,NAME,USER_NAME,PROCESS_NAME,MESSAGE_TYPE\n"0/30 * * * * ? *","It\u2019s a rule","Europe/London","ENABLED","A rule","JaneDee","POSITIONS_APP_TUTORIAL_EVALUATOR","EVENT_POSITION_REPORT"\n')),(0,i.kt)("p",null,"Now we need to import this cron rule into our ",(0,i.kt)("inlineCode",{parentName:"p"},"CRON_RULE")," table. Run the following command in your WSL terminal:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"SendIt -f cron-rule.csv -t CRON_RULE\n")),(0,i.kt)("p",null,"To check that the file was imported correctly, run ",(0,i.kt)("inlineCode",{parentName:"p"},"DbMon"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"table CRON_RULE")," then ",(0,i.kt)("inlineCode",{parentName:"p"},"search 1"),". You should see the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"Field Name                               Value                                    Type\n===========================================================================================\nTIMESTAMP                                2022-09-05 13:15:42.719(n:0,s:3625)      NANO_TIMESTAMP\nCRON_EXPRESSION                          0/30 * * * * ? *                         STRING\nDESCRIPTION                              It\u2019s a rule                              STRING\nMESSAGE_TYPE                             EVENT_POSITION_REPORT                    STRING\nNAME                                     A rule                                   STRING\nPROCESS_NAME                             POSITIONS_APP_TUTORIAL_EVALUATOR         STRING\nRESULT_EXPRESSION                                                                 STRING\nRULE_STATUS                              ENABLED                                  ENUM[ENABLED DISABLED]\nTIME_ZONE                                Europe/London                            STRING\nUSER_NAME                                JaneDee                                  STRING\n-------------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------------\nTotal Results:  1\n")),(0,i.kt)("h3",{id:"change-the-log-level"},"Change the log level"),(0,i.kt)("p",null,"You can now change the log level to verify the execution of the events. To do this, run the ",(0,i.kt)("a",{parentName:"p",href:"/operations/commands/server-commands/#loglevel-script"},"LogLevel")," command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"LogLevel -p POSITIONS_APP_TUTORIAL_EVALUATOR -DATADUMP_ON -l DEBUG\n")),(0,i.kt)("p",null,"And then to see the logs, run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cd $L\ntail -f POSITIONS_APP_TUTORIAL_EVALUATOR.log\n")),(0,i.kt)("admonition",{title:"What is $L?",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"$L is an alias to the logs folder (~/run/runtime/logs) provided by the Genesis low-code platform. Feel free to use your favourite command to view logs such as tail, less, etc.")),(0,i.kt)("h3",{id:"conclusion"},"Conclusion"),(0,i.kt)("p",null,"This concludes generating reports for the positions application. In the next section you will see how to trigger based on a condition in the database."))}m.isMDXComponent=!0}}]);