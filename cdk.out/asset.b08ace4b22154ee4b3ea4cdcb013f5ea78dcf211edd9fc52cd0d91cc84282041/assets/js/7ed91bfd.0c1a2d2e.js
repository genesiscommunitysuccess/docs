"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[41252],{7226:function(e,n,a){a.r(n),a.d(n,{assets:function(){return c},contentTitle:function(){return d},default:function(){return k},frontMatter:function(){return r},metadata:function(){return l},toc:function(){return m}});var t=a(87462),o=a(63366),i=(a(67294),a(3905)),s=a(61839),p=["components"],r={title:"Web Basics - package.json",sidebar_label:"Package.json basics",id:"package-json-basics",keywords:["web","basics","package.json","scripts","dependencies"],tags:["web","basics","package.json","scripts","dependencies"]},d=void 0,l={unversionedId:"web/basics/package-json-basics",id:"version-2022.3/web/basics/package-json-basics",title:"Web Basics - package.json",description:"The package.json file is auto-generated for you by the CLI, based on your answers to the prompts.",source:"@site/versioned_docs/version-2022.3/04_web/01_basics/04_package-json-basics.md",sourceDirName:"04_web/01_basics",slug:"/web/basics/package-json-basics",permalink:"/web/basics/package-json-basics",draft:!1,tags:[{label:"web",permalink:"/tags/web"},{label:"basics",permalink:"/tags/basics"},{label:"package.json",permalink:"/tags/package-json"},{label:"scripts",permalink:"/tags/scripts"},{label:"dependencies",permalink:"/tags/dependencies"}],version:"2022.3",sidebarPosition:4,frontMatter:{title:"Web Basics - package.json",sidebar_label:"Package.json basics",id:"package-json-basics",keywords:["web","basics","package.json","scripts","dependencies"],tags:["web","basics","package.json","scripts","dependencies"]},sidebar:"frontendSidebar",previous:{title:"Inserting a grid",permalink:"/web/basics/inserting-a-grid"},next:{title:"Button",permalink:"/web/web-components/form/button"}},c={},m=[{value:"Config",id:"config",level:2},{value:"Scripts",id:"scripts",level:2},{value:"Dependencies",id:"dependencies",level:2},{value:"Adding dependencies",id:"adding-dependencies",level:3},{value:"Which <code>package.json</code>?",id:"which-packagejson",level:2},{value:"Example project",id:"example-project",level:3}],u={toc:m};function k(e){var n=e.components,a=(0,o.Z)(e,p);return(0,i.kt)("wrapper",(0,t.Z)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," file is auto-generated for you by the CLI, based on your answers to the prompts."),(0,i.kt)("p",null,"At the top you'll find the ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"description")," of your application."),(0,i.kt)("p",null,"Following this, there are three key sections you need to be aware of:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"config"),(0,i.kt)("li",{parentName:"ul"},"scripts"),(0,i.kt)("li",{parentName:"ul"},"dependencies")),(0,i.kt)("h2",{id:"config"},"Config"),(0,i.kt)("p",null,"When running the app on your local machine, you can adjust a few settings under the ",(0,i.kt)("inlineCode",{parentName:"p"},"config")," section, including which host to connect to and what port to run the dev server on."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'"config": {\n    "API_HOST": "wss://dev-position2/gwf/",\n    "DEFAULT_USER": "JaneDee",\n    "DEFAULT_PASSWORD": "beONneON*74",\n    "PORT": 6060\n  },\n')),(0,i.kt)("h2",{id:"scripts"},"Scripts"),(0,i.kt)("p",null,"The next section is ",(0,i.kt)("inlineCode",{parentName:"p"},"scripts"),".\nSome have been auto-generated for you; feel free to add your own scripts, as needed."),(0,i.kt)("p",null,"These are the commands that you invoke with ",(0,i.kt)("inlineCode",{parentName:"p"},"$ npm run")," - when you execute that command from your command line, ",(0,i.kt)("inlineCode",{parentName:"p"},"node")," will look at the scripts listed here to know what to run.\nFor example, ",(0,i.kt)("inlineCode",{parentName:"p"},"$ npm run clean:dist")," will run ",(0,i.kt)("inlineCode",{parentName:"p"},"node ../.build/clean.js dist"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'  "scripts": {\n    "build": "npm run build:webpack",\n    "build:with-host": "cross-env API_HOST=$npm_package_config_API_HOST npm run build:webpack",\n    "build:webpack": "cross-env NODE_ENV=production AUTO_CONNECT=true webpack",\n    "clean": "npm run clean:dist",\n    "clean:dist": "node ../.build/clean.js dist",\n    "copy-files": "copyfiles -u 1 src/**/*.{css,scss,ttf} ./dist/esm",\n    "dev": "npm run dev:webpack",\n    "dev:webpack": "cross-env API_HOST=$npm_package_config_API_HOST AUTO_CONNECT=true DEFAULT_USER=$npm_package_config_DEFAULT_USER DEFAULT_PASSWORD=$npm_package_config_DEFAULT_PASSWORD NODE_ENV=development webpack serve --open",\n    "serve": "serve dist -p $npm_package_config_PORT",\n    "test": "echo \\"Error: no test specified\\""\n  },\n')),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Your settings from the ",(0,i.kt)("inlineCode",{parentName:"p"},"config")," block will be passed to different scripts as environment variables, using ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/cross-env"},"cross-env"),". For example, if you wanted to add a new config for a ",(0,i.kt)("inlineCode",{parentName:"p"},"DEFAULT_VIEW"),":"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"add the config to the config block as ",(0,i.kt)("inlineCode",{parentName:"li"},'"DEFAULT_VIEW": "reporting"')),(0,i.kt)("li",{parentName:"ul"},"in the npm script that requires the variable, add ",(0,i.kt)("inlineCode",{parentName:"li"},"DEFAULT_VIEW=$npm_package_config_DEFAULT_VIEW"),"."))),(0,i.kt)("h2",{id:"dependencies"},"Dependencies"),(0,i.kt)("p",null,"Last but not least, the ",(0,i.kt)("inlineCode",{parentName:"p"},"dependencies")," section contains a list of your app's dependencies and their versions."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"This includes ",(0,i.kt)("strong",{parentName:"p"},"@genesislcap")," dependencies. This is where you can change the dependency versions to upgrade to a newer version of the platform.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'  "dependencies": {\n    "@genesislcap/foundation-comms": "1.0.0",\n    "@genesislcap/foundation-entity-management": "1.0.0",\n    "@genesislcap/foundation-login": "1.0.0",\n    "@genesislcap/foundation-utils": "1.0.0",\n    "@genesislcap/foundation-zero": "1.0.0",\n    "@genesislcap/foundation-ui": "1.0.0",\n    "@microsoft/fast-components": "^2.16.6",\n    "@microsoft/fast-element": "^1.6.2",\n    "@microsoft/fast-foundation": "^2.27.1",\n    "@microsoft/fast-router": "^0.2.11",\n    "@microsoft/fast-web-utilities": "^5.0.1",\n    "rxjs": "^7.4.0",\n    "tslib": "^2.3.1"\n  }\n')),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"You can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"lerna add")," command (instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"npm install"),") if you need to add more dependencies, because the app is a ",(0,i.kt)("a",{parentName:"p",href:"https://lerna.js.org/"},"lerna-managed")," monorepo.")),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"Do ",(0,i.kt)("strong",{parentName:"p"},"not")," use ",(0,i.kt)("inlineCode",{parentName:"p"},"npm install")," to install packages as advised in ",(0,i.kt)("a",{parentName:"p",href:"https://lerna.js.org/docs/faq#how-do-i-add-a-package-to-my-lerna-repository"},"the lerna documentation"),".\nIt might work initially, but over time it can cause errors in the dependency tree and stop your application from building."),(0,i.kt)("p",{parentName:"admonition"},"If you do run into issues after running ",(0,i.kt)("inlineCode",{parentName:"p"},"npm install"),", you should be able to recover by running ",(0,i.kt)("inlineCode",{parentName:"p"},"$ npm run clean:all && npm run bootstrap"),". This will clear all dependency packages and download/link them again.")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"devDependencies")," section is for dependencies that are only to used in development - think of tools such as linters. These additional dependencies will not be added to the final production bundle and therefore will not increase the download size of the application to the user's browser."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'  "devDependencies": {\n    "@babel/core": "^7.12.9",\n    "@typescript-eslint/eslint-plugin": "^5.2.0",\n    "camel-case": "^4.1.2",\n    "typescript": "^4.5.5",\n  }\n')),(0,i.kt)("h3",{id:"adding-dependencies"},"Adding dependencies"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"lerna")," manages the dependencies across the different packages in the monorepo and will attempt to simplify the downloaded packages by only downloading a package version one time; it downloads the package version to the ",(0,i.kt)("inlineCode",{parentName:"p"},"node_modules")," of the project root and then symlinks it across to the other ",(0,i.kt)("inlineCode",{parentName:"p"},"node_modules")," directories in your other lerna modules. It also allows you to link local modules without having to publish them to ",(0,i.kt)("inlineCode",{parentName:"p"},"npm")," first."),(0,i.kt)("p",null,"You can add dependencies straight into the ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," of one of your modules and then run the ",(0,i.kt)("inlineCode",{parentName:"p"},"$ npm run bootstrap")," command from the ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," in your web root. ",(0,i.kt)("inlineCode",{parentName:"p"},"lerna")," ensures the modules are downloaded and linked together."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"It is good practice to clean the ",(0,i.kt)("inlineCode",{parentName:"p"},"node_modules")," out before running a bootstrap, using ",(0,i.kt)("inlineCode",{parentName:"p"},"$ npm run clean:all"),".\nYou can run both commands in one, using ",(0,i.kt)("inlineCode",{parentName:"p"},"$ npm run clean:all && npm run bootstrap"),".")),(0,i.kt)("h2",{id:"which-packagejson"},"Which ",(0,i.kt)("inlineCode",{parentName:"h2"},"package.json"),"?"),(0,i.kt)("p",null,"When first starting to work with the ",(0,i.kt)("inlineCode",{parentName:"p"},"lerna"),"-managed monorepo, there can be some confusion about which ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," to make changes to (usually, there are multiple ones spread across the project). There will be a ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," for each of your modules and also one at the root of the ",(0,i.kt)("inlineCode",{parentName:"p"},"lerna")," project (the client root, in the ",(0,i.kt)("inlineCode",{parentName:"p"},"/client")," directory in the apps created from the seed projects)."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Adding a dependency"),". As stated in the ",(0,i.kt)("a",{parentName:"p",href:"#adding-dependencies"},"adding dependencies")," section, you should navigate to the ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," that is in the directory of the module that you want to add the dependency to. For example, if you want to add the dependency ",(0,i.kt)("inlineCode",{parentName:"p"},"@genesislcap/foundation-login")," to your web app, you probably want to add the dependency to the ",(0,i.kt)("inlineCode",{parentName:"p"},"client/web/package.json")," file. Alternatively, if you want to add the ",(0,i.kt)("inlineCode",{parentName:"p"},"@genesislcap/foundation-comms")," dependency to a separate module that you are building in the same repository, add it to the ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," of that module.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Adding a module command"),". If you want to add a command that is specific to a module, such as a command to extract the API from a tsdoc comment, then edit the ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," specific to that package.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Adding a CI/workflow command"),". If you want to add a command to be run as part of CI or a workflow, such as during a git command, edit the file in your client root. For example, if you want to set up linting checks, add the linting command to the ",(0,i.kt)("inlineCode",{parentName:"p"},"client/package.json")," file."))),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"A good rule of thumb for knowing which ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," to update is to think of the ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," files and modules as a hierarchical tree. You need to make the change to the file that is or isn't an ancestor of the places where the change is needed."),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"In general, you only need to add changes to the top level ",(0,i.kt)("inlineCode",{parentName:"strong"},"package.json")," if the change is required across all modules. Otherwise, the change should be specific to the module(s) required."))),(0,i.kt)("h3",{id:"example-project"},"Example project"),(0,i.kt)("p",null,"The following example shows a project that has two apps (a spot trading app and a derivatives trading app)."),(0,i.kt)("p",null,"There are also two custom packages, one that is a theme that takes ",(0,i.kt)("inlineCode",{parentName:"p"},"@genesislcap/foundation-ui")," and customises it, and one that is used for common calculations that are required across both the apps."),(0,i.kt)(s.G,{chart:"classDiagram\n    ClientRoot <|-- Apps\n    ClientRoot <|-- Packages\n    ClientRoot : client/package.json\n    ClientRoot : +CI commands\n    ClientRoot : +Workflow commands\n\n    Apps <|-- SpotMarkets\n    Apps <|-- Derivatives\n\n    class SpotMarkets {\n        client/apps/spot_markets/package.json\n        +App commands\n        +App dependencies\n    }\n    class Derivatives {\n        client/apps/derivatives/package.json\n        +App commands\n        +App dependencies\n    }\n\n    Packages <|-- BlazerTheme\n    Packages <|-- CalcsPackage\n\n    class BlazerTheme {\n        client/packages/blazer/package.json\n        +Theme commands\n        +Theme dependencies\n    }\n    class CalcsPackage {\n        client/packages/calcs/package.json\n        +Package commands\n        +Package dependencies\n    }",mdxType:"Mermaid"}),(0,i.kt)("p",null,"Some examples of changes for the project:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Set up linting in ",(0,i.kt)("inlineCode",{parentName:"li"},"client/package.json"),", because you want to run linting checks across all parts of the code."),(0,i.kt)("li",{parentName:"ul"},'The "Blazer" theme requires ',(0,i.kt)("inlineCode",{parentName:"li"},"@genesislcap/foundation-ui")," as a dependency so that it can import the web components and export them with customised css/themeing. For this, add a ",(0,i.kt)("inlineCode",{parentName:"li"},"dependency")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"client/packages/blazer/package.json"),"."),(0,i.kt)("li",{parentName:"ul"},'The "Blazer" theme needs to be used in both apps to keep a consistent look and feel, and the calculations package is required in both apps too. Add these dependencies in the ',(0,i.kt)("inlineCode",{parentName:"li"},"package.json")," of each of the modules, and then ",(0,i.kt)("inlineCode",{parentName:"li"},"lerna")," will ensure they're linked together. This means you can see the local changes without having to publish the theme or calculation package to ",(0,i.kt)("inlineCode",{parentName:"li"},"npm"),".")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"If you need an external dependency to both apps such as ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@microsoft/api-documenter"},"@microsoft/api-documenter"),", then lerna will only download it once in the common ",(0,i.kt)("inlineCode",{parentName:"p"},"node_modules")," and then symlink it to where it is required.")))}k.isMDXComponent=!0}}]);