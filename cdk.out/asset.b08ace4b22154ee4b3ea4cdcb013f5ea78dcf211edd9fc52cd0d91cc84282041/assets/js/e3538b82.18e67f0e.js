"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[86219],{93907:function(t,e,n){n.r(e),n.d(e,{assets:function(){return u},contentTitle:function(){return d},default:function(){return g},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return c}});var r=n(87462),o=n(63366),i=(n(67294),n(3905)),a=(n(61839),["components"]),s={title:"Consolidator - Testing",sidebar_label:"Testing",id:"testing",keywords:["server","consolidator","testing"],tags:["server","consolidator","testing"]},d=void 0,l={unversionedId:"server/consolidator/testing",id:"server/consolidator/testing",title:"Consolidator - Testing",description:"Introduction | Basics |  Advanced | Examples | Configuring runtime | Testing",source:"@site/docs/03_server/07_consolidator/06_testing.md",sourceDirName:"03_server/07_consolidator",slug:"/server/consolidator/testing",permalink:"/next/server/consolidator/testing",draft:!1,tags:[{label:"server",permalink:"/next/tags/server"},{label:"consolidator",permalink:"/next/tags/consolidator"},{label:"testing",permalink:"/next/tags/testing"}],version:"current",sidebarPosition:6,frontMatter:{title:"Consolidator - Testing",sidebar_label:"Testing",id:"testing",keywords:["server","consolidator","testing"],tags:["server","consolidator","testing"]},sidebar:"serverModulesSidebar",previous:{title:"Configuring Runtime",permalink:"/next/server/consolidator/configuring-runtime"},next:{title:"Introduction",permalink:"/next/server/evaluator/introduction"}},u={},c=[{value:"Integration testing",id:"integration-testing",level:2},{value:"Writing tests",id:"writing-tests",level:2},{value:"Consolidation test",id:"consolidation-test",level:3},{value:"<code>onCommit</code> test",id:"oncommit-test",level:3},{value:"Nested consolidation test",id:"nested-consolidation-test",level:3}],p={toc:c};function g(t){var e=t.components,n=(0,o.Z)(t,a);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/server/consolidator/introduction"},"Introduction")," | ",(0,i.kt)("a",{parentName:"p",href:"/server/consolidator/basics"},"Basics")," |  ",(0,i.kt)("a",{parentName:"p",href:"/server/consolidator/advanced"},"Advanced")," | ",(0,i.kt)("a",{parentName:"p",href:"/server/consolidator/examples"},"Examples")," | ",(0,i.kt)("a",{parentName:"p",href:"/server/consolidator/configuring-runtime"},"Configuring runtime")," | ",(0,i.kt)("a",{parentName:"p",href:"/server/consolidator/testing"},"Testing")),(0,i.kt)("h2",{id:"integration-testing"},"Integration testing"),(0,i.kt)("p",null,"The Genesis low-code platform provides the ",(0,i.kt)("inlineCode",{parentName:"p"},"AbstractGenesisTestSupport")," abstract class that enables end-to-end testing of specific areas of your application. In this case, we want to ensure that we have a database, seeded with information, and that our Consolidator configuration is used to create our Consolidator. "),(0,i.kt)("p",null,'First, we need to add the required packages and genesis home. Then we need to set the "IS_SCRIPT" System Definition property to true (this is required as part of the Consolidator initialisation).'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'class ConsolidatorTest : AbstractGenesisTestSupport<GenesisSet>(\n    GenesisTestConfig {\n        addPackageName("global.genesis.pal.consolidator")\n        genesisHome = "/GenesisHome/"\n        scriptFileName = "position-consolidator.kts"\n        initialDataFile = "seed-data.csv"\n        parser = { it }\n    }) {\n\n    override fun systemDefinition(): Map<String, Any> = mapOf("IS_SCRIPT" to "true")\n}\n')),(0,i.kt)("p",null,"For more information about ",(0,i.kt)("inlineCode",{parentName:"p"},"AbstractGenesisTestSupport"),", see the ",(0,i.kt)("a",{parentName:"p",href:"/operations/testing/integration-testing/#abstractgenesistestsupport"},"Testing pages"),"."),(0,i.kt)("p",null,"Once you have set up your configuration, you can start writing tests against our Consolidators."),(0,i.kt)("h2",{id:"writing-tests"},"Writing tests"),(0,i.kt)("p",null,"Let's write some tests for this Consolidator defined below, defined below"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'consolidators {\n    consolidator("CON_ORDER_FROM_TRADES", CONSOLIDATOR_TRADE, ORDER) {\n        config {\n            tableTransient = true\n        }\n\n        select {\n            ORDER {\n                max { price } into MAX_PRICE\n                min { price } into MIN_PRICE\n                sum { price * quantity} into TOTAL_NOTIONAL\n                sum { quantity } into TOTAL_QUANTITY\n                count() into TRADE_COUNT\n            }\n        }\n\n        groupBy { Order.ById(orderId) } into {\n            val start = DateTime(2022, 1, 1, 0, 0)\n            build {\n                val id = groupId.orderId.toInt()\n                Order {\n                    orderId = groupId.orderId\n                    orderDate = start.plusMonths(id % 12)\n                    filledQuantity = 0\n                    counterpartyId = "1"\n                }\n            }\n        }\n\n        onCommit {\n            output.counterpartyId = "ON_COMMIT_TEST"\n        }\n    }\n}\n')),(0,i.kt)("p",null,"Before we write test, add the below method and variable to test class:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'private var lastTradeId = 0\n\nprivate fun trade(\n    orderId: String = "1",\n    price: Double,\n    quantity: Long,\n) = ConsolidatorTrade {\n    this.tradeId = "TR_${lastTradeId++}"\n    this.orderId = orderId\n    this.price = price\n    this.quantity = quantity\n}\n')),(0,i.kt)("h3",{id:"consolidation-test"},"Consolidation test"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'    @Test\n    fun `test consolidate only`() = runBlocking {\n\n        val trade = trade(price = 10.0, quantity = 100)\n        val trade2 = trade(price = 12.0, quantity = 100)\n        entityDb.insert(trade)\n        entityDb.insert(trade2)\n\n        await untilAsserted {\n            runBlocking {\n                val record = entityDb.get(Order.ById("1"))\n                assertEquals(22.0*100, record?.totalNotional)\n            }\n        }\n    }\n')),(0,i.kt)("h3",{id:"oncommit-test"},(0,i.kt)("inlineCode",{parentName:"h3"},"onCommit")," test"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'    @Test\n    fun `fields modified in onCommit block are written to database`() = runBlocking {\n        val trade = trade(price = 10.0, quantity = 100)\n        entityDb.insert(trade)\n\n        await untilAsserted {\n            runBlocking {\n                val record = entityDb.get(Order.ById("1"))\n                assertEquals("ON_COMMIT_TEST", record?.counterpartyId)\n            }\n        }\n    }\n')),(0,i.kt)("h3",{id:"nested-consolidation-test"},"Nested consolidation test"),(0,i.kt)("p",null,"To test this, add the consolidator below to the consolidator definition above:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'    consolidator(ORDER, ORDER_SUMMARY) {\n        select {\n            ORDER_SUMMARY {\n                sum { totalNotional } into TOTAL_NOTIONAL\n                sum { totalQuantity } into TOTAL_QUANTITY\n                sum { tradeCount } into TRADE_COUNT\n            }\n        }\n\n        groupBy { OrderSummary.byGroupId("${orderDate.year}") }\n    }\n')),(0,i.kt)("p",null,"You will see that adding a trade would build ORDER and ORDER_SUMMARY tables."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Test\nfun `test nested consolidation`() = runBlocking {\n        val trade = trade(price = 10.0, quantity = 100)\n        val trade2 = trade(price = 12.0, quantity = 100)\n        entityDb.insert(trade)\n        entityDb.insert(trade2)\n        await untilAsserted {\n            runBlocking {\n                val record = entityDb.get(OrderSummary.byGroupId("2022"))\n                assertEquals(200, record?.totalQuantity)\n                assertEquals(22.0 * 100, record?.totalNotional!!, 0.01)\n            }\n        }\n    }\n')))}g.isMDXComponent=!0}}]);