"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[90233],{19316:function(e,t,n){n.r(t),n.d(t,{assets:function(){return h},contentTitle:function(){return d},default:function(){return g},frontMatter:function(){return r},metadata:function(){return c},toc:function(){return u}});var a=n(87462),i=n(63366),s=(n(67294),n(3905)),l=n(61839),o=["components"],r={title:"Excel to genesis - Quick guide",sidebar_label:"Quick guide",id:"quick-guide",keywords:["getting started","quick start","excel to genesis","quick guide"],tags:["getting started","quick start","excel to genesis","quick guide"]},d=void 0,c={unversionedId:"getting-started/use-cases/excel-to-genesis/quick-guide",id:"version-2022.3/getting-started/use-cases/excel-to-genesis/quick-guide",title:"Excel to genesis - Quick guide",description:"Introduction",source:"@site/versioned_docs/version-2022.3/01_getting-started/05_use-cases/excel-to-genesis/excel-to-genesis.md",sourceDirName:"01_getting-started/05_use-cases/excel-to-genesis",slug:"/getting-started/use-cases/excel-to-genesis/",permalink:"/getting-started/use-cases/excel-to-genesis/",draft:!1,tags:[{label:"getting started",permalink:"/tags/getting-started"},{label:"quick start",permalink:"/tags/quick-start"},{label:"excel to genesis",permalink:"/tags/excel-to-genesis"},{label:"quick guide",permalink:"/tags/quick-guide"}],version:"2022.3",frontMatter:{title:"Excel to genesis - Quick guide",sidebar_label:"Quick guide",id:"quick-guide",keywords:["getting started","quick start","excel to genesis","quick guide"],tags:["getting started","quick start","excel to genesis","quick guide"]},sidebar:"learningSidebar",previous:{title:"Example source data",permalink:"/getting-started/use-cases/loading-feed-data/example-source-data"},next:{title:"The fields dictionary",permalink:"/getting-started/use-cases/excel-to-genesis/Files/guide-11"}},h={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Analyse, adjust and run",id:"analyse-adjust-and-run",level:2},{value:"Analyse the workbook",id:"analyse-the-workbook",level:3},{value:"Structure",id:"structure",level:3},{value:"Functions",id:"functions",level:3},{value:"Column headings",id:"column-headings",level:3},{value:"Convert the workbook",id:"convert-the-workbook",level:3},{value:"Check the files and load the data",id:"check-the-files-and-load-the-data",level:2},{value:"The Fields file",id:"the-fields-file",level:3},{value:"Field types",id:"field-types",level:4},{value:"Long names and illegal characters",id:"long-names-and-illegal-characters",level:4},{value:"The tables file",id:"the-tables-file",level:3},{value:"Unable to parse",id:"unable-to-parse",level:4},{value:"Primary key",id:"primary-key",level:4},{value:"The view file",id:"the-view-file",level:3},{value:"Derived fields",id:"derived-fields",level:4},{value:"The data files",id:"the-data-files",level:3},{value:"Load the data and generate the application",id:"load-the-data-and-generate-the-application",level:2}],p={toc:u};function g(e){var t=e.components,r=(0,i.Z)(e,o);return(0,s.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"introduction"},"Introduction"),(0,s.kt)("p",null,(0,s.kt)("img",{src:n(15481).Z,width:"1437",height:"504"}),"\nAll across the financial sector, you can find operational functions sitting in Excel workbooks. And this sometimes includes functions that are mission-critical."),(0,s.kt)("p",null,"The Genesis low-code platform gives you a way of turning these into applications that can be audited and maintained in a standard and controlled manner. Along the way, you can build in better workflow and usability without heavy IT development effort."),(0,s.kt)("p",null,"Take a look at this quick exercise. We start with an Excel workbook. We finish with a simple but effective server that you can add a front end to. The steps to producing this are:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Do some up-front checks and edits to head off any obvious issues."),(0,s.kt)("li",{parentName:"ol"},"Run the convertor. This creates your data model in Genesis format and creates data files in CSV format."),(0,s.kt)("li",{parentName:"ol"},"Check the fields, tables and views in the data model. Make any necessary adjustments in the spreadsheet and re-run the convertor. (Repeat this step if necessary.)"),(0,s.kt)("li",{parentName:"ol"},"Run a quick sequence of Genesis scripts. This produces the files that contain the business logic and exposes the endpoints."),(0,s.kt)("li",{parentName:"ol"},"Load the csv data files to the database.")),(0,s.kt)("p",null,"That\u2019s it. If you follow those steps, you'll have a working server, ready to be connected to a front end."),(0,s.kt)(l.G,{chart:"graph TD\nA[Excel Spreadsheet] --\x3e B[Analyse - structure, functions, headings]\nB --\x3e C[Adjust]\nC --\x3eD[Convert]\nD --\x3eE[Check generated files for requirements or errors]\nE --\x3e|Modify spreadsheet if required|C\nE --\x3eF[genesisInstall, remap, AppGen, genesisInstall]\nF --\x3eG[Load generated data]",mdxType:"Mermaid"}),(0,s.kt)("p",null,"If you already have a Genesis platform, you can ",(0,s.kt)("a",{parentName:"p",href:"pathname:///file/Excel_Export_Demo.xlsx"},"download the workbook")," and try this for yourself."),(0,s.kt)("h2",{id:"analyse-adjust-and-run"},"Analyse, adjust and run"),(0,s.kt)("p",null,"We are going to start with a workbook that has ten different worksheets."),(0,s.kt)("p",null,(0,s.kt)("img",{src:n(44953).Z,width:"1439",height:"825"})),(0,s.kt)("h3",{id:"analyse-the-workbook"},"Analyse the workbook"),(0,s.kt)("p",null,"When you analyse the workbook, there are some clear things to look out for."),(0,s.kt)("h3",{id:"structure"},"Structure"),(0,s.kt)("p",null,"The content of each sheet in our source workbook is essentially a simple grid."),(0,s.kt)("p",null,"By default, the conversion process will convert each separate worksheet into a table. That works well for the workbook we have here."),(0,s.kt)("h3",{id:"functions"},"Functions"),(0,s.kt)("p",null,"The conversion script will turn the Excel functions in the workbook into Kotlin code for use by your application. The most ",(0,s.kt)("a",{parentName:"p",href:"/server/integration/excel-to-genesis/excel-functions"},"common Excel functions")," are all covered."),(0,s.kt)("h3",{id:"column-headings"},"Column headings"),(0,s.kt)("p",null,"Column names will be turned into field names by the conversion process, which also analyses the content and allocates a field type for each one."),(0,s.kt)("p",null,"Long column headings do not make good field names. So, look at the headings in each sheet and replace the long ones with shorter text that makes better field names. It is quicker to do this at the start than to wait until after the conversion."),(0,s.kt)("p",null,"For example, it would help to change ",(0,s.kt)("strong",{parentName:"p"},"Base Adjusted Collateral Value held by Cpty")," to ",(0,s.kt)("strong",{parentName:"p"},"Cpty_Base_Adj_Collat_Val"),":"),(0,s.kt)("p",null,(0,s.kt)("img",{src:n(11129).Z,width:"772",height:"215"})),(0,s.kt)("h3",{id:"convert-the-workbook"},"Convert the workbook"),(0,s.kt)("p",null,"Once you have adjusted the column headings, you can run the conversion process in your terminal:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"ExcelToGenesis -f euc\\\\ demo\\\\ cash\\\\ mgmt.xlsx -n cash -t 10000\n")),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"The above command assumes you have already set up the genesis platform on your machine and have the ",(0,s.kt)("inlineCode",{parentName:"p"},"ExcelToGenesis")," CLI tool available.")),(0,s.kt)("p",null,"The process is quick. It creates a number of tables. Each table has a numeric ID, starting with the number 10000 that you supplied in the command. The dictionary files produced all include the product name ",(0,s.kt)("strong",{parentName:"p"},"Cash"),", which you supplied with the command."),(0,s.kt)("h2",{id:"check-the-files-and-load-the-data"},"Check the files and load the data"),(0,s.kt)("p",null,"Now you have run the conversion script, let's look at the files that have been created."),(0,s.kt)("p",null,"First, it creates a folder called ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"/home/core/run/cash/cfg")),". Then it writes the dictionary files for the fields, tables and views that make up your data model."),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"The name of the folder above is based on a set-up where the ",(0,s.kt)("inlineCode",{parentName:"p"},"GENESIS_HOME")," environment variable points to ",(0,s.kt)("strong",{parentName:"p"},"/home/core/run"),". If your ",(0,s.kt)("inlineCode",{parentName:"p"},"GENESIS_HOME")," environment variable points to another directory, then that folder will be different. To be safe, always check the output of the ",(0,s.kt)("inlineCode",{parentName:"p"},"ExcelToGenesis")," command as it prints out which files and folders were created.")),(0,s.kt)("p",null,(0,s.kt)("img",{src:n(47451).Z,width:"1106",height:"177"})),(0,s.kt)("p",null,"Following that, it creates a separate folder for the data. In this, it writes separate csv files for each worksheet."),(0,s.kt)("p",null,(0,s.kt)("img",{src:n(44279).Z,width:"1107",height:"309"})),(0,s.kt)("p",null,"In the end, you have 10 files of data: one for each worksheet."),(0,s.kt)("h3",{id:"the-fields-file"},"The Fields file"),(0,s.kt)("p",null,"Inside the file ",(0,s.kt)("inlineCode",{parentName:"p"},"cash-fields-dictionary.kts"),", you can see all the fields that have been defined. Here is the beginning of the file:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'fields {\n    field(name = "ACCOUNT", type = STRING)\n    field(name = "ACCOUNT_CODE", type = STRING)\n    field(name = "ACCOUNT_CURRENCY", type = STRING)\n    field(name = "ACCOUNT_NAME", type = STRING)\n    field(name = "ACCOUNT_NUMBER", type = STRING)\n    field(name = "ACCOUNT_NUMBER_PREFERRED_PER_FORMATTED", type = STRING)\n    field(name = "ACCT_CODE", type = STRING)\n    field(name = "ACTION", type = STRING)\n}\n  \n')),(0,s.kt)("p",null,"You can see the whole file ",(0,s.kt)("a",{parentName:"p",href:"/getting-started/use-cases/excel-to-genesis/Files/guide-5"},"here"),"."),(0,s.kt)("h4",{id:"field-types"},"Field types"),(0,s.kt)("p",null,"The fields are automatically sampled by the command to allocate a type. If it is not sure, it allocates the field as ",(0,s.kt)("inlineCode",{parentName:"p"},"STRING"),". Most of these will be correct, but you will need to handle exceptions."),(0,s.kt)("h4",{id:"long-names-and-illegal-characters"},"Long names and illegal characters"),(0,s.kt)("p",null,"Note that our example contains some long field names. Ideally, these should be shortened before the conversion process, but these long field names still work.\nIllegal characters in field names have been automatically converted. You can see here that the ",(0,s.kt)("strong",{parentName:"p"},"%")," sign has twice been changed to PERCENT in this field name."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'field(name = "DEPOSIT_AMOUNT_ON_MAY_IN_PERCENT_HAIR_CUT_AND_MAX_PERCENT_ON_FUNDS", type = DOUBLE)\n')),(0,s.kt)("p",null,"And yes, it would have been a very good idea to have made the source column heading shorter before we converted the workbook!"),(0,s.kt)("h3",{id:"the-tables-file"},"The tables file"),(0,s.kt)("p",null,"Inside the file ",(0,s.kt)("inlineCode",{parentName:"p"},"cash-tables-dictionary.kts"),", each table created has a name and numeric ID. Each field in a table has a comment showing the column it came from, as well as relevant notes on the function (e.g aggregation). For example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'tables {\n  table (name = "CASH_MGMT_DASHBOARD", id = 10000) {\n    // Source: Cash Mgmt Dashboard\n    ACCT_CODE                                                            // A\n    ACCOUNT_NAME                                                         // C\n    ACCOUNT_NUMBER                                                       // D\n    ACCOUNT_CURRENCY                                                     // E\n    AVAILABLE_BALANCE_DATE                                               // H\n    PREVIOUS_CLOSE_BALANCE                                               // I\n    EXPECTED_MARGIN_INFLOWS                                              // L (aggregation SUMIF(MarginAcccounts,A2,MarginInflows))\n    EXPECTED_MARGIN_OUTFLOWS                                             // M (aggregation SUMIF(MarginAcccounts,A2,MarginOutFlows))\n    NET_AVAILABLE_BALANCE                                                // N (aggregation MIN(F2,J2)+M2)\n    TBILLS_HOLDINGS                                                      // O (aggregation SUMIF(TBillHoldings,A2,TBillSum))\n    CURRENT_FUNDING_POSN                                                 // P unable to parse: IFERROR(VLOOKUP(A2,GLFHoldingsRange,3,FALSE),0); see log for details\n    FUND_HOLDINGS_LEVEL                                                  // R (aggregation SUMIF(FundAcctRande,A2,FundValues))\n    PERCENT_OF_FUNDS_ALL                                                 // S (aggregation R2/Q2)\n    SUGGESTED_ACTION                                                     // T (aggregation IF(K22>10%,IF(J22>F22+M22,"SWEEP","CheckReconciliation"),IF(AND(N22>0,S22<=8%),"SWEEP",IF(AND(N22<0,#REF!> 0),"Redeem","Not Able to recommend"))))\n    DEPOSIT_AMOUNT_ON_MAY_IN_PERCENT_HAIR_CUT_AND_MAX_PERCENT_ON_FUNDS   // U (aggregation IF(N2>=0,MIN(N2*0.8, Q2*0.08-R2),IF(T2="Redeem",-MIN(-N2,#REF!))))\n    MAX_DEPOSIT_AMOUNT_BASED_ON_PERCENT_LIMIT                            // V (aggregation Q2*0.08-R2)\n    POTENTIAL_ADDITIONAL_TBILLS_DEPOSIT                                  // W (aggregation MIN(O2, V2-U2))\n    EXPECTED_BALANCE_AFTER_REDEMPTION_PER_DEPOSIT_CASH_ONLY_NO_TBILLS    // X (aggregation F3-U3)\n    EXPECTED_CASH_BALANCE_PERCENT                                        // Y (aggregation X2/Q2)\n    primaryKey {\n      ACCT_CODE\n    }\n  \n')),(0,s.kt)("p",null,"You can see the whole table's file ",(0,s.kt)("a",{parentName:"p",href:"/getting-started/use-cases/excel-to-genesis/Files/guide-12"},"here"),". Table IDs are sequential from the first one created, starting with the ",(0,s.kt)("inlineCode",{parentName:"p"},"-t")," number supplied when you ran the script."),(0,s.kt)("h4",{id:"unable-to-parse"},"Unable to parse"),(0,s.kt)("p",null,"If the conversion process was not able to parse a field, this is clearly marked by the comment. For example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},"   CURRENT_FUNDING_POSN                                                 // P unable to parse: IFERROR(VLOOKUP(A2,GLFHoldingsRange,3,FALSE),0); see log for details\n")),(0,s.kt)("p",null,"You will have to deal with this, perhaps by creating a consolidator."),(0,s.kt)("h4",{id:"primary-key"},"Primary key"),(0,s.kt)("p",null,"The first column in each worksheet is always used as the primary key for the table.\nThe process is able to handle concatenations in Excel. For example, in the Cash Mvmnt Orders sheet, column A contains a combination of columns B and C:\n",(0,s.kt)("img",{src:n(24111).Z,width:"617",height:"144"})),(0,s.kt)("p",null,"Consequently, the conversion has used both these fields to create the primary key:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'}\n  table (name = "CASH_MVMNT_ORDERS", id = 10002) {\n    // Source: Cash Mvmnt Orders\n    SECURITY               // B\n    ACCOUNT                // C\n    BROKER                 // D\n    ORDERG_PRICE           // G\n    UPDATE_CASH            // H\n    CUSTODY_CASH_ACCOUNT   // J\n    TA_ACCOUTNS            // K\n    TA_REGISTRATION_NAME   // L\n    primaryKey {\n      ACCOUNT\n      SECURITY\n    }\n')),(0,s.kt)("h3",{id:"the-view-file"},"The view file"),(0,s.kt)("p",null,"Inside the file ",(0,s.kt)("inlineCode",{parentName:"p"},"cash-view-dictionary.kts"),", you can see that the script has been able to find where tables need joins. Exceptions are highlighted.\nIn the example here, the first worksheet has been converted. This has created a view with two joins successfully. But it has not been possible to create a third join:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'views {\n  view ("CASH_MGMT_DASHBOARD_VIEW", CASH_MGMT_DASHBOARD) {\n    joins {\n      joining(MAPPING) {\n        on(CASH_MGMT_DASHBOARD.ACCT_CODE to MAPPING.BLOOMBERG_REFERENCE_NO)\n      }\n      joining(CUSTODY_POSITIONS) {\n        on(CASH_MGMT_DASHBOARD.ACCOUNT_NUMBER to CUSTODY_POSITIONS.ACCOUNT_NUMBER_PREFERRED_PER_FORMATTED)\n      }\n      joining(FUND_ADMIN_BALANCES) {\n        // unable to join using: "${"      "}${ACCT_CODE}"\n        on(CASH_MGMT_DASHBOARD.ACCT_CODE to FUND_ADMIN_BALANCES.BALANCE_DATE)\n      }\n      joining(FUND_NAV) {\n        on(CASH_MGMT_DASHBOARD.ACCT_CODE to FUND_NAV.BALANCE_DATE)\n      }\n    }\n  }\n}\n')),(0,s.kt)("p",null,"You can see the complete view file ",(0,s.kt)("a",{parentName:"p",href:"/getting-started/use-cases/excel-to-genesis/Files/guide-13"},"here"),"."),(0,s.kt)("h4",{id:"derived-fields"},"Derived fields"),(0,s.kt)("p",null,"The conversion has created derived fields - simple calculations based on other fields in the view."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'derivedField("FINAL_QUANTITY", DOUBLE) {\n        // F: I2\n        withInput(CASH_MVMNT_ORDERS.ACCOUNT, CASH_MGMT_DASHBOARD.POTENTIAL_ADDITIONAL_TBILLS_DEPOSIT) { ACCOUNT, CASH_MGMT_DASHBOARD_POTENTIAL_ADDITIONAL_TBILLS_DEPOSIT -> \n          if(ACCOUNT == null) return@withInput null\n          if(CASH_MGMT_DASHBOARD_POTENTIAL_ADDITIONAL_TBILLS_DEPOSIT == null) return@withInput null\n          val SUGGESTED_QUANTITY = (CASH_MGMT_DASHBOARD_POTENTIAL_ADDITIONAL_TBILLS_DEPOSIT / 10000.0) * 10000.0\n          SUGGESTED_QUANTITY\n        }\n')),(0,s.kt)("h3",{id:"the-data-files"},"The data files"),(0,s.kt)("p",null,"There is one data file for each of the sheets in the workbook.\nFor example, here is a look at the top of the first sheet in the workbook:"),(0,s.kt)("p",null,(0,s.kt)("img",{src:n(49814).Z,width:"1412",height:"235"})),(0,s.kt)("p",null,"And here are the first ten rows of the data file:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'"ACCT_CODE","ACCOUNT_NAME","ACCOUNT_NUMBER","ACCOUNT_CURRENCY","AVAILABLE_BALANCE_DATE","PREVIOUS_CLOSE_BALANCE","EXPECTED_MARGIN_INFLOWS","EXPECTED_MARGIN_OUTFLOWS","NET_AVAILABLE_BALANCE","TBILLS_HOLDINGS","CURRENT_FUNDING_POSN","FUND_HOLDINGS_LEVEL","PERCENT_OF_FUNDS_ALL","SUGGESTED_ACTION","DEPOSIT_AMOUNT_ON_MAY_IN_PERCENT_HAIR_CUT_AND_MAX_PERCENT_ON_FUNDS","MAX_DEPOSIT_AMOUNT_BASED_ON_PERCENT_LIMIT","POTENTIAL_ADDITIONAL_TBILLS_DEPOSIT","EXPECTED_BALANCE_AFTER_REDEMPTION_PER_DEPOSIT_CASH_ONLY_NO_TBILLS","EXPECTED_CASH_BALANCE_PERCENT"\n"22HS002","HARRISON GEM DEBT TOTAL RET","400515-73293786","USD","2018-06-06T00:00",,"6324131.264","-710000.0","1.5792632929E8","0.0","0.0","0.0","0.0","DEPOSIT","1.26341063432E8","1.3646971152574575E8","0.0",,"0.0"\n"24HS015","HARRISON GEM BOND","400515-73293684","USD","2018-06-06T00:00",,"940000.0","-1524265.8","1.4552071188E8","4.490730003118515E7","0.0","0.0","0.0","DEPOSIT","1.1641656950400001E8","3.827067500084964E8","4.490730003118515E7","3.0628408176E7","0.0079230701035628"\n"21HS001","HARRISON GEM LOC DBT OLAY","400515-73294157","USD","2018-06-06T00:00",,"5870000.0","-3560000.0","1.5986032965E8","1.1378883589836652E9","0.0","1.860230439E7","0.006464116805936957","DEPOSIT","1.2788826372000001E8","2.662978900060171E8","1.3840962628601706E8","3.553206592999999E7","0.012347041512300127"\n"31HS091","HARRISON GLOBAL HIGH YIELD BOND US FIXE","400515-73423766","USD","2018-06-06T00:00","2.818183719E7","0.0","-885648.28","9234858.05","0.0","0.0","2.256239879E7","0.023281613162053506","DEPOSIT","7387886.440000001","7.33792984052206E7","0.0","2732619.8899999987","0.0028197267404966907"\n"21HS118","HARRISON GEM LOCAL CCY RATES","400515-74216790","USD","2018-06-06T00:00","8.7873232E7","0.0","-220000.0","6811542.99","1.9983200001186796E7","0.0","0.0","0.0","DEPOSIT","5449234.392000001","2.228452513942915E7","1.6835290747429147E7","1582308.5979999993","0.007029476743250574"\n"30HS123","HARRISON-GB CORP BD (US SL)-AMEU","400515-74429794","USD","2018-06-06T00:00","3223323.0","0.0","0.0","7307726.11","0.0","0.0","85660.62000000011","6.451190070137826E-5","DEPOSIT","5846180.888","1.3136917620546082E8","0.0","1461545.4519999996","0.0011007050272339245"\n"30HS056","HARRISON HIGH INCOME-EMD","400515-73294790","USD","2018-06-06T00:00","1.468687899E7","0.0","-320000.0","1.477901352E7","0.0","0.0","0.0","0.0","DEPOSIT","1.1823210816E7","4.3218194548963524E7","0.0","3275802.704","0.007503887450193767"\n"21HS184","HARRISON GEM LOC DEBT EX-ASIA","400515-76690541","USD","2018-06-06T00:00","1.007845887E7","0.0","0.0","1.008958349E7","0.0","0.0","0.0","0.0","DEPOSIT","1023728.0723177514","1266863.4894932173","0.0","9065855.41768225","0.7084580886529274"\n"37HS191","HARRISON GLB CORP FX T BD 2020","400515-77050130","USD","2018-06-06T00:00","62024.18","0.0","0.0","-176715.13","0.0","0.0","0.0","0.0","DEPOSIT","false","2.9759165768984433E7","0.0","-176715.13","-5.878793110603057E-4"\n')),(0,s.kt)("h2",{id:"load-the-data-and-generate-the-application"},"Load the data and generate the application"),(0,s.kt)("p",null,"After you have checked the files generated and addressed any issues in the fields, tables and views, you can run the sequence of commands to load the data and generate an application."),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Run ",(0,s.kt)("inlineCode",{parentName:"li"},"genesisInstall")," to check all the config files and prepare the application for the current environment."),(0,s.kt)("li",{parentName:"ol"},"Run ",(0,s.kt)("inlineCode",{parentName:"li"},"remap --commit")," to set any changes to the database (modifications to fields, tables and views)."),(0,s.kt)("li",{parentName:"ol"},"Run ",(0,s.kt)("inlineCode",{parentName:"li"},"SendIt -a")," to load the data from all the generated data files into the database."),(0,s.kt)("li",{parentName:"ol"},"Run ",(0,s.kt)("inlineCode",{parentName:"li"},"AppGen")," to generate Event Handlers, Request Servers and Data Servers for all the tables. For example:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"    AppGen -n cash -p 10000\n")),(0,s.kt)("p",null,"This creates an application called ",(0,s.kt)("strong",{parentName:"p"},"Cash")," with:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"the kts files for the  ",(0,s.kt)("a",{parentName:"li",href:"/getting-started/use-cases/excel-to-genesis/Files/guide-5"},"Event Handler"),", ",(0,s.kt)("a",{parentName:"li",href:"/getting-started/use-cases/excel-to-genesis/Files/guide-6"},"Request Server")," and ",(0,s.kt)("a",{parentName:"li",href:"/getting-started/use-cases/excel-to-genesis/Files/guide-7"},"Data Server")),(0,s.kt)("li",{parentName:"ul"},"the ",(0,s.kt)("a",{parentName:"li",href:"/getting-started/use-cases/excel-to-genesis/Files/guide-10"},"service definitions")),(0,s.kt)("li",{parentName:"ul"},"the ",(0,s.kt)("a",{parentName:"li",href:"/getting-started/use-cases/excel-to-genesis/Files/guide-9"},"process definitions"))),(0,s.kt)("p",null,(0,s.kt)("img",{src:n(86270).Z,width:"421",height:"116"})),(0,s.kt)("p",null,"Run ",(0,s.kt)("inlineCode",{parentName:"p"},"genesisInstall")," again to install these changes."),(0,s.kt)("p",null,"You now have a basic server that you can access from a web front end. The Event Handler, the Request Server and the Data Server provide only the simplest functions, but the data is exposed so that a front end can be created and connected. The Event Handler, for example, provides very simple insert, modify and delete events."),(0,s.kt)("p",null,"Of course, this is really just a beginning - you can go into the code and introduce all kinds of sophistication."))}g.isMDXComponent=!0},11129:function(e,t,n){t.Z=n.p+"assets/images/adjust-field-name-8f6b1db7a6bbca7407360d7375505b40.png"},86270:function(e,t,n){t.Z=n.p+"assets/images/built-by-appgen-dc406fc6ef3cb636bf8592f33882f960.png"},24111:function(e,t,n){t.Z=n.p+"assets/images/concat-xls-e030d9e7f369ae6b79cddec552d7e08c.png"},15481:function(e,t,n){t.Z=n.p+"assets/images/intro3-xtg-c9f6a2fa8ccbd8e38e43e80c5a1ce324.png"},44953:function(e,t,n){t.Z=n.p+"assets/images/narrow-xls-2a2a90b3eea4df9a15e9734916126e42.png"},49814:function(e,t,n){t.Z=n.p+"assets/images/top-dashboard-1903817c2eb4aec192bcdf91fc853d06.png"},47451:function(e,t,n){t.Z=n.p+"assets/images/xtg2-76b14517a6c8e24434b93da8990dd2d1.png"},44279:function(e,t,n){t.Z=n.p+"assets/images/xtg3-87f30bfc4443684a5bccc1fab098dd73.png"}}]);