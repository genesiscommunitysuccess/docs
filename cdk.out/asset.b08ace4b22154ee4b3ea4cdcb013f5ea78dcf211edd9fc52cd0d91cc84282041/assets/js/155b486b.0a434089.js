"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[52635],{94616:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return d},default:function(){return m},frontMatter:function(){return l},metadata:function(){return o},toc:function(){return c}});var a=n(87462),s=n(63366),i=(n(67294),n(3905)),r=(n(61839),["components"]),l={title:"Modules - Inside an Event Handler",sidebar_label:"Inside an Event Handler",id:"inside-an-event-handler",keywords:["getting started","basics","modules","event handler"],tags:["getting started","basics","modules","event handler"]},d=void 0,o={unversionedId:"getting-started/learn-the-basics/modules/inside-an-event-handler",id:"getting-started/learn-the-basics/modules/inside-an-event-handler",title:"Modules - Inside an Event Handler",description:"Applications must respond immediately to different types of input: inputs from users, messages from other systems, market-data updates and internally calculated analytic signals.  These inputs are events.",source:"@site/docs/01_getting-started/01_learn-the-basics/07_modules/03_inside-an-event-handler.md",sourceDirName:"01_getting-started/01_learn-the-basics/07_modules",slug:"/getting-started/learn-the-basics/modules/inside-an-event-handler",permalink:"/next/getting-started/learn-the-basics/modules/inside-an-event-handler",draft:!1,tags:[{label:"getting started",permalink:"/next/tags/getting-started"},{label:"basics",permalink:"/next/tags/basics"},{label:"modules",permalink:"/next/tags/modules"},{label:"event handler",permalink:"/next/tags/event-handler"}],version:"current",sidebarPosition:3,frontMatter:{title:"Modules - Inside an Event Handler",sidebar_label:"Inside an Event Handler",id:"inside-an-event-handler",keywords:["getting started","basics","modules","event handler"],tags:["getting started","basics","modules","event handler"]},sidebar:"learningSidebar",previous:{title:"Inside a Request Server",permalink:"/next/getting-started/learn-the-basics/modules/inside-a-request-server"},next:{title:"Genesis components: introduction",permalink:"/next/getting-started/learn-the-basics/Components/introduction"}},u={},c=[],p={toc:c};function m(e){var t=e.components,n=(0,s.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Applications must respond immediately to different types of input: inputs from users, messages from other systems, market-data updates and internally calculated analytic signals.  These inputs are events."),(0,i.kt)("p",null,"Your application needs to respond to each event with relevant actions. "),(0,i.kt)("p",null,"As a rough guide, many of the tables you have created need Insert, Modify and Delete events, so that you can specify the actions that these events require."),(0,i.kt)("p",null,"You specify the actions in a single Kotlin script file. If your application is called bravo, then the file would be called ",(0,i.kt)("strong",{parentName:"p"},"bravo-eventhandler.kts"),"."),(0,i.kt)("p",null,"Here is a simple example of an Event Handler file. It defines a single eventHandler. Within the eventHandler, the onCommit codeblock inserts a counterparty into the database, using our internal API, the entityDb."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"eventHandler {\n    eventHandler<Counterparty> {\n        onCommit { event ->\n            val counterparty = event.details\n            entityDb.insert(counterparty)\n            ack()\n        }\n    }\n}\n")),(0,i.kt)("p",null,"Your application will certainly have many more eventHandler codeblocks inside the ",(0,i.kt)("strong",{parentName:"p"},"eventhandler.kts")," file. But, you have just seen the basics."))}m.isMDXComponent=!0}}]);