"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[6912],{51433:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return o},default:function(){return g},frontMatter:function(){return i},metadata:function(){return m},toc:function(){return u}});var n=a(87462),r=a(63366),s=(a(67294),a(3905)),l=(a(61839),["components"]),i={title:"Gateways and Streamers - Streamer Client",sidebar_label:"Streamer Client",id:"streamer-client",keywords:["server","integration","gateways","streamers","streamer client"],tags:["server","integration","gateways","streamers","streamer client"]},o=void 0,m={unversionedId:"server/integration/gateways-and-streamers/streamer-client",id:"server/integration/gateways-and-streamers/streamer-client",title:"Gateways and Streamers - Streamer Client",description:"This page shows you how to create a Streamer Client. It also looks at the syntax of the two types of Streamer Client that are available:",source:"@site/docs/03_server/10_integration/04_gateways-and-streamers/03_streamer-client.md",sourceDirName:"03_server/10_integration/04_gateways-and-streamers",slug:"/server/integration/gateways-and-streamers/streamer-client",permalink:"/next/server/integration/gateways-and-streamers/streamer-client",draft:!1,tags:[{label:"server",permalink:"/next/tags/server"},{label:"integration",permalink:"/next/tags/integration"},{label:"gateways",permalink:"/next/tags/gateways"},{label:"streamers",permalink:"/next/tags/streamers"},{label:"streamer client",permalink:"/next/tags/streamer-client"}],version:"current",sidebarPosition:3,frontMatter:{title:"Gateways and Streamers - Streamer Client",sidebar_label:"Streamer Client",id:"streamer-client",keywords:["server","integration","gateways","streamers","streamer client"],tags:["server","integration","gateways","streamers","streamer client"]},sidebar:"serverModulesSidebar",previous:{title:"Streamer",permalink:"/next/server/integration/gateways-and-streamers/streamer"},next:{title:"FIX-Xlator",permalink:"/next/server/integration/gateways-and-streamers/fix-xlator"}},p={},u=[{value:"Creating a Streamer Client",id:"creating-a-streamer-client",level:2},{value:"Properties",id:"properties",level:3},{value:"Types of Streamer Client",id:"types-of-streamer-client",level:2},{value:"The onMessage block",id:"the-onmessage-block",level:2}],c={toc:u};function g(e){var t=e.components,a=(0,r.Z)(e,l);return(0,s.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"This page shows you how to create a Streamer Client. It also looks at the syntax of the two types of Streamer Client that are available:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"table or view entity"),(0,s.kt)("li",{parentName:"ul"},"GenesisSet")),(0,s.kt)("h2",{id:"creating-a-streamer-client"},"Creating a Streamer Client"),(0,s.kt)("p",null,"To create a Streamer Client:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Add the configuration for the Streamer Client process to the ",(0,s.kt)("em",{parentName:"li"},"applicationName"),"-",(0,s.kt)("strong",{parentName:"li"},"processes.xml")," file:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-xml"},'<process name="POSITION_APP_STREAMER_CLIENT">\n    <start>true</start>\n    <options>-Xmx128m -DXSD_VALIDATE=false</options>\n    <module>genesis-pal-streamerclient</module>\n    <package>global.genesis.streamerclient.pal</package>\n    <script>position_app-streamer-client.kts<\/script>\n    <language>pal</language>\n</process>\n')),(0,s.kt)("p",null,"For more information on the above process tags, see the page on ",(0,s.kt)("a",{parentName:"p",href:"/next/server/data-server/configuring-runtime"},"configuring runtime processes"),"."),(0,s.kt)("ol",{start:2},(0,s.kt)("li",{parentName:"ol"},"Create a Kotlin script file named ",(0,s.kt)("strong",{parentName:"li"},"{app-name}-streamer-client.kts")," under ",(0,s.kt)("strong",{parentName:"li"},"jvm/{app-name}-script-config"),". Add the following information:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"A Streamer Client name"),(0,s.kt)("li",{parentName:"ul"},"A Streamer data source process and stream name"),(0,s.kt)("li",{parentName:"ul"},"One or more ",(0,s.kt)("inlineCode",{parentName:"li"},"onMessage")," tags")))),(0,s.kt)("p",null,"The simplest streamer-client definition is:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'streamerClients {\n    streamerClient(clientName = "QUOTE_RESPONSE") {\n        dataSource(processName = "POSITION_APP-STREAMER", sourceName = "ORDERS_OUT")\n            onMessage {\n                send("QUOTE_EVENT_HANDLER", "QUOTE_UPDATE_EVENT")\n            }\n    }\n}\n')),(0,s.kt)("p",null,"This example takes a message from a Streamer and sends it to ",(0,s.kt)("inlineCode",{parentName:"p"},"QUOTE_EVENT_HANDLER")," as a ",(0,s.kt)("inlineCode",{parentName:"p"},"QUOTE_UPDATE_EVENT"),"."),(0,s.kt)("h3",{id:"properties"},"Properties"),(0,s.kt)("p",null,"You can also specify the following optional parameters in a Streamer Client:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"isReplayable"),". This flag determines if the stream is replayable. Default value is ",(0,s.kt)("inlineCode",{parentName:"p"},"false"),".")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"eventHandlerBuffer"),". This specifies how many messages to buffer for the Event Handler. If the Event Handler fails to respond after this number of messages is reached, the Streamer stops sending messages. Default value is 50.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"sentWarningRange"),". This specifies a range that controls the status of the Streamer process.  If an Event Handler takes too long to respond, the process status will go to either warning or error.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"receiveWarningRange"),". This specifies a range that controls the status of the Streamer process.  If an Event Handler takes too long to respond, the process status will go to either warning or error."))),(0,s.kt)("h2",{id:"types-of-streamer-client"},"Types of Streamer Client"),(0,s.kt)("p",null,"There are two types of Streamer Client:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Table or View entity Streamer Client")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'// builds a type safe QUOTES streamer client\nstreamerClient(clientName = "{name}", source = QUOTES) { ... }\n')),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"GenesisSet streamer client")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'// builds a GenesisSet streamer client\nstreamerClient(clientName = "{name}") { ... }\n')),(0,s.kt)("p",null,"You can also define a selective Streamer Client. In the ",(0,s.kt)("inlineCode",{parentName:"p"},"onMessage")," block, you can set the Streamer to request only specific messages. The example below enables you to handle VDX quotes one way and MSFT quotes another:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'streamerClient(clientName = "CLIENT", selectOn = QUOTES.SYMBOL) {\n    onMessage(where = "VDX") { ... }\n    onMessage(where = "MSFT") { ... }\n}\n')),(0,s.kt)("p",null,"For a GenesisSet Streamer Client, the syntax can be one of the following:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'// use the Fields object:\nstreamerClient(clientName = "CLIENT", selectionField = Fields.SYMBOL) { ... }\n\n// specify a field and type\nstreamerClient(clientName = "CLIENT", selectionField = "SYMBOL", type = INTEGER) { ... }\n\n// if no type is specified it will default to STRING\nstreamerClient(clientName = "CLIENT", selectionField = "SYMBOL") { ... }\n')),(0,s.kt)("h2",{id:"the-onmessage-block"},"The onMessage block"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"onMessage")," tag defines what the Streamer Client does with your message. It has two operations:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"where"),(0,s.kt)("li",{parentName:"ul"},"send")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Where")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"where")," tag enables you to make the action conditional. This operation has one parameter, the type of Streamer Client. This can be:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"a table or view entity"),(0,s.kt)("li",{parentName:"ul"},"a GenesisSet\nThe operation must return a Boolean.")),(0,s.kt)("p",null,"Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},"where { quotes ->\n    quotes.price > BigDecimal.ZERO\n}\n")),(0,s.kt)("p",null,"Another example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'where { quotes ->\n    quote.getBigDecimal("QUOTE", BigDecimal.ZERO) > BigDecimal.ZERO\n}\n')),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Send")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"send")," tag allows directs and optionally formats the outgoing message.\nIt requires:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"a target process"),(0,s.kt)("li",{parentName:"ul"},"a message type\nThe ",(0,s.kt)("inlineCode",{parentName:"li"},"onMessage")," block must have at least one ",(0,s.kt)("inlineCode",{parentName:"li"},"send")," block.")),(0,s.kt)("p",null,"For example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'send(targetProcess = "QUOTE_HANDLER", messageType = "QUOTE_EVENT")\n')),(0,s.kt)("p",null,"This will send the full content of the Streamer message on to the target."),(0,s.kt)("p",null,"In addition, for entity Streamers, you can format the message in the same way as you would define the output of a view, Data Server or request reply. Use ",(0,s.kt)("inlineCode",{parentName:"p"},"sendFormatted"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'sendFormatted("QUOTE_HANDLER", "QUOTE_EVENT") {\n    QUOTES.SYMBOL\n    QUOTES.PRICE\n}\n')),(0,s.kt)("p",null,"Finally, you can craft the message from scratch."),(0,s.kt)("p",null,"This example uses just the message as a parameter:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'send("QUOTE_HANDLER", "QUOTE_EVENT") { quote ->\n    genesisSet {\n        "SYMBOL" with quote.symbol\n        ...\n    }\n}\n')),(0,s.kt)("p",null,"This example uses the message and a GenesisSet as parameters:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'send("QUOTE_HANDLER", "QUOTE_EVENT") { quote, set ->\n    set.setString("SYMBOL", quote.symbol)\n}\n')),(0,s.kt)("p",null,"When using this example, you need to specify both parameters, (quote -> or quote, set ->). The default parameter does not work in this case."))}g.isMDXComponent=!0}}]);