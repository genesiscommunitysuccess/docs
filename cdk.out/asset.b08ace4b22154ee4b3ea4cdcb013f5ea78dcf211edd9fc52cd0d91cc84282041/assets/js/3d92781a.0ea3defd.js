"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[51057],{45718:function(e){e.exports=JSON.parse('{"label":"database","permalink":"/tags/database","allTagsPath":"/tags","count":55,"items":[{"id":"version-2022.3/database/api-reference/authorisation-api","title":"API Reference - Authorisation API","description":"The authorisation API consists of two main classes that enable you to add permission checks to your custom component.","permalink":"/database/api-reference/authorisation-api"},{"id":"version-2022.3/database/api-reference/dependency-injection","title":"API Reference - Dependency Injection","description":"Genesis supports some of the key annotations from javax.annotation and javax.inject, defined in Java Platform Enterprise Edition, using Google Guice as the internal dependency injection mechanism. In addition, Genesis provides some of its own annotations.","permalink":"/database/api-reference/dependency-injection"},{"id":"version-2022.3/database/api-reference/event-handler-api","title":"API Reference - Event Handler API","description":"In most cases, you will create Event Handlers in a kts file using GPAL. This offers a method with succinct code and a good degree of flexibility.","permalink":"/database/api-reference/event-handler-api"},{"id":"version-2022.3/database/api-reference/network-api","title":"API Reference - Network API","description":"Use these APIs to send and receive messages between micro-services.","permalink":"/database/api-reference/network-api"},{"id":"version-2022.3/database/api-reference/overview","title":"API Reference - Overview","description":"Genesis is a low-code solution for financial markets. We try to provide as much of the platform via GPAL as possible, while allowing you to extend the platform with more powerful custom components and functionality.","permalink":"/database/api-reference/overview"},{"id":"version-2022.3/database/api-reference/service-provider-api","title":"API Reference - Service provider API","description":"In this page, we look at details of the functions that enable you to interact with the Genesis services that can be specified in the\xa0service-definition.xml\xa0file.","permalink":"/database/api-reference/service-provider-api"},{"id":"version-2022.3/database/api-reference/system-definition-api","title":"API Reference - System definition API","description":"The\xa0system-definition\xa0file is the basis of all configurations. In this page, we describe the different functions available to get properties specified in the system-definition.kts file. Default methods have implementations to provide default values for each property.","permalink":"/database/api-reference/system-definition-api"},{"id":"version-2022.3/database/data-structures/data-structures","title":"Data Structures","description":"The Genesis database supports:","permalink":"/database/data-structures/data-structures"},{"id":"version-2022.3/database/data-structures/indices","title":"Data Structures - Indices","description":"Indices are key components of any database. In the Genesis low-code platform, they are mandatory when you define a  table. Every table should have at least one index, the primary key. This is vital for controlling how data is read by an application.","permalink":"/database/data-structures/indices"},{"id":"version-2022.3/database/data-structures/tables","title":"Data Structures - Tables","description":"A table is a data structure that organises data into rows and columns.","permalink":"/database/data-structures/tables"},{"id":"version-2022.3/database/data-structures/views","title":"Data Structures - Views","description":"Views are defined in the -view-dictionary.kts files as discussed","permalink":"/database/data-structures/views"},{"id":"version-2022.3/database/data-types/data-types","title":"Data types","description":"The following objects and classes encapsulate your data within your Genesis application, so that you can process it and add value as you see fit.","permalink":"/database/data-types/data-types"},{"id":"version-2022.3/database/data-types/dbentity","title":"Data types - DbEntity","description":"DbEntity is the common interface implemented by table entities and view entities.","permalink":"/database/data-types/dbentity"},{"id":"version-2022.3/database/data-types/dbrecord","title":"Data types - DbRecord","description":"Using\xa0DbRecord\xa0instead of\xa0entities will circumvent compile-time validation of database interactions. This means that errors might not appear until runtime or might lead to unexpected results.","permalink":"/database/data-types/dbrecord"},{"id":"version-2022.3/database/data-types/index-entities","title":"Data types - Index entities","description":"Index entities are nested in\xa0table\xa0and\xa0view entities. The name will be based on the index name. The entity can be constructed by passing in the field values in order. The first field of the index must always be provided, and the others are optional.","permalink":"/database/data-types/index-entities"},{"id":"version-2022.3/database/data-types/table-entities","title":"Data types - Table entities","description":"Table entities are classes generated by Genesis that match your applications\'s\xa0data model. The generated entity name is based on the table name, but will be camel case.","permalink":"/database/data-types/table-entities"},{"id":"version-2022.3/database/data-types/views-entities","title":"Data types - Views entities","description":"View entities are classes generated by Genesis that match your application\'s\xa0data model. The name of the view entity that is generated will be the name specified in its definition, but it is converted from snake case to camel case; for example,\xa0VIEW_NAME\xa0becomes\xa0ViewName. All table/view entities implement a common interface called\xa0DbEntity.","permalink":"/database/data-types/views-entities"},{"id":"version-2022.3/database/database-concepts/database-concepts","title":"Database concepts","description":"This section provides you with details about the three types of operation that you can perform on the database.","permalink":"/database/database-concepts/database-concepts"},{"id":"version-2022.3/database/database-concepts/read","title":"Database concepts - Read","description":"Genesis supports a number of different read operations. Although the specifics vary between the different\xa0interfaces, the underlying principles remain the same. This page explains these principles, without going into specific calls.","permalink":"/database/database-concepts/read"},{"id":"version-2022.3/database/database-concepts/subscribe","title":"Database concepts - Subscribe","description":"Subscribe operations enable code to react to database changes, rather than polling for changes. Code can either listen to changes, or use a combined read/subscribe operation. These mixed read/subscribe operations are useful.","permalink":"/database/database-concepts/subscribe"},{"id":"version-2022.3/database/database-concepts/write","title":"Database concepts - Write","description":"The following database operations are available:","permalink":"/database/database-concepts/write"},{"id":"version-2022.3/database/database-interface/database-interface","title":"Database interface","description":"Introduction  | EntityDb |  Generated repositories | RxDb","permalink":"/database/database-interface/database-interface"},{"id":"version-2022.3/database/database-interface/entity-db","title":"Database interface - Entity Db","description":"Introduction  | EntityDb |  Generated repositories | RxDb","permalink":"/database/database-interface/entity-db"},{"id":"version-2022.3/database/database-interface/generated-repositories","title":"Database interface - Generated repositories","description":"Introduction  | EntityDb |  Generated repositories | RxDb","permalink":"/database/database-interface/generated-repositories"},{"id":"version-2022.3/database/database-interface/rxdb","title":"Database interface - RxDb","description":"Introduction  | EntityDb |  Generated repositories | RxDb","permalink":"/database/database-interface/rxdb"},{"id":"version-2022.3/database/database-technology/aerospike","title":"Database Technology - Aerospike","description":"Genesis supports\xa0Aerospike. To connect to Aerospike, use the\xa0system definition items listed below.","permalink":"/database/database-technology/aerospike"},{"id":"version-2022.3/database/database-technology/faqs","title":"Database Technology - FAQs","description":"Frequently asked questions","permalink":"/database/database-technology/faqs"},{"id":"version-2022.3/database/database-technology/foundationdb","title":"Database Technology - FoundationDb","description":"Genesis provides two database solutions built on FoundationDB.","permalink":"/database/database-technology/foundationdb"},{"id":"version-2022.3/database/database-technology/overview","title":"Database Technology - Overview","description":"Your Genesis application data model can be configured without any concern about the database technology used to store the model and the data.","permalink":"/database/database-technology/overview"},{"id":"version-2022.3/database/database-technology/sql","title":"Database Technology - SQL","description":"SQL support covers PostgreSQL, MS SQL Server and Oracle.","permalink":"/database/database-technology/sql"},{"id":"version-2022.3/database/fields-tables-views/fields/fields-advanced","title":"Fields - advanced","description":"Modularity","permalink":"/database/fields-tables-views/fields/fields-advanced"},{"id":"version-2022.3/database/fields-tables-views/fields/fields-basics","title":"Fields - basics","description":"Field types","permalink":"/database/fields-tables-views/fields/fields-basics"},{"id":"version-2022.3/database/fields-tables-views/fields/fields-examples","title":"Fields - examples","description":"There is no complexity to a fields-dictionary.kts file.","permalink":"/database/fields-tables-views/fields/fields-examples"},{"id":"version-2022.3/database/fields-tables-views/genesisDao","title":"Generating DAOs","description":"Introduction  | Fields  | Tables  |","permalink":"/database/fields-tables-views/genesisDao"},{"id":"version-2022.3/database/helper-classes/helper-classes","title":"Helper classes","description":"Helper classes allow you to access common functionality and domain state within the Genesis platform.","permalink":"/database/helper-classes/helper-classes"},{"id":"version-2022.3/database/helper-classes/modify-details","title":"Helper classes - ModifyDetails","description":"Entity Modify details","permalink":"/database/helper-classes/modify-details"},{"id":"version-2022.3/database/helper-classes/write-result","title":"Helper classes - WriteResult","description":"Entity write result","permalink":"/database/helper-classes/write-result"},{"id":"version-2022.3/getting-started/learn-the-basics/building-the-database","title":"Learn the Basics - Building the database","description":"Once you are happy with your data model, you can build your database.","permalink":"/getting-started/learn-the-basics/building-the-database"},{"id":"version-2022.3/operations/clustering/clusters","title":"Operations - Clusters","description":"The Genesis low-code platform is highly resilient and easy to cluster for a High Availability (HA) setup. This area takes you through the steps required to establish a HOT-HOT setup.","permalink":"/operations/clustering/clusters"},{"id":"version-2022.3/operations/commands/server-commands","title":"Operations - Server Commands","description":"Genesis has numerous built-in commands that have their own individual functions.","permalink":"/operations/commands/server-commands"},{"id":"version-2022.3/operations/server-setup/config-management","title":"Server Setup - Config Management","description":"This document describes the recommended uses of config management with Genesis frameworks.  It is written for a reader with some","permalink":"/operations/server-setup/config-management"},{"id":"version-2022.3/operations/server-setup/host-preparation","title":"Server Setup - Host Preparation","description":"This document describes preparing a host to run applications built with Genesis frameworks.  It is written for a","permalink":"/operations/server-setup/host-preparation"},{"id":"version-2022.3/operations/server-setup/initial-application-install","title":"Server Setup - Initial Application Install","description":"This document describes installing an application built with Genesis frameworks.  It is written for a reader with some","permalink":"/operations/server-setup/initial-application-install"},{"id":"version-2022.3/database/helper-classes/subscription/overview","title":"Subscription -  - Overview","description":"When database updates are distributed, they are wrapped in helper classes:","permalink":"/database/helper-classes/subscription/overview"},{"id":"version-2022.3/database/helper-classes/subscription/bulk","title":"Subscription - Bulk","description":"Bulk objects are published to listeners of mixed read/subscribe operations. Like\xa0Record Update,\xa0Bulk\xa0is a\xa0sealed Kotlin class. It has the following class hierarchy:","permalink":"/database/helper-classes/subscription/bulk"},{"id":"version-2022.3/database/helper-classes/subscription/record-update","title":"Subscription - Record update","description":"Generic record update","permalink":"/database/helper-classes/subscription/record-update"},{"id":"version-2022.3/database/fields-tables-views/tables/tables-advanced","title":"Tables - advanced","description":"Subtables","permalink":"/database/fields-tables-views/tables/tables-advanced"},{"id":"version-2022.3/database/fields-tables-views/tables/tables-basics","title":"Tables - basics","description":"In your application\'s tables-dictionary.kts file, you need to define every table that your application needs. Let us go back to the very simple example definition that we started with. This contains a single table with three fields in it.","permalink":"/database/fields-tables-views/tables/tables-basics"},{"id":"version-2022.3/database/fields-tables-views/tables/tables-examples","title":"Tables - examples","description":"Our example below shows an application\'s tables-dictionary.kts file containing two tables. The first contains trades and the second contains simple position information for each instrument.","permalink":"/database/fields-tables-views/tables/tables-examples"},{"id":"version-2022.3/database/types-of-api/types-of-api","title":"Types of API","description":"This section outlines two types of API for interacting with the database:","permalink":"/database/types-of-api/types-of-api"},{"id":"version-2022.3/database/types-of-api/async","title":"Types of API - Async API","description":"Async |","permalink":"/database/types-of-api/async"},{"id":"version-2022.3/database/types-of-api/rxjava","title":"Types of API - RxJava API","description":"Async |","permalink":"/database/types-of-api/rxjava"},{"id":"version-2022.3/database/fields-tables-views/views/views-advanced","title":"Views - advanced","description":"Fields","permalink":"/database/fields-tables-views/views/views-advanced"},{"id":"version-2022.3/database/fields-tables-views/views/views-basics","title":"Views - basics","description":"A view definition is made up of joins and fields.","permalink":"/database/fields-tables-views/views/views-basics"},{"id":"version-2022.3/database/fields-tables-views/views/views-examples","title":"Views - examples","description":"Here is an example view-dictionary.kts from our tutorial.","permalink":"/database/fields-tables-views/views/views-examples"}]}')}}]);