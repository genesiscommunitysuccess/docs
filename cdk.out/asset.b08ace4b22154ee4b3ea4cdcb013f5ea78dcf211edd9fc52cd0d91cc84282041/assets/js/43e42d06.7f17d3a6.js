"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[11513],{89336:function(e,r,a){a.r(r),a.d(r,{assets:function(){return u},contentTitle:function(){return d},default:function(){return c},frontMatter:function(){return l},metadata:function(){return o},toc:function(){return v}});var n=a(87462),t=a(63366),s=(a(67294),a(3905)),i=(a(61839),["components"]),l={title:"Data Server - Examples",sidebar_label:"Examples",id:"examples",keywords:["server","data server","dataserver","examples"],tags:["server","data server","dataserver","examples"]},d=void 0,o={unversionedId:"server/data-server/examples",id:"server/data-server/examples",title:"Data Server - Examples",description:"Enriching a query",source:"@site/docs/03_server/02_data-server/04_examples.md",sourceDirName:"03_server/02_data-server",slug:"/server/data-server/examples",permalink:"/next/server/data-server/examples",draft:!1,tags:[{label:"server",permalink:"/next/tags/server"},{label:"data server",permalink:"/next/tags/data-server"},{label:"dataserver",permalink:"/next/tags/dataserver"},{label:"examples",permalink:"/next/tags/examples"}],version:"current",sidebarPosition:4,frontMatter:{title:"Data Server - Examples",sidebar_label:"Examples",id:"examples",keywords:["server","data server","dataserver","examples"],tags:["server","data server","dataserver","examples"]},sidebar:"serverModulesSidebar",previous:{title:"Advanced",permalink:"/next/server/data-server/advanced"},next:{title:"Configuring runtime",permalink:"/next/server/data-server/configuring-runtime"}},u={},v=[{value:"Enriching a query",id:"enriching-a-query",level:2}],p={toc:v};function c(e){var r=e.components,a=(0,t.Z)(e,i);return(0,s.kt)("wrapper",(0,n.Z)({},p,a,{components:r,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"enriching-a-query"},"Enriching a query"),(0,s.kt)("p",null,"Enriching data using the calling users context is a great way to build rich experiences. Below, we have the positions table and the favourite trades table. We are able to derive a field on our query by bringing the user's favourite trades into the context."),(0,s.kt)("p",null,"Note the casing of ",(0,s.kt)("inlineCode",{parentName:"p"},"FAVOURITE_TRADE")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"FavouriteTrade"),". The all-caps version denotes the table definition, whereas the camel-case version denotes the generated data access object (DAO)."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'query(POSITION) {\n    enrich(FAVOURITE_TRADE) {\n        join { userName, row -> FavouriteTrade.byUserName(userName) }\n        fields {\n            derivedField("IS_FAVOURITE", BOOLEAN) { row, favourite ->\n                row.code == favourite?.code\n            }\n        }\n    }\n}\n')),(0,s.kt)("p",null,"To be able to use the ",(0,s.kt)("inlineCode",{parentName:"p"},"byUserName")," function over the FavouriteTrade DAO, you must add an index over the USER_NAME (a platform-level field)."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'table(name = "POSITION", id = 1600) {\n    sequence(POSITION_ID, "PS")\n    CODE\n    CREATED_AT\n    PRICE\n\n    primaryKey {\n        POSITION_ID\n    }\n}\ntable(name = "FAVOURITE_TRADE", id = 1601) {\n    sequence(FAVOURITE_ID, "FA")\n    CODE\n    USER_NAME\n\n    primaryKey {\n        FAVOURITE_ID\n    }\n    indices {\n        unique {\n            USER_NAME\n        }\n    }\n}\n')))}c.isMDXComponent=!0}}]);