"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[14745],{45874:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return d},default:function(){return m},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var i=a(87462),n=a(63366),o=(a(67294),a(3905)),r=(a(61839),["components"]),l={title:"Data model - Inside a view dictionary",sidebar_label:"Inside a view dictionary",id:"inside-a-view-dictionary",keywords:["getting started","basics","data","model","view dictionary"],tags:["getting started","basics","data model","view dictionary"]},d=void 0,s={unversionedId:"getting-started/learn-the-basics/data-model/inside-a-view-dictionary",id:"getting-started/learn-the-basics/data-model/inside-a-view-dictionary",title:"Data model - Inside a view dictionary",description:"Whereas tables tend to be groups of related information, a view is a way of looking at data - in many cases, literally. If you want to show all the trades you have done, then you might want to take some of that data from a table of trades, but you might want to add data from one or more other tables - currency details or counterparty IDs, for example.",source:"@site/docs/01_getting-started/01_learn-the-basics/05_data-model/03_inside-a-view-dictionary.md",sourceDirName:"01_getting-started/01_learn-the-basics/05_data-model",slug:"/getting-started/learn-the-basics/data-model/inside-a-view-dictionary",permalink:"/next/getting-started/learn-the-basics/data-model/inside-a-view-dictionary",draft:!1,tags:[{label:"getting started",permalink:"/next/tags/getting-started"},{label:"basics",permalink:"/next/tags/basics"},{label:"data model",permalink:"/next/tags/data-model"},{label:"view dictionary",permalink:"/next/tags/view-dictionary"}],version:"current",sidebarPosition:3,frontMatter:{title:"Data model - Inside a view dictionary",sidebar_label:"Inside a view dictionary",id:"inside-a-view-dictionary",keywords:["getting started","basics","data","model","view dictionary"],tags:["getting started","basics","data model","view dictionary"]},sidebar:"learningSidebar",previous:{title:"Inside a tables dictionary",permalink:"/next/getting-started/learn-the-basics/data-model/inside-a-tables-dictionary"},next:{title:"Building the database",permalink:"/next/getting-started/learn-the-basics/building-the-database"}},c={},u=[],h={toc:u};function m(e){var t=e.components,a=(0,n.Z)(e,r);return(0,o.kt)("wrapper",(0,i.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Whereas tables tend to be groups of related information, a view is a way of looking at data - in many cases, literally. If you want to show all the trades you have done, then you might want to take some of that data from a table of trades, but you might want to add data from one or more other tables - currency details or counterparty IDs, for example."),(0,o.kt)("p",null,"So, a view is a way of joining tables to form a useful way of displaying data."),(0,o.kt)("p",null,"The view dictionary is where you specify all the views you need for your data model."),(0,o.kt)("p",null,"These are all contained in a single Kotlin script file. If your application is called bravo, then the file would be called ",(0,o.kt)("strong",{parentName:"p"},"bravo-view-dictionary.kts"),"."),(0,o.kt)("p",null,"Within the file, you specify the details of each view that you need.  "),(0,o.kt)("p",null,"Here is an example ",(0,o.kt)("strong",{parentName:"p"},"view-dictionary.kts")," file. It has one view, called TRADE_VIEW. This joins the TRADE table (the root table) to the COUNTERPARTY table and to the INSTRUMENT table."),(0,o.kt)("p",null,"After the joins, we specify the fields that are required:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"from the TRADE table, we include all the fields"),(0,o.kt)("li",{parentName:"ul"},"from the COUNTERPARTY table, we are taking the NAME field and we are adding a prefix to make COUNTERPARTY_NAME"),(0,o.kt)("li",{parentName:"ul"},"from the INSTRUMENT table, we are taking the NAME FIELD and we are adding a prefix to make INSTRUMENT_NAME"),(0,o.kt)("li",{parentName:"ul"},"also from the INSTRUMENT table, we are taking the CURRENCY_ID and we are giving it the alias CURRENCY"),(0,o.kt)("li",{parentName:"ul"},"finally, there is a derived field (these are useful for providing calculated values based on other fields in the view); it is called CONSIDERATION, and it simply contains the result of the QUANTITY x PRICE")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'views {\n\n  view("TRADE_VIEW", TRADE) {\n\n    joins {\n      joining(COUNTERPARTY) {\n        on(TRADE.COUNTERPARTY_ID to COUNTERPARTY { COUNTERPARTY_ID })\n      }\n      joining(INSTRUMENT) {\n        on(TRADE.INSTRUMENT_ID to INSTRUMENT { INSTRUMENT_ID })\n      }\n    }\n\n    fields {\n      TRADE.allFields()\n\n      COUNTERPARTY.NAME withPrefix COUNTERPARTY\n      INSTRUMENT.NAME withPrefix INSTRUMENT\n      INSTRUMENT.CURRENCY_ID withAlias "CURRENCY"\n\n      derivedField("CONSIDERATION", DOUBLE) {\n        withInput(TRADE.QUANTITY, TRADE.PRICE) { QUANTITY, PRICE ->\n          QUANTITY * PRICE\n        }\n      }\n    }\n  }\n}\n\n')),(0,o.kt)("p",null,"OK, we looked at a bit more detail there. We hope you are happy with that."))}m.isMDXComponent=!0}}]);