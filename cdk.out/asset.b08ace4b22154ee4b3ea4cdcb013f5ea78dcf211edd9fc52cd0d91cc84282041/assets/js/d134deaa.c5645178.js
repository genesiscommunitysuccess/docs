"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[36632],{98885:function(e){e.exports=JSON.parse('{"label":"basics","permalink":"/next/tags/basics","allTagsPath":"/next/tags","count":47,"items":[{"id":"server/integration/apache-camel/basics","title":"Apache Camel - Basics","description":"Introduction  | Basics | Advanced | Examples | Configuring runtime | Testing","permalink":"/next/server/integration/apache-camel/basics"},{"id":"getting-started/learn-the-basics/Components/application-components","title":"Components - Application","description":"The application components enable you to create the working event-driven applications quickly. You can configure each component as per your requirement and doing so will add precise control, complexity and sophistication to your application.","permalink":"/next/getting-started/learn-the-basics/Components/application-components"},{"id":"getting-started/learn-the-basics/Components/component-architecture-overview","title":"Components - Architecture overview","description":"Every Genesis application is different, but all Genesis applications share a common architecture. The best way to understand the purpose of all the main elements of this architecture is to familiarise yourself with the server components and the web front-end.","permalink":"/next/getting-started/learn-the-basics/Components/component-architecture-overview"},{"id":"getting-started/learn-the-basics/Components/core-components","title":"Components - Core","description":"These core components are part of the Genesis low-code platform which run automatically. These components eliminate the need of the manual low-level programming which is otherwise mandatory for creating financial markets applications. Hence, you can simply focus on developing the essential value specific to your application.","permalink":"/next/getting-started/learn-the-basics/Components/core-components"},{"id":"getting-started/learn-the-basics/Components/integration-components","title":"Components - Integration","description":"Most financial applications have to interact with other outside systems for information exchange and smooth workflow creation within themselves. The Genesis low-code platform makes this process faster with it\'s growing list of components that enable you to connect quickly to market-leading services. Instead of creating the interfaces from scratch, you simply need to select your component, enable it and configure it.","permalink":"/next/getting-started/learn-the-basics/Components/integration-components"},{"id":"getting-started/learn-the-basics/Components/introduction","title":"Components - Introduction","description":"The Genesis low-code platform offers you more than 50 components that provide proven quality code which speed up your development, testing and deployment to a great extent.","permalink":"/next/getting-started/learn-the-basics/Components/introduction"},{"id":"getting-started/learn-the-basics/Components/ui-components","title":"Components - UI","description":"With these user-interface (UI) components, you can create clear and usable interfaces quickly.","permalink":"/next/getting-started/learn-the-basics/Components/ui-components"},{"id":"server/consolidator/basics","title":"Consolidator - Basics","description":"Introduction | Basics |  Advanced | Examples | Configuring runtime | Testing","permalink":"/next/server/consolidator/basics"},{"id":"server/integration/custom-endpoints/basics","title":"Custom Endpoints - Basics","description":"Introduction | Basics |  Advanced | Examples | Configuring runtime | Testing","permalink":"/next/server/integration/custom-endpoints/basics"},{"id":"getting-started/learn-the-basics/data-model/inside-a-fields-dictionary","title":"Data model - Inside a fields dictionary","description":"The fields dictionary is where you specify all the fields you need for your data model.","permalink":"/next/getting-started/learn-the-basics/data-model/inside-a-fields-dictionary"},{"id":"getting-started/learn-the-basics/data-model/inside-a-tables-dictionary","title":"Data model - Inside a tables dictionary","description":"Tables of data will be critical to your application, from simple tables of currencies or locations to more complex ones that contain trade or order information (for example).","permalink":"/next/getting-started/learn-the-basics/data-model/inside-a-tables-dictionary"},{"id":"getting-started/learn-the-basics/data-model/inside-a-view-dictionary","title":"Data model - Inside a view dictionary","description":"Whereas tables tend to be groups of related information, a view is a way of looking at data - in many cases, literally. If you want to show all the trades you have done, then you might want to take some of that data from a table of trades, but you might want to add data from one or more other tables - currency details or counterparty IDs, for example.","permalink":"/next/getting-started/learn-the-basics/data-model/inside-a-view-dictionary"},{"id":"server/integration/data-pipeline/basics","title":"Data Pipeline - Basics","description":"Introduction  | Basics | Advanced | Examples | Configuring runtime | Testing","permalink":"/next/server/integration/data-pipeline/basics"},{"id":"server/data-server/basics","title":"Data Server - Basics","description":"Let\'s make things really simple.","permalink":"/next/server/data-server/basics"},{"id":"server/integration/database-streaming-out/basics","title":"DB Streaming Out - Basics","description":"Introduction  | Basics | Advanced | Examples | Configuring runtime | Testing","permalink":"/next/server/integration/database-streaming-out/basics"},{"id":"server/evaluator/basics","title":"Evaluator - Basics","description":"Introduction | Basics | Examples | Configuring runtime | Testing","permalink":"/next/server/evaluator/basics"},{"id":"server/event-handler/basics","title":"Event Handler - Basics","description":"Let\'s make things really simple.","permalink":"/next/server/event-handler/basics"},{"id":"database/fields-tables-views/fields/fields-basics","title":"Fields - basics","description":"Field types","permalink":"/next/database/fields-tables-views/fields/fields-basics"},{"id":"getting-started/learn-the-basics/front-end-basics/add-a-new-page","title":"Front-end basics - Add a new page","description":"Creating a new component","permalink":"/next/getting-started/learn-the-basics/front-end-basics/add-a-new-page"},{"id":"getting-started/learn-the-basics/key-system-files/generated-versions","title":"Key system files - Generated versions","description":"It is important to know that the Genesis low-code platform uses system-generated versions of these system files.","permalink":"/next/getting-started/learn-the-basics/key-system-files/generated-versions"},{"id":"getting-started/learn-the-basics/key-system-files/other-key-files","title":"Key system files - Genesis Router","description":"Let us now mention another important system file, Genesis Router. The Genesis Router module controls the routing of the messages between the backend and the frontend of your application. You can configure this in the file genesis-router.kts.","permalink":"/next/getting-started/learn-the-basics/key-system-files/other-key-files"},{"id":"getting-started/learn-the-basics/key-system-files/genesis-system-definitions","title":"Key system files - genesis-system-definitions.kts","description":"The system-definition file, genesis-system-definition.kts, is the basis of all the configurations, scripts, data models, etc.","permalink":"/next/getting-started/learn-the-basics/key-system-files/genesis-system-definitions"},{"id":"getting-started/learn-the-basics/key-system-files/process","title":"Key system files - process.xml","description":"Your application must have a -processes.xml file. For example, if your application is called \'bravo\', then the file will be called bravo-processes.xml.","permalink":"/next/getting-started/learn-the-basics/key-system-files/process"},{"id":"getting-started/learn-the-basics/key-system-files/service-definitions","title":"Key system files - service definitions.xml","description":"Every application must have a -service-definitions.xml file. This is where you specify the ports of the various processes. The ports are used to communicate internally between these various processes.","permalink":"/next/getting-started/learn-the-basics/key-system-files/service-definitions"},{"id":"getting-started/learn-the-basics/simple-introduction","title":"Learn the Basics - A very simple introduction","description":"What is the Genesis low-code platform?","permalink":"/next/getting-started/learn-the-basics/simple-introduction"},{"id":"getting-started/learn-the-basics/building-the-database","title":"Learn the Basics - Building the database","description":"Once you are happy with your data model, you can build your database.","permalink":"/next/getting-started/learn-the-basics/building-the-database"},{"id":"getting-started/learn-the-basics/running-the-server/build","title":"Learn the basics - Building the server","description":"With a database and two modules (a Data Server and an Event Handler) in place to supply data to the frontend, we can now build our server.","permalink":"/next/getting-started/learn-the-basics/running-the-server/build"},{"id":"getting-started/learn-the-basics/creation-process","title":"Learn the Basics - Creation process","description":"So how would you go about creating something like that?","permalink":"/next/getting-started/learn-the-basics/creation-process"},{"id":"getting-started/learn-the-basics/next-steps","title":"Learn the Basics - Next steps","description":"Now, let\'s just take stock.","permalink":"/next/getting-started/learn-the-basics/next-steps"},{"id":"getting-started/learn-the-basics/running-the-server/run","title":"Learn the basics - Running the server","description":"There are some simple commands that enable you to start and stop your server.","permalink":"/next/getting-started/learn-the-basics/running-the-server/run"},{"id":"getting-started/learn-the-basics/modules/inside-a-data-server","title":"Modules - Inside a Data Server","description":"A Data Server supplies real-time (streaming) data to the front end of your application.","permalink":"/next/getting-started/learn-the-basics/modules/inside-a-data-server"},{"id":"getting-started/learn-the-basics/modules/inside-a-request-server","title":"Modules - Inside a Request Server","description":"A Request Server supplies static data to the front end of your application.","permalink":"/next/getting-started/learn-the-basics/modules/inside-a-request-server"},{"id":"getting-started/learn-the-basics/modules/inside-an-event-handler","title":"Modules - Inside an Event Handler","description":"Applications must respond immediately to different types of input: inputs from users, messages from other systems, market-data updates and internally calculated analytic signals.  These inputs are events.","permalink":"/next/getting-started/learn-the-basics/modules/inside-an-event-handler"},{"id":"server/integration/rest-endpoints/basics","title":"REST endpoints - Basics","description":"Introduction | Where to define | Basics | Advanced | Configuring runtime | Testing","permalink":"/next/server/integration/rest-endpoints/basics"},{"id":"server/state-machine/basics","title":"State Machine - Basics","description":"You define your state machine as a specific type of Event Handler.","permalink":"/next/server/state-machine/basics"},{"id":"database/fields-tables-views/tables/tables-basics","title":"Tables - basics","description":"In your application\'s tables-dictionary.kts file, you need to define every table that your application needs. Let us go back to the very simple example definition that we started with. This contains a single table with three fields in it.","permalink":"/next/database/fields-tables-views/tables/tables-basics"},{"id":"database/fields-tables-views/views/views-basics","title":"Views - basics","description":"A view definition is made up of joins and fields.","permalink":"/next/database/fields-tables-views/views/views-basics"},{"id":"web/basics/creating-a-new-page","title":"Web Basics - Creating a new page","description":"Broadly speaking, the process can be summarised as follows:","permalink":"/next/web/basics/creating-a-new-page"},{"id":"web/basics/front-end-basics","title":"Web Basics - Front-end","description":"To view or use your Genesis application, you need to create one or more web pages. On each of these pages, you need to have components that display information or enable the user to interact with the application. For example:","permalink":"/next/web/basics/front-end-basics"},{"id":"web/basics/inserting-a-grid","title":"Web Basics - Inserting a grid","description":"In this example, we shall add a grid to our new page. This grid will display data from a Data Server resource on the server. In this case, the resource is called ALL_TRADES. The logic would be the same for any other.","permalink":"/next/web/basics/inserting-a-grid"},{"id":"web/basics/package-json-basics","title":"Web Basics - package.json","description":"The package.json file is auto-generated for you by the CLI, based on your answers to the prompts.","permalink":"/next/web/basics/package-json-basics"},{"id":"web/basics/prerequisites","title":"Web Basics - Prerequisites","description":"What you need to know to start","permalink":"/next/web/basics/prerequisites"},{"id":"getting-started/learn-the-basics/what-can-i-build/excel","title":"What can I build? - Excel","description":"In financial organisations everywhere, there are spreadsheets that are effective tools, but which pose a significant operational and compliance risk.","permalink":"/next/getting-started/learn-the-basics/what-can-i-build/excel"},{"id":"getting-started/learn-the-basics/what-can-i-build/build-intro","title":"What can I build? - introduction","description":"Once you have the Genesis low-code platform, you can develop and deploy your own applications at speed, from the simplest of internal systems to complete exchanges.","permalink":"/next/getting-started/learn-the-basics/what-can-i-build/build-intro"},{"id":"getting-started/learn-the-basics/what-can-i-build/news-apps-from-scratch","title":"What can I build? - new apps from scratch","description":"You don\'t have to be bound by your existing systems at all. If you have a need for a new application, which looks too ambitious for now, the Genesis low-code platform could make that a realistic proposition in a realistic timeframe.","permalink":"/next/getting-started/learn-the-basics/what-can-i-build/news-apps-from-scratch"},{"id":"getting-started/learn-the-basics/what-can-i-build/complete-exchanges","title":"What can I build? - new e-platforms","description":"You can build complete new trading platforms that integrate with multiple internal and external systems. These are applications with clear user interfaces, highly sophisticated features; they can be specified and built to meet exactly the security and regulatory requirements you require.","permalink":"/next/getting-started/learn-the-basics/what-can-i-build/complete-exchanges"},{"id":"getting-started/learn-the-basics/what-can-i-build/workflow","title":"What can I build? - workflow","description":"Self-contained systems (aren\'t you bored by the term \\"silo\\") remain a big blocker for anyone looking for efficiency.","permalink":"/next/getting-started/learn-the-basics/what-can-i-build/workflow"}]}')}}]);