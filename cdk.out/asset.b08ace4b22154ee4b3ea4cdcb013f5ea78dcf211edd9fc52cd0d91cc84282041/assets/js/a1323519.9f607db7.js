"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[32817],{85162:function(e,n,t){t.d(n,{Z:function(){return o}});var a=t(67294),i=t(86010),r="tabItem_Ymn6";function o(e){var n=e.children,t=e.hidden,o=e.className;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(r,o),hidden:t},n)}},65488:function(e,n,t){t.d(n,{Z:function(){return m}});var a=t(87462),i=t(67294),r=t(86010),o=t(72389),l=t(67392),s=t(7094),u=t(12466),d="tabList__CuJ",p="tabItem_LNqP";function c(e){var n,t,o=e.lazy,c=e.block,m=e.defaultValue,g=e.values,k=e.groupId,f=e.className,h=i.Children.map(e.children,(function(e){if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=g?g:h.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),v=(0,l.l)(b,(function(e,n){return e.value===n.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===m?m:null!=(n=null!=m?m:null==(t=h.find((function(e){return e.props.default})))?void 0:t.props.value)?n:h[0].props.value;if(null!==y&&!b.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+b.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var N=(0,s.U)(),w=N.tabGroupChoices,x=N.setTabGroupChoices,T=(0,i.useState)(y),D=T[0],C=T[1],G=[],I=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=k){var _=w[k];null!=_&&_!==D&&b.some((function(e){return e.value===_}))&&C(_)}var S=function(e){var n=e.currentTarget,t=G.indexOf(n),a=b[t].value;a!==D&&(I(n),C(a),null!=k&&x(k,String(a)))},E=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a,i=G.indexOf(e.currentTarget)+1;t=null!=(a=G[i])?a:G[0];break;case"ArrowLeft":var r,o=G.indexOf(e.currentTarget)-1;t=null!=(r=G[o])?r:G[G.length-1]}null==(n=t)||n.focus()};return i.createElement("div",{className:(0,r.Z)("tabs-container",d)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":c},f)},b.map((function(e){var n=e.value,t=e.label,o=e.attributes;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:D===n?0:-1,"aria-selected":D===n,key:n,ref:function(e){return G.push(e)},onKeyDown:E,onFocus:S,onClick:S},o,{className:(0,r.Z)("tabs__item",p,null==o?void 0:o.className,{"tabs__item--active":D===n})}),null!=t?t:n)}))),o?(0,i.cloneElement)(h.filter((function(e){return e.props.value===D}))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},h.map((function(e,n){return(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==D})}))))}function m(e){var n=(0,o.Z)();return i.createElement(c,(0,a.Z)({key:String(n)},e))}},68231:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return d},default:function(){return k},frontMatter:function(){return u},metadata:function(){return p},toc:function(){return m}});var a=t(87462),i=t(63366),r=(t(67294),t(3905)),o=(t(61839),t(65488)),l=t(85162),s=["components"],u={title:"Genesis Containerisation - building a container",sidebar_label:"Building a Container",id:"build",keywords:["operations","containerisation","container","docker","build"],tags:["operations","containerisation","container","docker","build"]},d=void 0,p={unversionedId:"operations/containerisation/build",id:"operations/containerisation/build",title:"Genesis Containerisation - building a container",description:"The Genesis low-code platform provides two different options for building a Docker image.",source:"@site/docs/05_operations/04_containerisation/02_build.md",sourceDirName:"05_operations/04_containerisation",slug:"/operations/containerisation/build",permalink:"/next/operations/containerisation/build",draft:!1,tags:[{label:"operations",permalink:"/next/tags/operations"},{label:"containerisation",permalink:"/next/tags/containerisation"},{label:"container",permalink:"/next/tags/container"},{label:"docker",permalink:"/next/tags/docker"},{label:"build",permalink:"/next/tags/build"}],version:"current",sidebarPosition:2,frontMatter:{title:"Genesis Containerisation - building a container",sidebar_label:"Building a Container",id:"build",keywords:["operations","containerisation","container","docker","build"],tags:["operations","containerisation","container","docker","build"]},sidebar:"operationsSidebar",previous:{title:"Introduction",permalink:"/next/operations/containerisation/introduction"},next:{title:"Run a container",permalink:"/next/operations/containerisation/run"}},c={},m=[{value:"Gradle plugin overview",id:"gradle-plugin-overview",level:2},{value:"Using the plugin",id:"using-the-plugin",level:2}],g={toc:m};function k(e){var n=e.components,t=(0,i.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The Genesis low-code platform provides two different options for building a Docker image."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The first option, which is covered in this section, is using the Gradle plugin. This is the easiest and quickest way to get up and running with a Docker image, but it comes with the cost of reduced flexibility. This option is highly recommended for new developers to try Genesis out.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The second option is to ",(0,r.kt)("a",{parentName:"p",href:"/operations/containerisation/dockerfile/"},"create your own Dockerfile")," and build your own image. This provides the most flexibility, but it means you need to manage the Genesis dependencies yourself."))),(0,r.kt)("h2",{id:"gradle-plugin-overview"},"Gradle plugin overview"),(0,r.kt)("p",null,"The Gradle plugin provides the easiest and quickest way to get Genesis running in a Docker container. We provide a Gradle task that generates a Dockerfile for you, with all the necessary dependencies, and then builds it."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"There are 3 Gradle tasks that are provided to help you build your Docker image:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"createDockerfile")," - Generates the Dockerfile dynamically based on user-defined settings and dependencies. It also copies all the files needed for the context into the same folder."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"buildImage")," - Runs ",(0,r.kt)("strong",{parentName:"li"},"createDockerfile")," as a sub-task, and then runs ",(0,r.kt)("inlineCode",{parentName:"li"},"docker build")," on the generated Dockerfile."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pushImage")," - Pushes the generated image to a repository defined in ",(0,r.kt)("strong",{parentName:"li"},"gradle.properties")," (see ",(0,r.kt)("a",{parentName:"li",href:"/operations/containerisation/pushing/"},"Genesis Containerisation - pushing the image to a registry"),").")),(0,r.kt)("h2",{id:"using-the-plugin"},"Using the plugin"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create or use an existing Genesis project. See our ",(0,r.kt)("a",{parentName:"p",href:"/getting-started/quick-start/create-a-new-project/"},"Quick Start guide")," for details of creating a new project.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Make sure the necessary changes to the ",(0,r.kt)("strong",{parentName:"p"},"genesis-system-defintions.kts")," are made for your dependencies, such as the location of the database. You can find more details in our page on ",(0,r.kt)("a",{parentName:"p",href:"/getting-started/quick-start/prepare-the-server-and-build/"},"preparing and biolding the server")," for more info)."))),(0,r.kt)("p",null,"Add your dependencies to the Deploy plugin ",(0,r.kt)("strong",{parentName:"p"},"build.gradle.kts")," (default location for the Blank App Seed is ",(0,r.kt)("strong",{parentName:"p"},"server/jvm/*"),"appname",(0,r.kt)("strong",{parentName:"p"},"*-deploy/build.gradle.kts"),")"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'    genesisServer(\n        group = "global.genesis",\n        name = "genesis-distribution",\n        version = properties["genesisVersion"].toString(),\n        classifier = "bin",\n        ext = "zip"\n    )\n    genesisServer(\n        group = "global.genesis",\n        name = "auth-distribution",\n        version = properties["authVersion"].toString(),\n        classifier = "bin",\n        ext = "zip"\n    )\n')),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Run the ",(0,r.kt)("inlineCode",{parentName:"li"},"buildImage")," Gradle task from the root of the ",(0,r.kt)("strong",{parentName:"li"},"server/jvm/")," project. (you can also run this task from your IDE if you prefer):")),(0,r.kt)(o.Z,{defaultValue:"linux",values:[{label:"Linux/Unix",value:"linux"},{label:"Windows",value:"windows"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"linux",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./gradlew buildImage\n"))),(0,r.kt)(l.Z,{value:"windows",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell"},"./gradlew.bat buildImage\n")))),(0,r.kt)("p",null,"Once the image has been built, the output should display the name of the image:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"Successfully built eaa290495637\nSuccessfully tagged genesis/appname:1.0.0-SNAPSHOT\nCreated image with ID 'eaa290495637'.\n")))}k.isMDXComponent=!0}}]);