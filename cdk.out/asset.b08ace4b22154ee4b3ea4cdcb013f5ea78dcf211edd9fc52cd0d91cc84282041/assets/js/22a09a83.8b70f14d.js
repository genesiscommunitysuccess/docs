"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[91470],{72157:function(e,a,n){n.r(a),n.d(a,{assets:function(){return p},contentTitle:function(){return l},default:function(){return v},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return d}});var t=n(87462),r=n(63366),i=(n(67294),n(3905)),s=(n(61839),["components"]),o={title:"Apache Camel - Advanced",sidebar_label:"Advanced",id:"advanced",keywords:["server","integration","apache camel","advanced"],tags:["server","integration","apache camel","advanced"]},l=void 0,c={unversionedId:"server/integration/apache-camel/advanced",id:"server/integration/apache-camel/advanced",title:"Apache Camel - Advanced",description:"Introduction  | Basics | Advanced | Examples | Configuring runtime | Testing",source:"@site/docs/03_server/10_integration/10_apache-camel/03_advanced.md",sourceDirName:"03_server/10_integration/10_apache-camel",slug:"/server/integration/apache-camel/advanced",permalink:"/next/server/integration/apache-camel/advanced",draft:!1,tags:[{label:"server",permalink:"/next/tags/server"},{label:"integration",permalink:"/next/tags/integration"},{label:"apache camel",permalink:"/next/tags/apache-camel"},{label:"advanced",permalink:"/next/tags/advanced"}],version:"current",sidebarPosition:3,frontMatter:{title:"Apache Camel - Advanced",sidebar_label:"Advanced",id:"advanced",keywords:["server","integration","apache camel","advanced"],tags:["server","integration","apache camel","advanced"]},sidebar:"serverModulesSidebar",previous:{title:"Basics",permalink:"/next/server/integration/apache-camel/basics"},next:{title:"Examples",permalink:"/next/server/integration/apache-camel/examples"}},p={},d=[{value:"Automatic import",id:"automatic-import",level:2},{value:"A more advanced example Camel configuration",id:"a-more-advanced-example-camel-configuration",level:2},{value:"onCommit",id:"oncommit",level:3},{value:"routeHandler",id:"routehandler",level:3}],m={toc:d};function v(e){var a=e.components,n=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,t.Z)({},m,n,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/server/integration/apache-camel/introduction/"},"Introduction"),"  | ",(0,i.kt)("a",{parentName:"p",href:"/server/integration/apache-camel/basics"},"Basics")," | ",(0,i.kt)("a",{parentName:"p",href:"/server/integration/apache-camel/advanced"},"Advanced")," | ",(0,i.kt)("a",{parentName:"p",href:"/server/integration/apache-camel/examples"},"Examples")," | ",(0,i.kt)("a",{parentName:"p",href:"/server/integration/apache-camel/configuring-runtime"},"Configuring runtime")," | ",(0,i.kt)("a",{parentName:"p",href:"/server/integration/apache-camel/testing"},"Testing")),(0,i.kt)("h2",{id:"automatic-import"},"Automatic import"),(0,i.kt)("p",null,"The following properties are automatically available inside a GPAL ",(0,i.kt)("inlineCode",{parentName:"p"},"camel { ... }")," definition:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val systemDefinition: SystemDefinitionService\nval rxDb: RxDb\nval context: DefaultCamelContext\nval producer: ProducerTemplate\nval serviceDiscovery: ServiceDiscovery\nval asyncEntityDb: AsyncEntityDb\nval rxEntityDb: RxEntityDb\nval injector: Injector\nval LOG: Logger\n")),(0,i.kt)("h2",{id:"a-more-advanced-example-camel-configuration"},"A more advanced example Camel configuration"),(0,i.kt)("p",null,"Here is a more advanced example of an ",(0,i.kt)("em",{parentName:"p"},"application-name"),(0,i.kt)("strong",{parentName:"p"},"-camel.kts")," file. It defines 2 routes, and has an ",(0,i.kt)("inlineCode",{parentName:"p"},"onCommit")," block, similar to those seen in ",(0,i.kt)("a",{parentName:"p",href:"/server/event-handler/basics/"},"Event Handlers"),". This is because the ",(0,i.kt)("inlineCode",{parentName:"p"},"camel")," block in Genesis functions acts as a type of Event Handler, reacting to ",(0,i.kt)("inlineCode",{parentName:"p"},"EVENT_CAMEL_SEND")," message types. These events can be raised as normal with Genesis, allowing the Event Handler to be invoked from:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"other ",(0,i.kt)("inlineCode",{parentName:"li"},"eventHandler")," codeblocks"),(0,i.kt)("li",{parentName:"ul"},"the front end"),(0,i.kt)("li",{parentName:"ul"},"custom components in the application.")),(0,i.kt)("p",null,"The Event Handler aspect of this example allows these events to be accessed easily from the Apache Camel route builder in the ",(0,i.kt)("a",{parentName:"p",href:"https://camel.apache.org/components/3.16.x/seda-component.html"},"SEDA component"),"."),(0,i.kt)("p",null,"This example demonstrates use of the ",(0,i.kt)("inlineCode",{parentName:"p"},"LOG")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"rxEntityDb")," properties noted above, while the last route demonstrates the use of the ",(0,i.kt)("inlineCode",{parentName:"p"},"serviceDiscovery")," helper to dispatch an event to an ",(0,i.kt)("a",{parentName:"p",href:"/server/event-handler/basics/"},"Event Handler"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'import global.genesis.jackson.core.GenesisJacksonMapper.Companion.csvIterator\n\ncamel {\n    onCommit {\n        LOG.info("Received: {}", it)\n        val properties = it.details.properties\n        when (val targetExtension = properties["TARGET_EXTENSION"].toString()) {\n            "CSV" -> DefaultCamelSendToCSV.handle(it.details, producer)\n            "XML" -> DefaultCamelSendToXml.handle(it.details, producer)\n        }\n        EventReply.EventAck()\n    }\n    routeHandler {\n        from("seda:PROFILE_USER")\n            .process { exchange ->\n                LOG.info("seda:PROFILE_USER")\n                val body = exchange.message.body.toString()\n                val profileUsers = body.csvIterator(ProfileUser::class.java)\n                for (profileUser in profileUsers) {\n                    rxEntityDb.insert(profileUser).blockingGet()\n                }\n            }\n        from("seda:MOVIES")\n            .process { exchange ->\n                LOG.info("seda:MOVIES")\n                val body = exchange.message.body.toString()\n                val movie = Movies {\n                    id = "1"\n                    name = body\n                }\n                rxEntityDb.insert(movie).blockingGet()\n            }\n        from("seda:REVIEWS")\n            .process { exchange ->\n                LOG.info("seda:REVIEWS")\n                val review = exchange.message.body.toString()\n                val set = genesisSet {\n                  MESSAGE_TYPE with "PROCESS_REVIEW"\n                  DETAILS with genesisSet {\n                    "BODY" with review\n                  }\n                }\n                val service = serviceDiscovery.resolveClient("REVIEW_HANDLER")\n                if (service != null) {\n                  service.sendMessage(set)\n                } else {\n                  LOG.error("Unable to discover REVIEW_HANDLER service")\n                }\n            }\n    }\n}\n')),(0,i.kt)("h3",{id:"oncommit"},"onCommit"),(0,i.kt)("p",null,"In the above example, the ",(0,i.kt)("inlineCode",{parentName:"p"},"onCommit")," block reads from the properties in the received event, and uses the inbuilt ",(0,i.kt)("inlineCode",{parentName:"p"},"DefaultCamelSendTo*")," classes to send the event message to an appropriate ",(0,i.kt)("inlineCode",{parentName:"p"},"seda:")," endpoint. Details on the SEDA endpoint within Apache Camel can be found ",(0,i.kt)("a",{parentName:"p",href:"https://camel.apache.org/components/3.16.x/seda-component.html"},"here.")),(0,i.kt)("h3",{id:"routehandler"},"routeHandler"),(0,i.kt)("p",null,"In the above example, we have three defined routes. In the first two, we are receiving data from the ",(0,i.kt)("inlineCode",{parentName:"p"},"seda:")," endpoints and then processing it, using an inline-defined processor. This can be useful for quickly defining a processor that isn't used elsewhere. Compared to the previous example, the results of the SEDA endpoint are directly persisted as entities in the database, rather than being passed on to a ",(0,i.kt)("a",{parentName:"p",href:"/server/request-server/basics/"},"Request Server"),"."),(0,i.kt)("p",null,"The third route demonstrates the use of service discovery to locate another process assumed to be a ",(0,i.kt)("a",{parentName:"p",href:"/server/event-handler/basics/"},"Genesis Event Handler")," to which a message is then dispatched."),(0,i.kt)("p",null,"Remember; if your use case is basic data ingestion, transformation and persistence to GenesisDB, then you should first investigate the ",(0,i.kt)("a",{parentName:"p",href:"/server/integration/data-pipeline/introduction/"},"Genesis Data Pipeline"),", which offers a higher-level abstraction than seen here."))}v.isMDXComponent=!0}}]);