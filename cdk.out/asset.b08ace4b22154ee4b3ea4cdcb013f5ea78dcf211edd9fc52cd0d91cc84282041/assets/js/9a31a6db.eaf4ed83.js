"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[49299],{65031:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return p},default:function(){return c},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return d}});var s=t(87462),r=t(63366),o=(t(67294),t(3905)),i=(t(61839),["components"]),a={title:"Custom Endpoints - Examples",sidebar_label:"Examples",id:"examples",keywords:["server","integration","custom endpoints","examples"],tags:["server","integration","custom endpoints","examples"]},p=void 0,l={unversionedId:"server/integration/custom-endpoints/examples",id:"version-2022.3/server/integration/custom-endpoints/examples",title:"Custom Endpoints - Examples",description:"Introduction | Basics |  Advanced | Examples | Configuring runtime | Testing",source:"@site/versioned_docs/version-2022.3/03_server/10_integration/07_custom-endpoints/04_examples.md",sourceDirName:"03_server/10_integration/07_custom-endpoints",slug:"/server/integration/custom-endpoints/examples",permalink:"/server/integration/custom-endpoints/examples",draft:!1,tags:[{label:"server",permalink:"/tags/server"},{label:"integration",permalink:"/tags/integration"},{label:"custom endpoints",permalink:"/tags/custom-endpoints"},{label:"examples",permalink:"/tags/examples"}],version:"2022.3",sidebarPosition:4,frontMatter:{title:"Custom Endpoints - Examples",sidebar_label:"Examples",id:"examples",keywords:["server","integration","custom endpoints","examples"],tags:["server","integration","custom endpoints","examples"]},sidebar:"serverModulesSidebar",previous:{title:"Advanced",permalink:"/server/integration/custom-endpoints/advanced"},next:{title:"Configuring Runtime",permalink:"/server/integration/custom-endpoints/configuring-runtime"}},u={},d=[{value:"IdpListEndpoint",id:"idplistendpoint",level:2},{value:"AbstractSamlEndPoint",id:"abstractsamlendpoint",level:2},{value:"LoginPostEndPoint",id:"loginpostendpoint",level:3},{value:"LoginUrlRequestEndPoint",id:"loginurlrequestendpoint",level:3},{value:"LogoutEndPoint",id:"logoutendpoint",level:3},{value:"MetadataEndPoint",id:"metadataendpoint",level:3}],g={toc:d};function c(e){var n=e.components,t=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,s.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/server/integration/custom-endpoints/introduction/"},"Introduction")," | ",(0,o.kt)("a",{parentName:"p",href:"/server/integration/custom-endpoints/basics/"},"Basics")," |  ",(0,o.kt)("a",{parentName:"p",href:"/server/integration/custom-endpoints/advanced/"},"Advanced")," | ",(0,o.kt)("a",{parentName:"p",href:"/server/integration/custom-endpoints/examples/"},"Examples")," | ",(0,o.kt)("a",{parentName:"p",href:"/server/integration/custom-endpoints/configuring-runtime/"},"Configuring runtime")," | ",(0,o.kt)("a",{parentName:"p",href:"/server/integration/custom-endpoints/testing/"},"Testing")),(0,o.kt)("p",null,"The example below is a collection of custom endpoints supporting SAML authentication. The ",(0,o.kt)("inlineCode",{parentName:"p"},"LoginPostEndPoint"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"LoginUrlRequestEndPoint"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"LogoutEndPoint"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"MetadataEndPoint")," all extend this ",(0,o.kt)("inlineCode",{parentName:"p"},"AbstractSamlEndPoint"),"."),(0,o.kt)("h2",{id:"idplistendpoint"},"IdpListEndpoint"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Module\nclass IdpListEndpoint @Inject constructor(\n    private val registry: WebEndpointRegistry,\n    private val samlConfig: SamlConfig\n) : WebEndpoint {\n\n    @PostConstruct\n    fun init() {\n        registry.registerEndpoint("saml", this)\n    }\n\n    override fun allowedMethods(): Set<RequestType> = setOf(RequestType.GET)\n\n    override fun name(): String = "list"\n\n    override fun process(method: String, request: FullHttpRequest, conn: Channel): Any {\n        val responseJson = genesisSet {\n            "IDPS" with samlConfig.idpSettings.map { (name, idp) ->\n                genesisSet {\n                    "ID" with name\n                    "DESCRIPTION" with name\n                }\n            }\n        }.toJsonBytes()\n        val responseBuffer = Unpooled.wrappedBuffer(responseJson)\n        val response = DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK, responseBuffer)\n        response.headers().add(HttpHeaderNames.CONTENT_TYPE, HttpHeaderValues.APPLICATION_JSON)\n        response.headers().add(HttpHeaderNames.CONTENT_LENGTH, responseJson.size)\n        return response\n    }\n\n    override fun requiresAuth(): Boolean = false\n}\n')),(0,o.kt)("h2",{id:"abstractsamlendpoint"},"AbstractSamlEndPoint"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'abstract class AbstractSamlEndPoint(\n    private val name: String,\n    private val registry: WebEndpointRegistry,\n    private val allowedMethods: Set<RequestType>\n) : WebEndpoint {\n\n    constructor(\n        name: String,\n        registry: WebEndpointRegistry,\n        vararg requestTypes: RequestType\n    ) : this(name, registry, requestTypes.toSet())\n\n    @PostConstruct\n    fun init() {\n        LOG.info("Initiating Genesis SAML endpoint")\n        registry.registerEndpoint("saml", this)\n    }\n\n    final override fun requiresAuth(): Boolean = false\n\n    final override fun allowedMethods(): Set<RequestType> = allowedMethods\n    final override fun name(): String = name\n\n    final override fun process(\n        method: String,\n        request: FullHttpRequest,\n        conn: Channel\n    ): Single<HttpResponse> {\n        val decoder = QueryStringDecoder(request.uri())\n        val hostName = conn.remoteAddress().toString().substringBefore(":")\n        return when (val idp = decoder.parameters()["idp"]?.firstOrNull()) {\n            null -> Single.just(unauthorised())\n            else -> process(idp, request, hostName)\n        }\n    }\n\n    abstract fun process(\n        idp: String,\n        request: FullHttpRequest,\n        hostName: String\n    ): Single<HttpResponse>\n\n    protected fun unauthorised(): DefaultHttpResponse {\n        val httpResponse = DefaultHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.UNAUTHORIZED)\n        HttpUtil.setContentLength(httpResponse, 0)\n        return httpResponse\n    }\n\n    companion object {\n        private val LOG = LoggerFactory.getLogger(AbstractSamlEndPoint::class.java)\n    }\n}\n')),(0,o.kt)("h3",{id:"loginpostendpoint"},"LoginPostEndPoint"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Module\nclass LoginPostEndPoint @Inject constructor(\n    registry: WebEndpointRegistry,\n    private val authService: SamlAuthService,\n    private val samlConfig: SamlConfig\n) : AbstractSamlEndPoint("logon", registry, RequestType.POST) {\n    private val factory = DefaultHttpDataFactory(true)\n\n    override fun process(\n        idp: String,\n        request: FullHttpRequest,\n        hostName: String\n    ): Single<HttpResponse> = rxSingle<HttpResponse> {\n        val decoder = HttpPostRequestDecoder(factory, request)\n        val paramsAsList = decoder.bodyHttpDatas\n            .filterIsInstance<Attribute>()\n            .groupBy { it.name }\n            .mapValues { (_, value) -> value.map { it.getString(it.charset) } }\n\n        val uri = request.uri()\n        val httpRequest = HttpRequest(uri, paramsAsList, uri)\n\n        val token = authService.logon(idp, hostName, httpRequest)\n\n        val response = DefaultFullHttpResponse(\n            HttpVersion.HTTP_1_1,\n            HttpResponseStatus.FOUND\n        )\n\n        val enc = QueryStringEncoder(samlConfig.loginEndpoint)\n        enc.addParam("SSO_TOKEN", token)\n\n        response.headers()[HttpHeaderNames.LOCATION] = enc.toUri().toString()\n        HttpUtil.setContentLength(response, 0)\n        response\n    }.onErrorReturn { throwable ->\n        if (throwable !is Exception) throw throwable\n        LOG.warn("Error while processing saml request", throwable)\n        unauthorised()\n    }\n\n    companion object {\n        private val LOG = LoggerFactory.getLogger(LoginPostEndPoint::class.java)\n    }\n}\n')),(0,o.kt)("h3",{id:"loginurlrequestendpoint"},"LoginUrlRequestEndPoint"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Module\nclass LoginUrlRequestEndPoint @Inject constructor(\n    registry: WebEndpointRegistry,\n    private val authService: SamlAuthService\n) : AbstractSamlEndPoint("login", registry, RequestType.GET) {\n\n    override fun process(\n        idp: String,\n        request: FullHttpRequest,\n        hostName: String\n    ): Single<HttpResponse> = rxSingle {\n        val response = DefaultFullHttpResponse(\n            HttpVersion.HTTP_1_1,\n            HttpResponseStatus.FOUND\n        )\n        val url = authService.buildRequest(idp)\n        response.headers()[HttpHeaderNames.LOCATION] = url.toString()\n        HttpUtil.setContentLength(response, 0)\n        response\n    }\n}\n')),(0,o.kt)("h3",{id:"logoutendpoint"},"LogoutEndPoint"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Module\nclass LogoutEndPoint @Inject constructor(\n    registry: WebEndpointRegistry\n) : AbstractSamlEndPoint("logout", registry, RequestType.POST, RequestType.GET) {\n    override fun process(\n        idp: String,\n        request: FullHttpRequest,\n        hostName: String\n    ): Single<HttpResponse> {\n        LOG.debug("LOGOUT request {}", request.content())\n\n        return Single.just(unauthorised())\n    }\n\n    companion object {\n        private val LOG = LoggerFactory.getLogger(LogoutEndPoint::class.java)\n    }\n}\n')),(0,o.kt)("h3",{id:"metadataendpoint"},"MetadataEndPoint"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Module\nclass MetadataEndPoint @Inject constructor(\n    registry: WebEndpointRegistry,\n    private val authService: SamlAuthService\n) : AbstractSamlEndPoint("metadata", registry, RequestType.GET) {\n\n    override fun process(\n        idp: String,\n        request: FullHttpRequest,\n        hostName: String\n    ): Single<HttpResponse> = rxSingle {\n        val response = DefaultFullHttpResponse(\n            HttpVersion.HTTP_1_1,\n            HttpResponseStatus.OK\n        )\n        val body = authService.metadata(idp).toByteArray()\n        response.content().writeBytes(body)\n        HttpUtil.setContentLength(response, body.size.toLong())\n        response\n    }\n}\n')))}c.isMDXComponent=!0}}]);