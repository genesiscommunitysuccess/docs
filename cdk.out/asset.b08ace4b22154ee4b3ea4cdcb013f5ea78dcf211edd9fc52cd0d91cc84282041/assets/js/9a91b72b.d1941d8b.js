"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[72635],{77346:function(e,t,a){a.r(t),a.d(t,{assets:function(){return m},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return c}});var n=a(87462),r=a(63366),i=(a(67294),a(3905)),s=(a(61839),["components"]),o={title:"Apache Camel - Basics",sidebar_label:"Basics",id:"basics",keywords:["server","integration","apache camel","basics"],tags:["server","integration","apache camel","basics"]},p=void 0,l={unversionedId:"server/integration/apache-camel/basics",id:"version-2022.3/server/integration/apache-camel/basics",title:"Apache Camel - Basics",description:"Introduction  | Basics | Advanced | Examples | Configuring runtime | Testing",source:"@site/versioned_docs/version-2022.3/03_server/10_integration/10_apache-camel/02_basics.md",sourceDirName:"03_server/10_integration/10_apache-camel",slug:"/server/integration/apache-camel/basics",permalink:"/server/integration/apache-camel/basics",draft:!1,tags:[{label:"server",permalink:"/tags/server"},{label:"integration",permalink:"/tags/integration"},{label:"apache camel",permalink:"/tags/apache-camel"},{label:"basics",permalink:"/tags/basics"}],version:"2022.3",sidebarPosition:2,frontMatter:{title:"Apache Camel - Basics",sidebar_label:"Basics",id:"basics",keywords:["server","integration","apache camel","basics"],tags:["server","integration","apache camel","basics"]},sidebar:"serverModulesSidebar",previous:{title:"Introduction",permalink:"/server/integration/apache-camel/introduction"},next:{title:"Advanced",permalink:"/server/integration/apache-camel/advanced"}},m={},c=[{value:"A simple Camel configuration",id:"a-simple-camel-configuration",level:2},{value:"routeHandler",id:"routehandler",level:3},{value:"createProcessor",id:"createprocessor",level:3}],h={toc:c};function d(e){var t=e.components,a=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/server/integration/apache-camel/introduction/"},"Introduction"),"  | ",(0,i.kt)("a",{parentName:"p",href:"/server/integration/apache-camel/basics"},"Basics")," | ",(0,i.kt)("a",{parentName:"p",href:"/server/integration/apache-camel/advanced"},"Advanced")," | ",(0,i.kt)("a",{parentName:"p",href:"/server/integration/apache-camel/examples"},"Examples")," | ",(0,i.kt)("a",{parentName:"p",href:"/server/integration/apache-camel/configuring-runtime"},"Configuring runtime")," | ",(0,i.kt)("a",{parentName:"p",href:"/server/integration/apache-camel/testing"},"Testing")),(0,i.kt)("p",null,"Apache Camel integrations are defined within your application's ",(0,i.kt)("strong",{parentName:"p"},"jvm/{app-name}-script-config/{app-name}-camel.kts")," file."),(0,i.kt)("h2",{id:"a-simple-camel-configuration"},"A simple Camel configuration"),(0,i.kt)("p",null,"Here is a simple example. It defines a single route using a range of Camel configuration options, which we'll explore in a little more detail below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'camel {\n    routeHandler {\n        val pathStr = "${GenesisPaths.genesisHome()}/runtime/inbound/"\n        from("file:${pathStr}/exampledir/?move=.camel/\\${date:now:yyyyMMdd-HHmmssSSS}-\\${headers.CamelFileName}&initialDelay=5000&readLock=changed&readLockCheckInterval=5000&readLockTimeout=60000")\n            .process(fileEventProcessorProvider.createProcessor("EXAMPLE_EVENT_HANDLER", "EVENT_FILE_IMPORT_EXAMPLE", "FILE", "SOURCE_NAME"))\n    }\n}\n')),(0,i.kt)("h3",{id:"routehandler"},"routeHandler"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"routeHandler")," defines the possible routes for information to flow into and out of our system.  The example above defines one route."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"First, it defines the ",(0,i.kt)("inlineCode",{parentName:"p"},"pathStr")," using the ",(0,i.kt)("inlineCode",{parentName:"p"},"GenesisPaths")," class to find the ",(0,i.kt)("inlineCode",{parentName:"p"},"GENESIS_HOME")," system environment variable.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Next, it defines the route itself. The route in the example comes from the filesystem determined by the ",(0,i.kt)("inlineCode",{parentName:"p"},"file:")," specifier at the start of the string. This could be any ",(0,i.kt)("a",{parentName:"p",href:"https://camel.apache.org/components/3.16.x/index.html"},"Apache Camel component")," that can act as a ",(0,i.kt)("a",{parentName:"p",href:"https://camel.apache.org/manual/camelcontext.html#_consumer"},"consumer"),"."))),(0,i.kt)("p",null,"In this instance, the File component (defined in the ",(0,i.kt)("a",{parentName:"p",href:"https://camel.apache.org/components/3.16.x/file-component.html"},"File component documentation"),") can take several paths and query parameters, some of which we are using:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"${pathStr}/exampledir/")," is the ",(0,i.kt)("strong",{parentName:"p"},"directoryName")," mandatory path parameter. It indicates where in the file system that Apache Camel should look for files.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"move=.camel/\\${date:now:yyyyMMdd-HHmmssSSS}-\\${headers.CamelFileName}")," is the ",(0,i.kt)("strong",{parentName:"p"},"move")," query parameter. This determines where the files found in the path directory should be moved to once they have been processed.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"initialDelay=5000")," is the ",(0,i.kt)("strong",{parentName:"p"},"initialDelay")," query parameter. This is the time in milliseconds before the system first polls the path directory.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"readLock=changed")," is the ",(0,i.kt)("strong",{parentName:"p"},"readLock")," query parameter. This sets the strategy to ensure that the file being polled isn't in use.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"readLockCheckInterval=5000")," is the ",(0,i.kt)("strong",{parentName:"p"},"readLockCheckInterval")," query parameter. This sets the time between checks of the ",(0,i.kt)("strong",{parentName:"p"},"readlock"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"readLockTimeout=60000")," is the ",(0,i.kt)("strong",{parentName:"p"},"readLockTimeout")," query parameter. This sets the maximum time that Apache Camel will wait when trying to acquire a ",(0,i.kt)("strong",{parentName:"p"},"readlock")," before timing out."))),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Both the ",(0,i.kt)("inlineCode",{parentName:"p"},"$")," signs are escaped (",(0,i.kt)("inlineCode",{parentName:"p"},"\\$"),") to prevent Kotlin from injecting a variable into the string. We want these variables to be injected by Apache Camel itself rather than Kotlin.")),(0,i.kt)("p",null,"The route then processes the file using the ",(0,i.kt)("inlineCode",{parentName:"p"},"FileEventHandlerProcessor")," created by the ",(0,i.kt)("inlineCode",{parentName:"p"},"createProcessor")," method through the ",(0,i.kt)("inlineCode",{parentName:"p"},"fileEventProcessorProvider"),". A similar method and class exists for handling the processing of ",(0,i.kt)("a",{parentName:"p",href:"https://kafka.apache.org/"},"Kafka")," messages and CSV files."),(0,i.kt)("p",null,"This processing will then send an ",(0,i.kt)("strong",{parentName:"p"},"EVENT_FILE_IMPORT_EXAMPLE")," message to the ",(0,i.kt)("strong",{parentName:"p"},"EXAMPLE_EVENT_HANDLER")," process, with a ",(0,i.kt)("inlineCode",{parentName:"p"},"dataFieldName")," of ",(0,i.kt)("strong",{parentName:"p"},"FILE"),", expecting it to be handled by an appropriate ",(0,i.kt)("inlineCode",{parentName:"p"},"requestReply")," in your ",(0,i.kt)("a",{parentName:"p",href:"/server/request-server/basics/"},"Request Server"),"."),(0,i.kt)("h3",{id:"createprocessor"},"createProcessor"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"createProcessor")," on both the ",(0,i.kt)("inlineCode",{parentName:"p"},"FileEventProcessorProvider")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"KafkaEventProcessorProvider")," has the same parameters. However, the ",(0,i.kt)("inlineCode",{parentName:"p"},"createProcessor")," of the ",(0,i.kt)("inlineCode",{parentName:"p"},"CSVEventProcessorProvider")," has slightly different parameters."),(0,i.kt)("p",null,"The parameters for ",(0,i.kt)("inlineCode",{parentName:"p"},"createProcessor")," on the ",(0,i.kt)("inlineCode",{parentName:"p"},"FileEventProcessorProvider")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"KafkaEventProcessorProvider")," are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"processName")," is the name of the process to which you are attempting to send a request to.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"messageType")," is the type of message sent to the above process. This is important for ensuring the correct ",(0,i.kt)("inlineCode",{parentName:"p"},"requestReply")," in your ",(0,i.kt)("a",{parentName:"p",href:"/server/request-server/basics/"},"Request Server")," handles this request.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"dataFieldName")," is the name of the parameter that contains the data of the file or kafka events, when sent to the Request Server.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"sourceId")," is the source of this request.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"replyCallback")," is an optional parameter. It allows you to define a custom ",(0,i.kt)("inlineCode",{parentName:"p"},"Consumer")," and behaviour on the response of the ",(0,i.kt)("inlineCode",{parentName:"p"},"requestReply"),". By default, without setting this parameter, a consumer is constructed that logs ",(0,i.kt)("inlineCode",{parentName:"p"},"EVENT_NACK")," messages from the ",(0,i.kt)("inlineCode",{parentName:"p"},"requestReply"),", with the request set."))),(0,i.kt)("p",null,"The parameters for ",(0,i.kt)("inlineCode",{parentName:"p"},"createProcessor")," on the ",(0,i.kt)("inlineCode",{parentName:"p"},"CSVEventProcessorProvider")," are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"processName")," is the name of the process to which you are attempting to send a request to.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"messageType")," is the type of message sent to the above process. This is important for ensuring that the correct ",(0,i.kt)("inlineCode",{parentName:"p"},"requestReply"),"  in your ",(0,i.kt)("a",{parentName:"p",href:"/server/request-server/basics/"},"Request Server")," handles this request.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"sourceId")," is the source of this request.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"separator")," allows you to define which character is used as a separator.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"ignoreHeaders")," is an optional Boolean parameter, defaulting to false. If set to true, the first row of the csv will be ignored, and not parsed as part of the CSV.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"replyCallback")," is an optional parameter. It allows you to define a custom ",(0,i.kt)("inlineCode",{parentName:"p"},"Consumer")," and behaviour on the response of the ",(0,i.kt)("inlineCode",{parentName:"p"},"requestReply"),". By default, without setting this parameter, a consumer is constructed that logs ",(0,i.kt)("inlineCode",{parentName:"p"},"EVENT_NACK")," messages from the ",(0,i.kt)("inlineCode",{parentName:"p"},"requestReply"),", with the request set.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"charset")," is an optional parameter defaulting to UTF 8. This defines which character set the CSV is using."))),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"If you want to ingest a CSV directly into GenesisDB rather than calling a Request Server, you might want to investigate the Genesis Data Pipeline ",(0,i.kt)("a",{parentName:"p",href:"/server/integration/data-pipeline/basics/#csv"},"CSV source")," first.")))}d.isMDXComponent=!0}}]);