"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[45986],{54908:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return u}});var a=n(87462),i=n(63366),s=(n(67294),n(3905)),r=(n(61839),["components"]),l={title:"Server Specialist Developer Training - Day two",sidebar_label:"Day two",sidebar_position:3,id:"01_ssdt-day2",keywords:["getting started","developer training","server training","day two"],tags:["getting started","developer training","server training","day two"]},o=void 0,d={unversionedId:"getting-started/server_training/01_ssdt-day2",id:"getting-started/server_training/01_ssdt-day2",title:"Server Specialist Developer Training - Day two",description:"This day covers:",source:"@site/docs/01_getting-started/09_server_training/02_ssdt-day2.md",sourceDirName:"01_getting-started/09_server_training",slug:"/getting-started/server_training/01_ssdt-day2",permalink:"/next/getting-started/server_training/01_ssdt-day2",draft:!1,tags:[{label:"getting started",permalink:"/next/tags/getting-started"},{label:"developer training",permalink:"/next/tags/developer-training"},{label:"server training",permalink:"/next/tags/server-training"},{label:"day two",permalink:"/next/tags/day-two"}],version:"current",sidebarPosition:3,frontMatter:{title:"Server Specialist Developer Training - Day two",sidebar_label:"Day two",sidebar_position:3,id:"01_ssdt-day2",keywords:["getting started","developer training","server training","day two"],tags:["getting started","developer training","server training","day two"]},sidebar:"learningSidebar",previous:{title:"Day one",permalink:"/next/getting-started/server_training/01_ssdt-day1"},next:{title:"Day three",permalink:"/next/getting-started/server_training/03_ssdt-day3"}},p={},u=[{value:"Notify",id:"notify",level:2},{value:"Set up GENESIS_NOTIFY in the database",id:"set-up-genesis_notify-in-the-database",level:3},{value:"Insert NOTIFY_ROUTE",id:"insert-notify_route",level:3},{value:"Add connection details to the system definition",id:"add-connection-details-to-the-system-definition",level:3},{value:"Switch on data dumps",id:"switch-on-data-dumps",level:3},{value:"Dynamic rules",id:"dynamic-rules",level:2},{value:"Preparation",id:"preparation",level:3},{value:"Exercise 2.1 Trigger the event to test the rule",id:"exercise-21-trigger-the-event-to-test-the-rule",level:4},{value:"Advanced views",id:"advanced-views",level:2},{value:"INNER vc OUTER joins",id:"inner-vc-outer-joins",level:3},{value:"Dictionary-joined tables",id:"dictionary-joined-tables",level:4},{value:"Parameterised joins",id:"parameterised-joins",level:3},{value:"Dynamic joins",id:"dynamic-joins",level:3},{value:"Examples",id:"examples",level:4},{value:"Example 1",id:"example-1",level:5},{value:"Example 2",id:"example-2",level:5},{value:"Exercise 2.2 Changing TRADE_VIEW JOINs",id:"exercise-22-changing-trade_view-joins",level:4}],c={toc:u};function m(e){var t=e.components,l=(0,i.Z)(e,r);return(0,s.kt)("wrapper",(0,a.Z)({},c,l,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"This day covers:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#notify"},"Notify")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#dynamic-rules"},"Dynamic rules\u200b")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#advanced-views"},"Advanced views\u200b\u200b"))),(0,s.kt)("h2",{id:"notify"},"Notify"),(0,s.kt)("p",null,"The Genesis platform has a notification module named by default ",(0,s.kt)("em",{parentName:"p"},"GENESIS_NOTIFY"),". It does not run by default. To change this, we are adding a customised module to our project. "),(0,s.kt)("p",null,"To do that, create a process called ",(0,s.kt)("inlineCode",{parentName:"p"},"ALPHA_NOTIFY")," and add it to the file ",(0,s.kt)("strong",{parentName:"p"},"alpha-processes.xml")," in your project folder ",(0,s.kt)("strong",{parentName:"p"},"server/jvm/alpha-config/src/main/resources/cfg"),", using the code below."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-xml"},'<processes>\n    ...\n    <process name="ALPHA_NOTIFY">\n        <start>true</start>\n        <groupId>GENESIS</groupId>\n        <options>-Xmx512m -DXSD_VALIDATE=false</options>\n        <module>genesis-notify</module>\n        <package>global.genesis.notify</package>\n        <script>genesis-notify.kts<\/script>\n        <language>pal</language>\n        <description>Notify Mechanism for sending messages to external systems, such as Email and Symphony</description>\n    </process>\n</processes>\n')),(0,s.kt)("p",null,"Add the ",(0,s.kt)("inlineCode",{parentName:"p"},"ALPHA_EVALUATOR")," to the file ",(0,s.kt)("strong",{parentName:"p"},"alpha-service-definitions.xml")," inside your project folder ",(0,s.kt)("strong",{parentName:"p"},"server/jvm/alpha-config/src/main/resources/cfg")," using the code below. "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-xml"},'<configuration>\n    ...\n    <service host="localhost" name="ALPHA_NOTIFY" port="11004"/>\n</configuration>\n')),(0,s.kt)("p",null,"Run the ",(0,s.kt)("inlineCode",{parentName:"p"},"assemble")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"deploy-genesisproduct-alpha")," tasks to verify that the new process works as expected."),(0,s.kt)("p",null,"Run ",(0,s.kt)("inlineCode",{parentName:"p"},"mon"),".\nYou should be able to see the process is present.\n",(0,s.kt)("img",{src:n(55003).Z,width:"1415",height:"691"})),(0,s.kt)("h3",{id:"set-up-genesis_notify-in-the-database"},"Set up GENESIS_NOTIFY in the database"),(0,s.kt)("p",null,"Create a file GATEWAY.csv as shown below and insert it in the table GATEWAY using the command ",(0,s.kt)("inlineCode",{parentName:"p"},"SendIt"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csv"},'GATEWAY_ID,GATEWAY_TYPE,GATEWAY_VALUE,INCOMING_TOPIC\n"EmailDistribution1","EmailDistribution","{ \\"emailDistribution\\" : { \\"to\\" : [ ], \\"cc\\" : [ ], \\"bcc\\" : [ ] } }",\n')),(0,s.kt)("h3",{id:"insert-notify_route"},"Insert NOTIFY_ROUTE"),(0,s.kt)("p",null,"Create a file NOTIFY_ROUTE.csv as shown below, then insert it in the table NOTIFY_ROUTE using the command ",(0,s.kt)("inlineCode",{parentName:"p"},"SendIt"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csv"},'ENTITY_ID,ENTITY_ID_TYPE,TOPIC_MATCH,GATEWAY_ID\n,"GATEWAY","PositionAlert","EmailDistribution1" \n')),(0,s.kt)("h3",{id:"add-connection-details-to-the-system-definition"},"Add connection details to the system definition"),(0,s.kt)("p",null,"Open the ",(0,s.kt)("strong",{parentName:"p"},"genesis-system-definition.kts")," file and add the details of the connection for the SMTP server:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'package genesis.cfg\n\nsystemDefinition {\n    global {\n        ...\n        item(name = "SYSTEM_DEFAULT_USER_NAME", value = "" )\n        item(name = "SYSTEM_DEFAULT_EMAIL", value = "notifications@freesmtpservers.com" )\n        item(name = "EMAIL_SMTP_HOST", value = "smtp.freesmtpservers.com" )\n        item(name = "EMAIL_SMTP_PORT", value = "25" )\n        item(name = "EMAIL_SMTP_USER", value = "" )\n        item(name = "EMAIL_SMTP_PW", value = "" )\n        item(name = "EMAIL_SMTP_PROTOCOL", value = "SMTP")\n    }\n    ...\n}\n')),(0,s.kt)("p",null,"Run the ",(0,s.kt)("inlineCode",{parentName:"p"},"build"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"install-alpha-site-specific")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"deploy")," tasks again."),(0,s.kt)("h3",{id:"switch-on-data-dumps"},"Switch on data dumps"),(0,s.kt)("p",null,"Data dumps need to be switched on for both EVALUATOR and NOTIFY so we can see some additional data in the logs."),(0,s.kt)("p",null,"Run the ",(0,s.kt)("a",{parentName:"p",href:"/operations/commands/server-commands/#loglevel-script"},"LogLevel")," command to do this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"LogLevel -p ALPHA_EVALUATOR -DATADUMP_ON -l DEBUG\nLogLevel -p ALPHA_NOTIFY -DATADUMP_ON -l DEBUG\n")),(0,s.kt)("p",null,"And then to see the logs run:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"cd $L\ntail -f ALPHA_EVALUATOR.log\n")),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"$L is an alias to the logs folder (~/run/runtime/logs) provided by the Genesis platform. Feel free to use your favorite command to view logs such as tail, less etc.")),(0,s.kt)("h2",{id:"dynamic-rules"},"Dynamic rules"),(0,s.kt)("p",null,"In system terms, Evaluators enable you to connect Event Handlers to two different kinds of event: dynamic and static (cron rules): "),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Cron Rules"),"  are scheduling rules; these are defined as ",(0,s.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Cron#CRON_expression"},"standard cron expression"),". "),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Dynamic Rules"),", also known as Dynamic Events, are defined as ",(0,s.kt)("a",{parentName:"li",href:"https://groovy-lang.org/syntax.html"},"groovy expression"),", which respond to changes to database table entries.")),(0,s.kt)("p",null,"In both cases, you define the rule in a table in the database: "),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"CRON_RULES for static rules"),(0,s.kt)("li",{parentName:"ul"},"and DYNAMIC_RULES for dynamic rules")),(0,s.kt)("p",null,"Assuming we have already set up the Evaluator, our extended application should be able to create reports daily. "),(0,s.kt)("p",null,"Now you are going to use the Evaluator again to set up dynamic rules. In this case, you want to send an email automatically if a specified limit has been breached."),(0,s.kt)("h3",{id:"preparation"},"Preparation"),(0,s.kt)("p",null,"First, check that you have the Evaluator running. If it is not, check the procedure at the beginning of the exercise on  ",(0,s.kt)("a",{parentName:"p",href:"/getting-started/go-to-the-next-level/setting-genesis-evaluator-rules/#configure-the-evaluator"},"setting up a cron rule"),"."),(0,s.kt)("p",null,"You need to create two csv files for this. The first is the file with your rule in the correct format, similar to the static cron rule in the previous exercise. Call the file DYNAMIC_RULE.csv."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csv"},"NAME,DESCRIPTION,RULE_TABLE,RULE_STATUS,RULE_EXPRESSION,USER_NAME,PROCESS_NAME,MESSAGE_TYPE,RESULT_EXPRESSION\nMY_RULE,It\u2019s a rule,POSITION,ENABLED,(QUANTITY > 500),JaneDee,ALPHA_EVENT_HANDLER,EVENT_POSITION_CANCEL,((QUANTITY = 0) && (POSITION_ID = POSITION_ID))\n")),(0,s.kt)("p",null,"The second is a csv file that enables you to test the rule. Create a file called POSITION.csv with the following data:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csv"},"POSITION_ID,INSTRUMENT_ID,COUNTERPARTY_ID,QUANTITY,NOTIONAL\n,2,2,600,1100000\n")),(0,s.kt)("p",null,"Now you are ready to begin setting up your dynamic rule."),(0,s.kt)("h4",{id:"exercise-21-trigger-the-event-to-test-the-rule"},"Exercise 2.1 Trigger the event to test the rule"),(0,s.kt)("admonition",{title:"ESTIMATED TIME",type:"info"},(0,s.kt)("p",{parentName:"admonition"},"15 mins")),(0,s.kt)("p",null,"So, let's see if that has worked."),(0,s.kt)("p",null,"Insert the file POSITION.csv into the database. This is the file that you prepared earlier; it contains a value that breaches a limit, so it should trigger our event."),(0,s.kt)("p",null,"You can see that when the limit is breached, you receive an email automatically."),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"Go to ",(0,s.kt)("a",{parentName:"p",href:"https://www.wpoven.com/tools/free-smtp-server-for-testing"},"https://www.wpoven.com/tools/free-smtp-server-for-testing")," and access the inbox ",(0,s.kt)("em",{parentName:"p"},(0,s.kt)("a",{parentName:"em",href:"mailto:dev-training@freesmtpserver.com"},"dev-training@freesmtpserver.com")))),(0,s.kt)("h2",{id:"advanced-views"},"Advanced views"),(0,s.kt)("p",null,"Views enable you join related tables to create a single holistic view. In short, Views are the genesis equivalent of SQL select queries. Views are defined in the file ",(0,s.kt)("em",{parentName:"p"},"application-name"),(0,s.kt)("strong",{parentName:"p"},"-view-dictionary.kts"),". If your application is called ",(0,s.kt)("strong",{parentName:"p"},"rubicon"),", then the file name will be ",(0,s.kt)("strong",{parentName:"p"},"rubicon-view-dictionary.kts"),"."),(0,s.kt)("p",null,"Unlike tables, views do not have any data of their own, they are read-only, but present a view based on one or more tables. We saw basic concepts and common usages of views in the ",(0,s.kt)("a",{parentName:"p",href:"/getting-started/developer-training/training-intro/"},"Developer Training"),". Now we are exploring advanced concepts for views, such as ",(0,s.kt)("strong",{parentName:"p"},"INNER vc OUTER joins"),", ",(0,s.kt)("strong",{parentName:"p"},"Parameterised joins"),", and ",(0,s.kt)("strong",{parentName:"p"},"Dynamic joins"),"."),(0,s.kt)("h3",{id:"inner-vc-outer-joins"},"INNER vc OUTER joins"),(0,s.kt)("p",null,"Available join types are INNER and OUTER. If you do not specify the type, it defaults to OUTER."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"INNER")," joins require all joins to match exactly; if one single join fails to match, the row will be discarded.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:"{1}","{1}":!0},"joining(INSTRUMENT, JoinType.INNER) {\n    on(TRADE { INSTRUMENT_ID } to INSTRUMENT { INSTRUMENT_ID })\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"OUTER")," joins provide null references for failed joins and will still allow the row to be built.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},"joining(INSTRUMENT) {\n    on(TRADE { INSTRUMENT_ID } to INSTRUMENT { INSTRUMENT_ID })\n")),(0,s.kt)("h4",{id:"dictionary-joined-tables"},"Dictionary-joined tables"),(0,s.kt)("p",null,"When tables are joined in the dictionary, you are able to join to those tables in views directly, without having to specify the fields on which to join. This does not currently work with aliased tables."),(0,s.kt)("p",null,"Joining on fields:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},"joining(TRADE_TO_SIDE) {\n    on(TRADE { TRADE_ID } to TRADE_TO_SIDE { TRADE_ID })\n")),(0,s.kt)("p",null,"Joining using join:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},"joining(TRADE.JOIN_TRADE_TO_SIDE)\n")),(0,s.kt)("h3",{id:"parameterised-joins"},"Parameterised joins"),(0,s.kt)("p",null,"Some join operations require external parameters that are not available in the context of the table-join definition, but will be available when the view repository is accessed (e.g. client enriched definitions), so an option exists to create parameterised joins."),(0,s.kt)("p",null,"These are typically used in Request Server queries:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'view("INSTRUMENT_PARAMETERS", INSTRUMENT) {\n    joins {\n        joining(ALT_INSTRUMENT_ID, JoinType.INNER) {\n            on(INSTRUMENT.ID to ALT_INSTRUMENT_ID.INSTRUMENT_ID)\n                .and(ALT_INSTRUMENT_ID.ALTERNATE_TYPE.asParameter())\n        }\n    }\n    fields {\n        ALT_INSTRUMENT_ID {\n            ALTERNATE_CODE withAlias "INSTRUMENT_CODE"\n        }\n        INSTRUMENT {\n            NAME withPrefix INSTRUMENT\n        }\n    }\n}\n')),(0,s.kt)("p",null,"So for the above, if we had a Request Server using the view, it would make ",(0,s.kt)("inlineCode",{parentName:"p"},"ALTERNATE_TYPE")," available as a field input parameter."),(0,s.kt)("h3",{id:"dynamic-joins"},"Dynamic joins"),(0,s.kt)("p",null,"These have a shared syntax with derived fields. However, rather than specifying a field name and type, the view should always return an entity index type of the table you\u2019re joining on."),(0,s.kt)("p",null,"As with derived fields, you can use the ",(0,s.kt)("inlineCode",{parentName:"p"},"withEntity")," and the ",(0,s.kt)("inlineCode",{parentName:"p"},"withInput")," syntax. However, the lambda should always return an entity index object or null. Also, it should always return the same type. It is not possible to switch dynamically between indices, so it should always return the same type or null. It is possible to add further ",(0,s.kt)("inlineCode",{parentName:"p"},"and")," clauses afterwards."),(0,s.kt)("h4",{id:"examples"},"Examples"),(0,s.kt)("h5",{id:"example-1"},"Example 1"),(0,s.kt)("p",null,"Before:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},"joining(fix, backwardsJoin = true) {\n   on(TRADE_TO_SIDE { FIX_ID } to fix { SIDE_ID })\n      .and(fix { SIDE_TYPE } to SideType.FIX)\n      .joining(fixCal, JoinType.INNER, backwardsJoin = true) {\n        on(fix { CALENDAR_ID } to fixCal { CALENDAR_ID })\n      }\n")),(0,s.kt)("p",null,"After:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},"joining(fix, backwardsJoin = true) {\n   on {\n      withEntity(TRADE_TO_SIDE) { tradeToSide ->\n        TradeSide.BySideId(tradeToSide.fixId)\n      }\n   }\n   .and(fix { SIDE_TYPE } to SideType.FIX)\n   .joining(fixCal, JoinType.INNER, backwardsJoin = true)\n")),(0,s.kt)("h5",{id:"example-2"},"Example 2"),(0,s.kt)("p",null,"Before:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},"joining(fixCal, JoinType.INNER, backwardsJoin = true) {\n    on(fix { CALENDAR_ID } to fixCal { CALENDAR_ID })\n}\n")),(0,s.kt)("p",null,"After:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},".joining(fixCal, JoinType.INNER, backwardsJoin = true) {\n   on {\n      withInput(fix { CALENDAR_ID }) { calendarId ->\n         when (calendarId) {\n            null -> null\n            else -> TradeCalendar.ByCalendarId(calendarId)\n         }\n      }\n   }\n}\n")),(0,s.kt)("h4",{id:"exercise-22-changing-trade_view-joins"},"Exercise 2.2 Changing TRADE_VIEW JOINs"),(0,s.kt)("admonition",{title:"ESTIMATED TIME",type:"info"},(0,s.kt)("p",{parentName:"admonition"},"15 mins")),(0,s.kt)("p",null,"Change the TRADE_VIEW JOINs types to INNER. Make sure the syntax uses curly brackets to link fields, and that the JOINs statements are simplified with Dictionary-joined."))}m.isMDXComponent=!0},55003:function(e,t,n){t.Z=n.p+"assets/images/standbysmall-alpha-notify-b900e848a2b020698c98ef1e9c62fc77.png"}}]);