"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[78737],{43385:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return k},frontMatter:function(){return d},metadata:function(){return o},toc:function(){return c}});var a=n(87462),r=n(63366),s=(n(67294),n(3905)),i=(n(61839),["components"]),d={title:"Quick Start - Add business logic",sidebar_label:"Add business logic",id:"add-business-logic",keywords:["getting started","quick start","dataserver","event handler","business logic"],tags:["getting started","quick start","dataserver","event handler","business logic"]},l=void 0,o={unversionedId:"getting-started/quick-start/add-business-logic",id:"getting-started/quick-start/add-business-logic",title:"Quick Start - Add business logic",description:"We have a table; now we want to be able to see its content and create new entries.",source:"@site/docs/01_getting-started/02_quick-start/04_add-business-logic.md",sourceDirName:"01_getting-started/02_quick-start",slug:"/getting-started/quick-start/add-business-logic",permalink:"/next/getting-started/quick-start/add-business-logic",draft:!1,tags:[{label:"getting started",permalink:"/next/tags/getting-started"},{label:"quick start",permalink:"/next/tags/quick-start"},{label:"dataserver",permalink:"/next/tags/dataserver"},{label:"event handler",permalink:"/next/tags/event-handler"},{label:"business logic",permalink:"/next/tags/business-logic"}],version:"current",sidebarPosition:4,frontMatter:{title:"Quick Start - Add business logic",sidebar_label:"Add business logic",id:"add-business-logic",keywords:["getting started","quick start","dataserver","event handler","business logic"],tags:["getting started","quick start","dataserver","event handler","business logic"]},sidebar:"learningSidebar",previous:{title:"Define the data model",permalink:"/next/getting-started/quick-start/define-the-data-model"},next:{title:"Prepare the server & build",permalink:"/next/getting-started/quick-start/prepare-the-server-and-build"}},u={},c=[{value:"Data Server",id:"data-server",level:3},{value:"Event Handler",id:"event-handler",level:3}],g={toc:c};function k(e){var t=e.components,n=(0,r.Z)(e,i);return(0,s.kt)("wrapper",(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"We have a table; now we want to be able to see its content and create new entries."),(0,s.kt)("h3",{id:"data-server"},"Data Server"),(0,s.kt)("p",null,"A ",(0,s.kt)("a",{parentName:"p",href:"/server/data-server/introduction/"},"Data Server")," allows for reading of real-time data. You must define the Data Server in the file ",(0,s.kt)("strong",{parentName:"p"},"alpha-dataserver.kts"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'dataServer {\n    query("ALL_TRADES", TRADE)\n}\n')),(0,s.kt)("h3",{id:"event-handler"},"Event Handler"),(0,s.kt)("p",null,"Next, we want to be able to insert rows into our table. For this, you need to define an ",(0,s.kt)("a",{parentName:"p",href:"/server/event-handler/introduction/"},"Event Handler")," in the file ",(0,s.kt)("strong",{parentName:"p"},"alpha-eventhandler.kts"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'eventHandler {\n\n    eventHandler<Trade>(name = "TRADE_INSERT") {\n        onCommit { event ->\n            entityDb.insert(event.details)\n            ack()\n        }\n    }\n\n}\n')))}k.isMDXComponent=!0}}]);