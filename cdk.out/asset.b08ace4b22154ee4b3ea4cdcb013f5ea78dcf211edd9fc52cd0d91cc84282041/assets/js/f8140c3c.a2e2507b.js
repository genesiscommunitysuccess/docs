"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[54630],{66634:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return m}});var a=n(87462),o=n(63366),i=(n(67294),n(3905)),r=(n(61839),["components"]),s={},l=void 0,c={unversionedId:"web/testing/docs/api/foundation-testing.createcomponentsuite",id:"version-2022.3/web/testing/docs/api/foundation-testing.createcomponentsuite",title:"foundation-testing.createcomponentsuite",description:"Home &gt; @genesislcap/foundation-testing &gt; createComponentSuite",source:"@site/versioned_docs/version-2022.3/04_web/06_testing/docs/api/foundation-testing.createcomponentsuite.md",sourceDirName:"04_web/06_testing/docs/api",slug:"/web/testing/docs/api/foundation-testing.createcomponentsuite",permalink:"/web/testing/docs/api/foundation-testing.createcomponentsuite",draft:!1,tags:[],version:"2022.3",frontMatter:{}},p={},m=[{value:"createComponentSuite() function",id:"createcomponentsuite-function",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Remarks",id:"remarks",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Example 3",id:"example-3",level:2}],u={toc:m};function d(e){var t=e.components,n=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/web/testing/docs/api/"},"Home")," ",">"," ",(0,i.kt)("a",{parentName:"p",href:"/web/testing/docs/api/foundation-testing"},"@genesislcap/foundation-testing")," ",">"," ",(0,i.kt)("a",{parentName:"p",href:"/web/testing/docs/api/foundation-testing.createcomponentsuite"},"createComponentSuite")),(0,i.kt)("h2",{id:"createcomponentsuite-function"},"createComponentSuite() function"),(0,i.kt)("p",null,"Create component test suite."),(0,i.kt)("b",null,"Signature:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"export declare function createComponentSuite<TElement = HTMLElement>(title: string, elementNameOrGetter: string | ElementGetter, context?: ComponentContext<TElement>, registrations?: Registration<any>[]): uvu.Test<ComponentContext<TElement>>;\n")),(0,i.kt)("h2",{id:"parameters"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"title"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"Title of the test suite")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"elementNameOrGetter"),(0,i.kt)("td",{parentName:"tr",align:null},"string ","|"," ",(0,i.kt)("a",{parentName:"td",href:"/web/testing/docs/api/foundation-testing.elementgetter"},"ElementGetter")),(0,i.kt)("td",{parentName:"tr",align:null},"Element tag name or getter which is used to create the element within the fixture")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"context"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/web/testing/docs/api/foundation-testing.componentcontext"},"ComponentContext"),"<","TElement",">"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("i",null,"(Optional)")," Optional component context ",(0,i.kt)("a",{parentName:"td",href:"/web/testing/docs/api/foundation-testing.componentcontext"},"ComponentContext"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"registrations"),(0,i.kt)("td",{parentName:"tr",align:null},"Registration","<","any",">","[","]"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("i",null,"(Optional)")," Optional array of DI container registrations")))),(0,i.kt)("b",null,"Returns:"),(0,i.kt)("p",null,"uvu.Test","<",(0,i.kt)("a",{parentName:"p",href:"/web/testing/docs/api/foundation-testing.componentcontext"},"ComponentContext"),"<","TElement",">",">"),(0,i.kt)("p",null,"The test suite"),(0,i.kt)("h2",{id:"remarks"},"Remarks"),(0,i.kt)("p",null,"Used to test function output given certain input arguments."),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("p",null,"Simple suite using the tag name of the component."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { createComponentSuite } from '@genesislcap/foundation-testing';\nimport { Component } from './component';\nComponent; // < As we're using tag name in the Suite, we hold a reference to avoid tree shaking.\nconst Suite = createComponentSuite<Component>('Component', 'my-component');\n// test cases...\nSuite.run();\n")),(0,i.kt)("h2",{id:"example-2"},"Example 2"),(0,i.kt)("p",null,"Mocking a DI dependency for a composable component."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const connectMock = new ConnectMock();\nconst mocks = [Registration.instance(Connect, connectMock)];\nconst Suite = createComponentSuite<ConnectionIndicator>('ConnectionIndicator Component', () => connectionIndicator(), null, mocks);\n// test cases...\nSuite.run();\n")),(0,i.kt)("h2",{id:"example-3"},"Example 3"),(0,i.kt)("p",null,"An element will be required to test anything that directly or in-directly makes use of the DI container, for example, a service that can be injected into components, or has its own injected dependencies."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { Service } from './service';\n@customElement({\n  name: 'test-element',\n  template: html`<slot></slot>`,\n})\nclass TestElement extends FASTElement {}\nconst mocks = [...];\nconst Suite = createComponentSuite<TestElement>('Service', 'test-element', null, mocks);\n// test cases...\nSuite.run();\n")),(0,i.kt)("p",null,"Importing the service should invoke the Service's DI registration, so in your test cases you can simply query the container to get a reference to your service."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"Suite('Service.x does something expected', async ({ container }) => {\n  const myService = container.get(Service);\n  // assert\n});\n")),(0,i.kt)("p",null,"You can optionally add the service to the test element for lookup convenience, but this is not required."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"class TestElement extends FASTElement {\n  @Service service: Service;\n}\nSuite('Element has service injected', async ({ element }) => {\n  assert.ok(element.service);\n});\n")))}d.isMDXComponent=!0}}]);