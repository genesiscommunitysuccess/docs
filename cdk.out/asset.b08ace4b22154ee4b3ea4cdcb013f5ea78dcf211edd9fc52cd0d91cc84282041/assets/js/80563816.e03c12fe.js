"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[66241],{81995:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return l},default:function(){return c},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return u}});var i=t(87462),a=t(63366),r=(t(67294),t(3905)),s=(t(61839),["components"]),o={title:"Linked UI components",id:"linked-ui-components"},l="Linked UI components",d={unversionedId:"fuse/features/linked-ui-components",id:"version-2022.3/fuse/features/linked-ui-components",title:"Linked UI components",description:"Introduction",source:"@site/versioned_docs/version-2022.3/00_fuse/03_features/02_linked-ui-components.md",sourceDirName:"00_fuse/03_features",slug:"/fuse/features/linked-ui-components",permalink:"/fuse/features/linked-ui-components",draft:!1,tags:[],version:"2022.3",sidebarPosition:2,frontMatter:{title:"Linked UI components",id:"linked-ui-components"},sidebar:"fuseSidebar",previous:{title:"Aggregation",permalink:"/fuse/features/aggregation"},next:{title:"Layouts",permalink:"/fuse/features/layouts"}},p={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Linked grids",id:"linked-grids",level:2},{value:"Assigning a name",id:"assigning-a-name",level:2},{value:"Referencing UI elements",id:"referencing-ui-elements",level:2},{value:"Filtering",id:"filtering",level:2},{value:"Wrap-up",id:"wrap-up",level:2}],m={toc:u};function c(e){var n=e.components,o=(0,a.Z)(e,s);return(0,r.kt)("wrapper",(0,i.Z)({},m,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"linked-ui-components"},"Linked UI components"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"With Fuse it is possible to link UI components such as grids and form inputs. Linking allows us to update one component based on the status of another component."),(0,r.kt)("p",null,"Common use cases are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Updating one grid, based on selected row in another one"),(0,r.kt)("li",{parentName:"ul"},"Disabling one form field, based on selection in another one"),(0,r.kt)("li",{parentName:"ul"},"Restricting possible options in one form field, based on selection in another one")),(0,r.kt)("p",null,"Linking is a two-step process:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Assign a name to a component."),(0,r.kt)("li",{parentName:"ol"},"Reference the name when configuring another component.")),(0,r.kt)("p",null,"Let's build a simple example to see this in practice."),(0,r.kt)("h2",{id:"linked-grids"},"Linked grids"),(0,r.kt)("p",null,"We need a page with two grids for this example. We will extend the ",(0,r.kt)("a",{parentName:"p",href:"/fuse/quick-start/add-features/#grid"},"home page")," from the quick start guide to contain one more grid."),(0,r.kt)("p",null,"First, let's add ",(0,r.kt)("inlineCode",{parentName:"p"},"Instrument.kt")," file to ",(0,r.kt)("inlineCode",{parentName:"p"},"src/main/kotlin/global/genesis/alpha/model")," folder."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"package global.genesis.alpha.model\n\nimport global.genesis.gpl.api.schema.Persist\nimport global.genesis.gpl.api.schema.Table\n\n@Persist\nobject INSTRUMENT : Table(11_001) {\n    val instrumentId by varchar().nonNullable()\n    val instrumentName by varchar()\n    val marketId by varchar()\n    val countryCode by varchar()\n    val currencyId by varchar()\n    val assetClass by varchar()\n\n    override val primaryKey by primaryKey(instrumentId)\n    val instrumentNameKey by uniqueIndex(instrumentName)\n}\n")),(0,r.kt)("p",null,"Now, let's update the home page layout to display both grids at the same time:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'page("Home") {\n    verticalLayout {\n        entityManager(\n            entity = INSTRUMENT,\n            title = "Instruments",\n            operations = listOf(ADD),\n        )\n\n        entityManager(\n            entity = TRADE,\n            title = "Trades",\n            operations = listOf(ADD),\n        )\n    }\n}\n')),(0,r.kt)("p",null,"You should now have a page similar to below. At this point, the two grids are independent. Let's see how we can link them in the next section."),(0,r.kt)("p",null,(0,r.kt)("img",{src:t(90642).Z,width:"2218",height:"1108"})),(0,r.kt)("h2",{id:"assigning-a-name"},"Assigning a name"),(0,r.kt)("p",null,"The first step in linking is to give an element a name. To name an element, simply assign it to a Kotlin variable."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Note that we use ",(0,r.kt)("inlineCode",{parentName:"p"},"by")," keyword instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"=")," here to capture more information about the property.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'// highlight-next-line\nval instrumentGrid by entityManager(\n    entity = INSTRUMENT,\n    title = "Instruments",\n    operations = listOf(ADD),\n)\n')),(0,r.kt)("h2",{id:"referencing-ui-elements"},"Referencing UI elements"),(0,r.kt)("p",null,"Once we have a name, we can use it when configuring other elements. Let's configure filtering in the trade grid, based on row selection in the instrument grid:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'entityManager(\n    entity = TRADE,\n    title = "Trades",\n    operations = listOf(ADD),\n) {\n    // highlight-start\n    filter {\n        instrumentId eq instrumentGrid.entity.instrumentId\n    }\n    // highlight-end\n}\n')),(0,r.kt)("p",null,"Both trades and instruments have the ",(0,r.kt)("inlineCode",{parentName:"p"},"instrumentId")," field. Here, we restrict displayed trades to only those with the ",(0,r.kt)("inlineCode",{parentName:"p"},"instrumentId")," matching that of the selected instrument."),(0,r.kt)("h2",{id:"filtering"},"Filtering"),(0,r.kt)("p",null,"Let's look at ",(0,r.kt)("inlineCode",{parentName:"p"},"filter")," block in more detail. It allows us to configure precisely the data displayed in a grid:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"filter {\n    side eq Side.BUY\n}\n")),(0,r.kt)("p",null,"We can combine multiple conditions and use the same ",(0,r.kt)("a",{parentName:"p",href:"/fuse/features/aggregation/#simple-conditions"},"conditional operators")," as when configuring aggregation (",(0,r.kt)("inlineCode",{parentName:"p"},"eq"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"neq"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"gt")," etc.):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"filter {\n    side eq Side.BUY\n    quantity gte 50\n}\n")),(0,r.kt)("p",null,"Grids provide an ",(0,r.kt)("inlineCode",{parentName:"p"},"entity")," property e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"instrumentGrid.entity"),". It refers to the selected row in that grid (if any)."),(0,r.kt)("p",null,"Entity property conforms to the same data model you have configured for your grid. In this case, ",(0,r.kt)("inlineCode",{parentName:"p"},"instrumentGrid")," uses ",(0,r.kt)("inlineCode",{parentName:"p"},"INSTRUMENT")," model, so you will be able to access all the instrument model fields such as ",(0,r.kt)("inlineCode",{parentName:"p"},"instrumentGrid.entity.name"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"instrumentGrid.entity.instrumentId")," and so on."),(0,r.kt)("h2",{id:"wrap-up"},"Wrap-up"),(0,r.kt)("p",null,"You should now see a page with two linked grids. Whenever instrument selection changes, the trade grid will refresh to display only the relevant trades:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:t(72760).Z,width:"2246",height:"1234"})))}c.isMDXComponent=!0},72760:function(e,n,t){n.Z=t.p+"assets/images/gpl-seed-grids-linked-f4cecf3fd462ca1606ca5655d76b0997.png"},90642:function(e,n,t){n.Z=t.p+"assets/images/gpl-seed-grids-3e782656232fe257380e177b3c989232.png"}}]);