"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[88277],{85162:function(e,n,t){t.d(n,{Z:function(){return o}});var i=t(67294),r=t(86010),s="tabItem_Ymn6";function o(e){var n=e.children,t=e.hidden,o=e.className;return i.createElement("div",{role:"tabpanel",className:(0,r.Z)(s,o),hidden:t},n)}},65488:function(e,n,t){t.d(n,{Z:function(){return m}});var i=t(87462),r=t(67294),s=t(86010),o=t(72389),a=t(67392),l=t(7094),u=t(12466),p="tabList__CuJ",c="tabItem_LNqP";function d(e){var n,t,o=e.lazy,d=e.block,m=e.defaultValue,g=e.values,f=e.groupId,h=e.className,v=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=g?g:v.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),b=(0,a.l)(k,(function(e,n){return e.value===n.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var T=null===m?m:null!=(n=null!=m?m:null==(t=v.find((function(e){return e.props.default})))?void 0:t.props.value)?n:v[0].props.value;if(null!==T&&!k.some((function(e){return e.value===T})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+T+'" but none of its children has the corresponding value. Available values are: '+k.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var N=(0,l.U)(),E=N.tabGroupChoices,y=N.setTabGroupChoices,S=(0,r.useState)(T),C=S[0],R=S[1],w=[],H=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=f){var _=E[f];null!=_&&_!==C&&k.some((function(e){return e.value===_}))&&R(_)}var O=function(e){var n=e.currentTarget,t=w.indexOf(n),i=k[t].value;i!==C&&(H(n),R(i),null!=f&&y(f,String(i)))},x=function(e){var n,t=null;switch(e.key){case"ArrowRight":var i,r=w.indexOf(e.currentTarget)+1;t=null!=(i=w[r])?i:w[0];break;case"ArrowLeft":var s,o=w.indexOf(e.currentTarget)-1;t=null!=(s=w[o])?s:w[w.length-1]}null==(n=t)||n.focus()};return r.createElement("div",{className:(0,s.Z)("tabs-container",p)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":d},h)},k.map((function(e){var n=e.value,t=e.label,o=e.attributes;return r.createElement("li",(0,i.Z)({role:"tab",tabIndex:C===n?0:-1,"aria-selected":C===n,key:n,ref:function(e){return w.push(e)},onKeyDown:x,onFocus:O,onClick:O},o,{className:(0,s.Z)("tabs__item",c,null==o?void 0:o.className,{"tabs__item--active":C===n})}),null!=t?t:n)}))),o?(0,r.cloneElement)(v.filter((function(e){return e.props.value===C}))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},v.map((function(e,n){return(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==C})}))))}function m(e){var n=(0,o.Z)();return r.createElement(d,(0,i.Z)({key:String(n)},e))}},82014:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return p},default:function(){return f},frontMatter:function(){return u},metadata:function(){return c},toc:function(){return m}});var i=t(87462),r=t(63366),s=(t(67294),t(3905)),o=(t(61839),t(65488)),a=t(85162),l=["components"],u={title:"Server Configuration - Genesis Router",sidebar_label:"Genesis Router",id:"genesis-router",keywords:["server","configuration","genesis router"],tags:["server","configuration","genesis router"]},p=void 0,c={unversionedId:"server/configuring-runtime/genesis-router",id:"server/configuring-runtime/genesis-router",title:"Server Configuration - Genesis Router",description:"Genesis Router is responsible for all communication between front end and back end.",source:"@site/docs/03_server/01_configuring-runtime/05_genesis-router.md",sourceDirName:"03_server/01_configuring-runtime",slug:"/server/configuring-runtime/genesis-router",permalink:"/next/server/configuring-runtime/genesis-router",draft:!1,tags:[{label:"server",permalink:"/next/tags/server"},{label:"configuration",permalink:"/next/tags/configuration"},{label:"genesis router",permalink:"/next/tags/genesis-router"}],version:"current",sidebarPosition:5,frontMatter:{title:"Server Configuration - Genesis Router",sidebar_label:"Genesis Router",id:"genesis-router",keywords:["server","configuration","genesis router"],tags:["server","configuration","genesis router"]},sidebar:"serverModulesSidebar",previous:{title:"Service Definitions",permalink:"/next/server/configuring-runtime/service-definitions"},next:{title:"Cache",permalink:"/next/server/configuring-runtime/cache"}},d={},m=[{value:"Configuring Runtime",id:"configuring-runtime",level:2},{value:"Configuring in processes.xml",id:"configuring-in-processesxml",level:3},{value:"Configuring in service-definitions.xml",id:"configuring-in-service-definitionsxml",level:3},{value:"Router configuration",id:"router-configuration",level:2},{value:"Custom endpoints",id:"custom-endpoints",level:3},{value:"FileEndpointCommon",id:"fileendpointcommon",level:4},{value:"FileProcessor",id:"fileprocessor",level:4},{value:"Testing the Genesis Router",id:"testing-the-genesis-router",level:3}],g={toc:m};function f(e){var n=e.components,u=(0,r.Z)(e,l);return(0,s.kt)("wrapper",(0,i.Z)({},g,u,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("img",{src:t(18354).Z,width:"825",height:"525"}),"\nGenesis Router is responsible for all communication between front end and back end.\nOn the Genesis low-code platform, the front end connects to the back end through HTTPS or secure Websockets via a reverse proxy.\nThis must run on the same instance as the back end. The GENESIS_ROUTER service on the server acts as the endpoint for all API calls and listens (by default) to port 9064.\nThis is configured in the file ",(0,s.kt)("strong",{parentName:"p"},"genesis-router.kts"),"."),(0,s.kt)("p",null,"Here is an example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kts"},'router {\n    webPort = 9064\n    socketPort = 9065\n\n    httpServerCodec {\n        maxInitialLineLength = 4096\n        maxHeaderSize = 8192\n        maxChunkSize = 8192\n        validateHeaders = true\n        initialBufferSize = 128\n    }\n    httpObjectAggregator {\n        maxContentLength = 262144\n        closeOnExpectationFailed = false\n    }\n\n    routes {\n        route(messageType = "ALL_ORDERS", process = "OEMS_DATASERVER")\n        route(messageType = "ALL_TRADES", process = "OEMS_DATASERVER")\n        route(messageType = "ALL_ORDER_AUDITS", process = "OEMS_DATASERVER")\n    }\n\n    allowList {\n        entry("ALL_ORDERS")\n        entry("ALL_TRADES")\n        entry("ALL_ORDER_AUDITS")\n    }\n}\n')),(0,s.kt)("h2",{id:"configuring-runtime"},"Configuring Runtime"),(0,s.kt)("p",null,"There are two important files in your application that contain configuration information:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("em",{parentName:"li"},"application-name"),(0,s.kt)("strong",{parentName:"li"},"-processes.xml")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("em",{parentName:"li"},"application-name"),(0,s.kt)("strong",{parentName:"li"},"-service-definitions.xml"))),(0,s.kt)("h3",{id:"configuring-in-processesxml"},"Configuring in processes.xml"),(0,s.kt)("p",null,"Here is an example of the Genesis Router's configuration in an application's ",(0,s.kt)("strong",{parentName:"p"},"processes.xml")," file:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-xml"},'  <process name="GENESIS_ROUTER">\n    <start>true</start>\n    <scheduleRestart>true</scheduleRestart>\n    <groupId>GENESIS</groupId>\n    <options>-Xmx512m -DXSD_VALIDATE=false</options>\n    <module>router</module>\n    <package>global.genesis.router,global.genesis.console</package>\n    <config>router-process-config.kts</config>\n    <script>genesis-router.kts<\/script>\n    <language>pal</language>\n    <classpath>genesis-console-*.jar</classpath>\n    <description>Socket, Websocket and HTTP proxy which routes incoming messages to GENESIS microservices</description>\n</process>\n')),(0,s.kt)("p",null,"For more information on the tags that can be set within the configuration for your application, go to our page on ",(0,s.kt)("a",{parentName:"p",href:"/server/configuring-runtime/processes/"},"processes.xml"),"."),(0,s.kt)("h3",{id:"configuring-in-service-definitionsxml"},"Configuring in service-definitions.xml"),(0,s.kt)("p",null,"Here is an example of the Genesis-router's service configuration:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-xml"},'  <service host="localhost" name="GENESIS_ROUTER" port="9017"/>\n')),(0,s.kt)("p",null,"For more information on the attributes that can be set here, go to our page on ",(0,s.kt)("a",{parentName:"p",href:"/server/configuring-runtime/service-definitions/"},"service definitions"),"."),(0,s.kt)("h2",{id:"router-configuration"},"Router configuration"),(0,s.kt)("p",null,"Let's have a look at the different options for configuring this file. You have seen some, but not all of these in the example above."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"webPort"),": This port is used for tcp/ip socket. You must declare a port, and it cannot be below 1024."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"socketPort"),": This port is used for http/websockets. You must declare a port, and it cannot be below 1024."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"dataserverPollingTimeout"),": This setting contains the timeout for polling the data-server resources in the system in seconds. Default value is 60 seconds."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"authDisabled"),": If set to true, this setting disables all authentication, and is used for development mode. Default value is false."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"nettyLoggingEnabled"),": This setting if set to true, enables internal netty logging. Default value false."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Netty configuration"),":"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"httpServerCodecDefinition"),": A combination of HttpRequestDecoder and HttpResponseEncoder, which enables easier server-side HTTP implementation.\nFor more information, follow this ",(0,s.kt)("a",{parentName:"p",href:"https://netty.io/4.1/api/io/netty/handler/codec/http/HttpServerCodec.html"},"link"),"."),(0,s.kt)("p",null,"Different decoder options"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"maxInitialLineLength"),": default value: 4096"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"maxHeaderSize"),": default value: 8192"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"maxChunkSize"),": default value: 8192"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"validateHeaders"),": default value: true"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"initialBufferSize"),": default value: 128")),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"httpObjectAggregatorDefinition"),": A ChannelHandler that aggregates an HttpMessage and its following HttpContents into a single FullHttpRequest or FullHttpResponse (depending on if it used to handle requests or responses) with no following HttpContents.\nFor more information, follow this ",(0,s.kt)("a",{parentName:"p",href:"https://netty.io/4.1/api/io/netty/handler/codec/http/HttpObjectAggregator.html"},"link"),"."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"maxContentLength"),": the maximum length of the aggregated content in bytes. Default value: 262144"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"closeOnExpectationFailed"),": If a 100-continue response is detected but the content length is too large, then true means close the connection. Otherwise, the connection will remain open and data will be consumed and discarded until the next request is received. Default value: false")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Message routes"),":"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"routes"),": You can redirect some microservice messages to particular processes by declaring new ",(0,s.kt)("inlineCode",{parentName:"p"},"route")," blocks within this one."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"route"),": Is the defined route taking both a ",(0,s.kt)("inlineCode",{parentName:"p"},"messageType")," and a specific ",(0,s.kt)("inlineCode",{parentName:"p"},"process"),"."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Allowed resources"),":"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"allowList"),":  You can limit the resources exposed by the Genesis Router. Without at least one ",(0,s.kt)("inlineCode",{parentName:"p"},"entry")," block, every resource will be available. It is important to note that the following message types will always be allowed by default, regardless of the allowList definition:\nEVENT_LOGIN_AUTH, EVENT_LOGOUT, MORE_ROWS, MORE_COLUMNS, DATA_LOGOFF, DATA_GET"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"entry:")," Is the additional accepted ",(0,s.kt)("inlineCode",{parentName:"p"},"messageType"),"."),(0,s.kt)("h3",{id:"custom-endpoints"},"Custom endpoints"),(0,s.kt)("p",null,"To create a custom endpoint using the Genesis Router, simply implement the ",(0,s.kt)("inlineCode",{parentName:"p"},"WebEndpoint")," interface provided by Genesis Router. Call upon the ",(0,s.kt)("inlineCode",{parentName:"p"},"registerEndpoint")," method of an injected ",(0,s.kt)("inlineCode",{parentName:"p"},"WebEndpointRegistry")," object."),(0,s.kt)("p",null,"In the following examples, a ",(0,s.kt)("inlineCode",{parentName:"p"},"FileEndpointCommon")," class has also been created to hold utility methods that may be needed across multiple endpoints:"),(0,s.kt)("h4",{id:"fileendpointcommon"},"FileEndpointCommon"),(0,s.kt)(o.Z,{defaultValue:"kotlin",values:[{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"}],mdxType:"Tabs"},(0,s.kt)(a.Z,{value:"kotlin",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'public class FileEndpointCommon {\n    companion object {\n        const val ENDPOINT_NAME = "file-handler"\n   }\n}\n'))),(0,s.kt)(a.Z,{value:"java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'public class FileEndpointCommon {\n    static final String ENDPOINT_NAME = "file-handler";\n}\n')))),(0,s.kt)("h4",{id:"fileprocessor"},"FileProcessor"),(0,s.kt)(o.Z,{defaultValue:"kotlin",values:[{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"}],mdxType:"Tabs"},(0,s.kt)(a.Z,{value:"kotlin",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Module\nclass FileProcessorKotlin @Inject constructor(\n    private val registry: WebEndpointRegistry\n) : WebEndpoint {\n    @PostConstruct\n    fun init() {\n        registry.registerEndpoint(FileEndpointCommon.ENDPOINT_NAME, this)\n    }\n\n    override fun allowedMethods(): Set<RequestType> {\n        return ALLOWED_HTTP_METHODS\n    }\n\n    override fun name(): String {\n        return "upload"\n    }\n\n    override fun process(s: String, fullHttpRequest: FullHttpRequest, channel: Channel): Any {\n        LOG.debug("Hit {}/{} endpoint", FileEndpointCommon.ENDPOINT_NAME, name())\n        //This is where you would make calls to other services and libraries with the newly uploaded file.\n        val responseJson = "{ \\"Result\\": \\"Successful upload\\"}".toByteArray(StandardCharsets.UTF_8)\n        val responseBuffer = Unpooled.wrappedBuffer(responseJson)\n        val response = DefaultFullHttpResponse(\n            HttpVersion.HTTP_1_1,\n            HttpResponseStatus.OK,\n            responseBuffer\n        )\n        response.headers().add(HttpHeaderNames.CONTENT_TYPE, HttpHeaderValues.APPLICATION_JSON)\n        HttpUtil.setContentLength(response, responseJson.size.toLong())\n        return response\n    }\n\n    override fun requiresAuth(): Boolean {\n        return if (System.getProperty("TEST_MODE") != null) {\n            false\n        } else {\n            super.requiresAuth()\n        }\n    }\n\n    companion object {\n        private val LOG = LoggerFactory.getLogger(FileProcessorKotlin::class.java)\n        private val ALLOWED_HTTP_METHODS: Set<RequestType> = ImmutableSet.of(RequestType.POST)\n    }\n}\n'))),(0,s.kt)(a.Z,{value:"java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'@Module\npublic class FileProcessor implements WebEndpoint {\n\n    private static final Logger LOG = LoggerFactory.getLogger(FileProcessor.class);\n    private static final Set<RequestType> ALLOWED_HTTP_METHODS = ImmutableSet.of(RequestType.POST);\n\n    private final WebEndpointRegistry registry;\n\n    @Inject\n    public FileProcessor(WebEndpointRegistry registry) {\n        this.registry = registry;\n    }\n\n    @PostConstruct\n    public void init() {\n        this.registry.registerEndpoint(FileEndpointCommon.ENDPOINT_NAME, this);\n    }\n\n    @NotNull\n    @Override\n    public Set<RequestType> allowedMethods() {\n        return ALLOWED_HTTP_METHODS;\n    }\n\n    @NotNull\n    @Override\n    public String name() {\n        return "upload";\n    }\n\n    @NotNull\n    @Override\n    public Object process(@NotNull String s, @NotNull FullHttpRequest fullHttpRequest, @NotNull Channel channel) {\n        final byte[] responseJson = "{ \\"Result\\": \\"Successful upload\\"}".getBytes(StandardCharsets.UTF_8);\n        //This is where you would make calls to other services and libraries with the newly uploaded file.\n        final ByteBuf responseBuffer = Unpooled.wrappedBuffer(responseJson);\n        final DefaultFullHttpResponse response = new DefaultFullHttpResponse(\n                HttpVersion.HTTP_1_1,\n                HttpResponseStatus.OK,\n                responseBuffer\n        );\n        response.headers().add(HttpHeaderNames.CONTENT_TYPE, HttpHeaderValues.APPLICATION_JSON);\n        HttpUtil.setContentLength(response, responseJson.length);\n        return response;\n    }\n\n    @Override\n    public boolean requiresAuth() {\n        if(System.getProperty("TEST_MODE") != null){\n            return false;\n        } else {\n            return WebEndpoint.super.requiresAuth();\n        }\n    }\n\n}\n')))),(0,s.kt)("h3",{id:"testing-the-genesis-router"},"Testing the Genesis Router"),(0,s.kt)("p",null,"To create unit tests for Genesis Router, you can extend the ",(0,s.kt)("inlineCode",{parentName:"p"},"AbstractGenesisTestSupport")," class and specify the ",(0,s.kt)("inlineCode",{parentName:"p"},"genesis-router.kts")," as the Script file name. Examples of how you would initialise a test extending this class are provided below."),(0,s.kt)("p",null,"More information about how testing works is in our section on ",(0,s.kt)("a",{parentName:"p",href:"/operations/testing/integration-testing/"},"Integration testing"),"."),(0,s.kt)(o.Z,{defaultValue:"kotlin",values:[{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"}],mdxType:"Tabs"},(0,s.kt)(a.Z,{value:"kotlin",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin"},'class TestEndpoint : AbstractGenesisTestSupport<GenesisSet>(\n    GenesisTestConfig {\n        packageNames = mutableListOf("global.genesis.router", "org.file.processor")\n        genesisHome = "/genesisHome"\n        scriptFileName = "genesis-router.kts"\n        parser = { it }\n    }\n) {\n    override fun createDictionary(): GenesisDictionary = testDictionary()}\n\n    @Test\n    fun testRouterEndPoint() {\n        val client = HttpClient.newHttpClient()\n        val request = HttpRequest\n            .newBuilder(URI("http://localhost:9064/file-handler/upload"))\n            .version(HttpClient.Version.HTTP_1_1)\n            .POST(HttpRequest.BodyPublishers.ofString("TEXT"))\n            .build()\n        val response = client.send(request, HttpResponse.BodyHandlers.ofString())\n        Assert.assertEquals("{ \\"Result\\": \\"Successful upload\\"}", response.body())\n    }\n'))),(0,s.kt)(a.Z,{value:"java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'public class TestEndpoint extends AbstractGenesisTestSupport<GenesisSet> {\n    public TestEndpoint () {\n        super(GenesisTestConfig.builder()\n            .setPackageNames(List.of("global.genesis.router", "org.file.processor"))\n            .setGenesisHome("/genesisHome")\n            .setScriptFileName("genesis-router.kts")\n            .setParser(e -> e)\n            .build());\n    }\n\n    @Test\n    public void testRouterEndpoint() throws URISyntaxException, IOException, InterruptedException {\n        var client = HttpClient.newHttpClient();\n        var request = HttpRequest\n                .newBuilder(new URI("http://localhost:9064/file-handler/upload"))\n                .version(HttpClient.Version.HTTP_1_1)\n                .POST(HttpRequest.BodyPublishers.ofString("TEXT"))\n                .build();\n\n        var response = client.send(request, HttpResponse.BodyHandlers.ofString());\n        assertEquals("{ \\"Result\\": \\"Successful upload\\"}", response.body());\n    }\n}\n')))))}f.isMDXComponent=!0},18354:function(e,n,t){n.Z=t.p+"assets/images/router_diagram-303b8e040bd589783fe6317610866d8a.png"}}]);