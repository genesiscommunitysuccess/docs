"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[7036],{40837:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return r},metadata:function(){return d},toc:function(){return p}});var a=t(87462),i=t(63366),o=(t(67294),t(3905)),s=(t(61839),["components"]),r={title:"API Reference - Dependency Injection",sidebar_label:"Dependency Injection",id:"dependency-injection",keywords:["database","api","reference","dependency","injection"],tags:["database","api","reference","dependency","injection"]},l=void 0,d={unversionedId:"database/api-reference/dependency-injection",id:"version-2022.3/database/api-reference/dependency-injection",title:"API Reference - Dependency Injection",description:"Genesis supports some of the key annotations from javax.annotation and javax.inject, defined in Java Platform Enterprise Edition, using Google Guice as the internal dependency injection mechanism. In addition, Genesis provides some of its own annotations.",source:"@site/versioned_docs/version-2022.3/02_database/09_api-reference/02_dependency-injection.md",sourceDirName:"02_database/09_api-reference",slug:"/database/api-reference/dependency-injection",permalink:"/database/api-reference/dependency-injection",draft:!1,tags:[{label:"database",permalink:"/tags/database"},{label:"api",permalink:"/tags/api"},{label:"reference",permalink:"/tags/reference"},{label:"dependency",permalink:"/tags/dependency"},{label:"injection",permalink:"/tags/injection"}],version:"2022.3",sidebarPosition:2,frontMatter:{title:"API Reference - Dependency Injection",sidebar_label:"Dependency Injection",id:"dependency-injection",keywords:["database","api","reference","dependency","injection"],tags:["database","api","reference","dependency","injection"]},sidebar:"databaseSidebar",previous:{title:"Authorisation API",permalink:"/database/api-reference/authorisation-api"},next:{title:"Event Handler API",permalink:"/database/api-reference/event-handler-api"}},c={},p=[{value:"@Module",id:"module",level:2},{value:"@ProviderOf",id:"providerof",level:2},{value:"@Inject",id:"inject",level:2},{value:"@Named",id:"named",level:2},{value:"@PostConstruct",id:"postconstruct",level:2},{value:"@PreDestroy",id:"predestroy",level:2},{value:"Example",id:"example",level:2},{value:"Conditional annotations",id:"conditional-annotations",level:2},{value:"Conditional on property",id:"conditional-on-property",level:3},{value:"Conditional on class",id:"conditional-on-class",level:3},{value:"Conditional on missing class",id:"conditional-on-missing-class",level:3},{value:"Conditional on property and missing class",id:"conditional-on-property-and-missing-class",level:3},{value:"Injectable properties from System Definition",id:"injectable-properties-from-system-definition",level:2},{value:"Example of <strong>genesis-system-definition.kts</strong> file",id:"example-of-genesis-system-definitionkts-file",level:3},{value:"System Definition property being referenced in Java file",id:"system-definition-property-being-referenced-in-java-file",level:3}],u={toc:p};function m(e){var n=e.components,t=(0,i.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Genesis supports some of the key annotations from javax.annotation and javax.inject, defined in ",(0,o.kt)("a",{parentName:"p",href:"https://docs.oracle.com/javaee/7/index.html"},"Java Platform Enterprise Edition"),", using Google Guice as the internal dependency injection mechanism. In addition, Genesis provides some of its own annotations."),(0,o.kt)("h2",{id:"module"},"@Module"),(0,o.kt)("p",null,"All classes that need to be created on microservice startup need to be annotated with the @Module annotation. This  also ensures the instance is created as singleton."),(0,o.kt)("h2",{id:"providerof"},"@ProviderOf"),(0,o.kt)("p",null,"This is used to annotate a class that is responsible for acting as Factory for a specified type. Adding the @Singleton annotation ensures only one Factory class is created."),(0,o.kt)("p",null,"Example:-"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"import com.google.inject.Provider\nimport com.google.inject.Singleton\n\n@Singleton\n@ProviderOf(type = PriceFeed::class)\nclass PriceFeedProvider : Provider<PriceFeedProvider> {\n    override fun get(): PriceFeed {\n        return new PriceFeed()\n    }\n}\n")),(0,o.kt)("h2",{id:"inject"},"@Inject"),(0,o.kt)("p",null,"This is used to annotate a field or constructor to indicate to Genesis that it should inject an object of matching type during the dependency injection stage. These types can be provided with the aforementioned ",(0,o.kt)("strong",{parentName:"p"},"@Module")," and ",(0,o.kt)("strong",{parentName:"p"},"@ProviderOf")," annotations. You should use the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.oracle.com/javaee/7/api/javax/inject/Inject.html#:~:text=Injectable%20constructors%20are%20annotated%20with,most%20one%20constructor%20per%20class.&text=%40Inject%20is%20optional%20for%20public,injectors%20to%20invoke%20default%20constructors."},"Java")," ",(0,o.kt)("strong",{parentName:"p"},"@Inject")," annotation for best practice."),(0,o.kt)("h2",{id:"named"},"@Named"),(0,o.kt)("p",null,"This annotation is used to provide Genesis system definition properties as part of the dependency injection mechanism, and should be used alongside @Inject."),(0,o.kt)("h2",{id:"postconstruct"},"@PostConstruct"),(0,o.kt)("p",null,"The Genesis microservice runtime environment will call this only once after initialisation of the object, including all injected beans."),(0,o.kt)("h2",{id:"predestroy"},"@PreDestroy"),(0,o.kt)("p",null,"The Genesis microservice runtime environment will call this only once, just before Genesis removes the object from the application context on JVM shutdown."),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"This example combines a ",(0,o.kt)("strong",{parentName:"p"},"@Module"),", ",(0,o.kt)("strong",{parentName:"p"},"@Named")," and ",(0,o.kt)("strong",{parentName:"p"},"@Inject")," annotation on a constructor and on a field, and  uses ",(0,o.kt)("strong",{parentName:"p"},"@PostConstruct")," and ",(0,o.kt)("strong",{parentName:"p"},"@PreDestroy")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Module\nclass PriceFeed @Inject constructor(@Named("CONNECTION_URL") private val connectionUrl: String) {\n\n    @Inject\n    private lateinit var value: Value\n\n    @PostConstruct\n    fun init() {\n        // code would go here\n    }\n\n    @PreDestroy\n    fun cleanUp() {\n        // code would go here\n    }\n}\n')),(0,o.kt)("h2",{id:"conditional-annotations"},"Conditional annotations"),(0,o.kt)("h3",{id:"conditional-on-property"},"Conditional on property"),(0,o.kt)("p",null,"You can define a module as conditional, based on system definition properties. As an example, the AeronDriverModule will only be instantiated if the MqLayer property is set to AERON. See the example annotations below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Module\n@ConditionalOnProperty("MqLayer", conditionalValue = "AERON")\n')),(0,o.kt)("h3",{id:"conditional-on-class"},"Conditional on class"),(0,o.kt)("p",null,"Likewise, modules can be defined to be conditional on classes, so if the selected class has been instantiated (e.g. the previous example shown as AeronDriverModule), then our dependency injection mechanism will instantiate this class as well."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Module\n@ConditionalOnClass(AeronDriverModule::class)\n")),(0,o.kt)("h3",{id:"conditional-on-missing-class"},"Conditional on missing class"),(0,o.kt)("p",null,"You can also add conditional modules on missing classes. This annotation is very helpful if you want to develop an \u201cextension\u201d mechanism as part of your application. "),(0,o.kt)("p",null,"For example, you could define an interface, and an @Module implementing this interface with a conditional on that interface class being missing. This means that if a class is defined as an @Module that implements the interface, that class will be selected (i.e. this class can be defined in an external jar and added to classpath using framework config). If no class is defined as an ",(0,o.kt)("strong",{parentName:"p"},"@Module")," to implement that interface, then the ",(0,o.kt)("strong",{parentName:"p"},"@ConditionalOnMissingClass")," module will be instantiated."),(0,o.kt)("p",null,"For example, imagine you want to create a \u201chook\u201d into the Genesis message-handling logic, so it can be extended as desired in other applications. The interface and default class would look like this in Kotlin:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'interface MessageTracer{\n    fun onMessageReceived(msg: Message)\n}\n\n@Module\n@ConditionalOnMissingClass(MessageTracer::class)\nclass DefaultMessageTracer : MessageTracer{\n    override fun onMessageReceived(msg: Message) = println("This is a message $msg")\n}\n')),(0,o.kt)("p",null,"If an application requires custom logic, a new ",(0,o.kt)("strong",{parentName:"p"},"@Module")," class could be defined in a separate jar file like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Module\nclass ProductMessageTracer : MessageTracer{\n    override fun onMessageReceived(msg: Message) = println("Hi $msg")\n}\n')),(0,o.kt)("p",null,"If the package for this class is available in the classpath (i.e.",(0,o.kt)("inlineCode",{parentName:"p"}," <classpath>")," section in processes.xml) and is also being scanned (i.e. ",(0,o.kt)("inlineCode",{parentName:"p"},"<package>")," section in processes.xml), ",(0,o.kt)("inlineCode",{parentName:"p"},"ProductMessageTracer")," will take precedence when starting the process and ",(0,o.kt)("inlineCode",{parentName:"p"},"DefaultMessageTracer")," will be ignored. Otherwise, ",(0,o.kt)("inlineCode",{parentName:"p"},"DefaultMessageTracer")," will be instantiated."),(0,o.kt)("h3",{id:"conditional-on-property-and-missing-class"},"Conditional on property and missing class"),(0,o.kt)("p",null,"Lastly, we have a combination of both \u201cconditional on property\u201d and \u201cconditional on missing class\u201c annotations. Referring to the previous example, we could use both features at once like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Module\n@ConditionalOnPropertyAndMissingClass("MessageTracer", conditionalValue = "DEFAULT", MessageTracer::class)\nclass DefaultMessageTracer : MessageTracer{\n    override fun onMessageReceived(msg: Message) = println("This is a message $msg")\n}\n\n')),(0,o.kt)("p",null,"The process will crash on start up if the system definition value for ",(0,o.kt)("inlineCode",{parentName:"p"},"MessageTracer")," is set to anything other than DEFAULT and no implementation has been provided for ",(0,o.kt)("inlineCode",{parentName:"p"},"MessageTracer"),". This annotation can be used to enforce good practice."),(0,o.kt)("h2",{id:"injectable-properties-from-system-definition"},"Injectable properties from System Definition"),(0,o.kt)("h3",{id:"example-of-genesis-system-definitionkts-file"},"Example of ",(0,o.kt)("strong",{parentName:"h3"},"genesis-system-definition.kts")," file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'systemDefinition {\n    global {\n        item(name = "CONFIG_FILE_NAME", value = "/data/")\n        // other params omitted for simplicity\n    }\n}\n')),(0,o.kt)("h3",{id:"system-definition-property-being-referenced-in-java-file"},"System Definition property being referenced in Java file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'@Inject\npublic RequestReplyDefinitionReader(RxDb db,\n                                    @Named("CONFIG_FILE_NAME") String configFileName) throws GenesisConfigurationException {\n    this(db.getDictionary(), configFileName);\n}\n')))}m.isMDXComponent=!0}}]);