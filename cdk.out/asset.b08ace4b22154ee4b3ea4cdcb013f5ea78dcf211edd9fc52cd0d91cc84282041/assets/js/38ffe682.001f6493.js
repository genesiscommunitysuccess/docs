"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[35359],{47176:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return u}});var a=n(87462),i=n(63366),r=(n(67294),n(3905)),o=(n(61839),["components"]),l={title:"Developer training - Day three",sidebar_label:"Day three",sidebar_position:5,id:"training-content-day3",keywords:["getting started","quick start","developer training","day three"],tags:["getting started","quick start","developer training","day three"]},s=void 0,d={unversionedId:"getting-started/developer-training/training-content-day3",id:"getting-started/developer-training/training-content-day3",title:"Developer training - Day three",description:"Day two recap",source:"@site/docs/01_getting-started/06_developer-training/03_training-content-day3.md",sourceDirName:"01_getting-started/06_developer-training",slug:"/getting-started/developer-training/training-content-day3",permalink:"/next/getting-started/developer-training/training-content-day3",draft:!1,tags:[{label:"getting started",permalink:"/next/tags/getting-started"},{label:"quick start",permalink:"/next/tags/quick-start"},{label:"developer training",permalink:"/next/tags/developer-training"},{label:"day three",permalink:"/next/tags/day-three"}],version:"current",sidebarPosition:5,frontMatter:{title:"Developer training - Day three",sidebar_label:"Day three",sidebar_position:5,id:"training-content-day3",keywords:["getting started","quick start","developer training","day three"],tags:["getting started","quick start","developer training","day three"]},sidebar:"learningSidebar",previous:{title:"Day two",permalink:"/next/getting-started/developer-training/training-content-day2"},next:{title:"Day four",permalink:"/next/getting-started/developer-training/training-content-day4"}},p={},u=[{value:"Views",id:"views",level:2},{value:"Entities",id:"entities",level:3},{value:"Usage",id:"usage",level:3},{value:"Exercise 3.1: using views",id:"exercise-31-using-views",level:3},{value:"Extending our application further",id:"extending-our-application-further",level:2},{value:"Adding new fields\u200b",id:"adding-new-fields",level:3},{value:"Extending the Trade table and adding a Position table",id:"extending-the-trade-table-and-adding-a-position-table",level:3},{value:"Automated testing",id:"automated-testing",level:3},{value:"Test class setup",id:"test-class-setup",level:3},{value:"Calculated data",id:"calculated-data",level:2},{value:"Exercise 3.2: derived fields",id:"exercise-32-derived-fields",level:3},{value:"Consolidators",id:"consolidators",level:2},{value:"Define the position-keeping logic in the consolidator",id:"define-the-position-keeping-logic-in-the-consolidator",level:4},{value:"Update the system files",id:"update-the-system-files",level:4},{value:"Update the processes.xml file",id:"update-the-processesxml-file",level:5},{value:"Update the service-definitions.xml file",id:"update-the-service-definitionsxml-file",level:5},{value:"UI configuring",id:"ui-configuring",level:2},{value:"Exercise 3.3: data grids",id:"exercise-33-data-grids",level:3}],g={toc:u};function c(e){var t=e.components,l=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},g,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Day two recap"),(0,r.kt)("div",null,(0,r.kt)("div",null,"Here are the main takeaways from ",(0,r.kt)("a",{href:"/getting-started/developer-training/training-content-day2/"},"Day two"),"."),(0,r.kt)("li",null,"We provided an introduction to UI, describing ",(0,r.kt)("a",{href:"/getting-started/developer-training/training-content-day2/#web-components"},"Web Components")," and ",(0,r.kt)("a",{href:"/getting-started/developer-training/training-content-day2/#micro-front-ends"},"Micro front-ends"),"."),(0,r.kt)("li",null,"The ",(0,r.kt)("a",{href:"/getting-started/developer-training/training-content-day2/#genesis-packages"},"Genesis UI packages"),"\u200b were presented"),(0,r.kt)("li",null,"We created a user interface using the Micro front-end ",(0,r.kt)("a",{href:"/getting-started/developer-training/training-content-day2/#entitymanagement"},"EntityManagement"),"."),(0,r.kt)("li",null,"We ",(0,r.kt)("a",{href:"/getting-started/developer-training/training-content-day2/#extending-our-initial-application"},"extended the application")," by adding new tables and CRUD events."))),(0,r.kt)("p",null,"This day covers:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#views"},"Views")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#automated-testing"},"Automated testing"),"\u200b"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#calculated-data"},"Calculated data")," and ",(0,r.kt)("a",{parentName:"li",href:"#consolidators"},"Consolidators")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#ui-configuring"},"UI configuring"))),(0,r.kt)("h2",{id:"views"},"Views"),(0,r.kt)("p",null,"When you set up a data model, it implies relationships between tables. For example, a TRADE has a COUNTERPARTY_ID and an INSTRUMENT_ID. That means it has a relationship with the COUNTERPARTY and INSTRUMENTS tables."),(0,r.kt)("p",null,"Views enable you join related tables to create a single holistic view."),(0,r.kt)("p",null,"In short, Views are the genesis equivalent of SQL select queries. Unlike ",(0,r.kt)("a",{parentName:"p",href:"/database/data-structures/tables/"},"tables"),", views do not have any data of their own, they are read-only, but present a view based on one or more tables. "),(0,r.kt)("p",null,"A view always starts with a single table, the root table. Other tables can be joined onto the root table to present composite data. "),(0,r.kt)("p",null,"Views are very powerful and in this training we're going to cover just the basics. When you have a chance, try to look at the ",(0,r.kt)("a",{parentName:"p",href:"/database/fields-tables-views/views/"},"documentation"),"."),(0,r.kt)("h3",{id:"entities"},"Entities"),(0,r.kt)("p",null,"During code generation, ",(0,r.kt)("a",{parentName:"p",href:"/database/data-structures/views/"},"view")," and ",(0,r.kt)("a",{parentName:"p",href:"/database/data-structures/indices/"},"index entities")," will be generated from the definitions in your application's ",(0,r.kt)("strong",{parentName:"p"},"view-dictionary.kts")," file. The name of each entity will be the same as the definition, but it is converted from snake case to camel case; for example, VIEW_NAME becomes ViewName."),(0,r.kt)("p",null,"The generated entities are kotlin data classes and can be built using the primary constructor (so you can also import Views in your Java/Kotlin code as well). Just before the object is built, it is validated to make sure all required fields have been set."),(0,r.kt)("h3",{id:"usage"},"Usage"),(0,r.kt)("p",null,"Create an ",(0,r.kt)("strong",{parentName:"p"},"alpha-view-dictionary.kts")," file inside the folder ",(0,r.kt)("strong",{parentName:"p"},"server\\jvm\\alpha-config\\src\\main\\resources\\cfg"),"."),(0,r.kt)("p",null,"The example below creates a view called ",(0,r.kt)("inlineCode",{parentName:"p"},"TRADE_VIEW"),", which joins the ",(0,r.kt)("inlineCode",{parentName:"p"},"TRADE")," table to the ",(0,r.kt)("inlineCode",{parentName:"p"},"INSTRUMENT")," table. Edit the ",(0,r.kt)("strong",{parentName:"p"},"alpha\u2013view-dictionary.kts")," file and add a view on the TRADE table:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'views {\n\n  view("TRADE_VIEW", TRADE) {\n\n    joins {\n      joining(INSTRUMENT) {\n        on(TRADE.INSTRUMENT_ID to INSTRUMENT { INSTRUMENT_ID })\n      }\n    }\n\n    fields {\n      TRADE.allFields()\n\n      INSTRUMENT.INSTRUMENT_NAME\n      INSTRUMENT.MARKET_ID withPrefix INSTRUMENT\n      INSTRUMENT.CURRENCY_ID withAlias "CURRENCY"\n    }\n  }\n}\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"withPrefix")," and ",(0,r.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"withAlias")),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"withPrefix")," adds a prefix to the standard field name. For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"INSTRUMENT.MARKET_ID withPrefix SYMBOL")," becomes ",(0,r.kt)("inlineCode",{parentName:"p"},"SYMBOL_MARKET_ID"),"."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"withAlias")," gives the field an alternative name for the view."),(0,r.kt)("p",{parentName:"admonition"},"More info ",(0,r.kt)("a",{parentName:"p",href:"/database/fields-tables-views/views/views-basics/#overriding-a-field-name"},"here"),".")),(0,r.kt)("p",null,"Run ",(0,r.kt)("a",{parentName:"p",href:"/getting-started/developer-training/training-content-day1/#5-build-process"},"build")," to make the view ready for use, then add it to the Data Server:\u200b"),(0,r.kt)("p",null,"Now go to the Data Server definition (inside the ",(0,r.kt)("strong",{parentName:"p"},"-script-config")," module). Replace the ",(0,r.kt)("inlineCode",{parentName:"p"},"ALL_TRADES")," query in the Data Server with the new ",(0,r.kt)("inlineCode",{parentName:"p"},"TRADE_VIEW"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'dataServer {\u200b\n     query("ALL_TRADES", TRADE_VIEW)\u200b\n}\u200b\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"In the example above, you are exposing a view through a Data Server query. It's also possible to inject a view into a Request Server or even your Event Handler code. This makes it easier to access complex data from multiple tables in your Kotlin or Java code. Look at ",(0,r.kt)("strong",{parentName:"p"},"package global.genesis.gen.view.repository"),". ")),(0,r.kt)("p",null,"Run ",(0,r.kt)("a",{parentName:"p",href:"/getting-started/developer-training/training-content-day1/#5-build-process"},"build"),", ",(0,r.kt)("a",{parentName:"p",href:"/getting-started/developer-training/training-content-day1/#deploying-the-alpha-product"},"deploy"),", and test the view with Postman or Console.\u200b"),(0,r.kt)("h3",{id:"exercise-31-using-views"},"Exercise 3.1: using views"),(0,r.kt)("admonition",{title:"ESTIMATED TIME",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"30 mins")),(0,r.kt)("p",null,"Extend the ",(0,r.kt)("strong",{parentName:"p"},"TRADE_VIEW")," to connect TRADE to COUNTERPARTY:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Add the respective join (as we did with ",(0,r.kt)("inlineCode",{parentName:"li"},"INSTRUMENT"),").\u200b"),(0,r.kt)("li",{parentName:"ol"},"Add the ",(0,r.kt)("inlineCode",{parentName:"li"},"COUNTERPARTY.COUNTERPARTY_NAME"),"."),(0,r.kt)("li",{parentName:"ol"},"Test it.")),(0,r.kt)("h2",{id:"extending-our-application-further"},"Extending our application further"),(0,r.kt)("p",null,"Moving on, for our app to be able to keep positions based on the trades, we now need to extend our data model."),(0,r.kt)("h3",{id:"adding-new-fields"},"Adding new fields\u200b"),(0,r.kt)("p",null,"Let\xb4s add new fields to the Trade table\u200b. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'field("TRADE_DATE", type = DATE)\u200b\nfield("ENTERED_BY", type = STRING)\u200b\nfield(name = "TRADE_STATUS", type = ENUM("NEW", "ALLOCATED", "CANCELLED", default = "NEW"))\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'table (name = "TRADE", id = 2000) {\n    ...\n    TRADE_DATE\n    ENTERED_BY\n    TRADE_STATUS\n\n    primaryKey {\n        TRADE_ID\n    }\n}\n')),(0,r.kt)("p",null,"And new fields to create the POSITION and INSTRUMENT_PRICE tables:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'field("POSITION_ID", type = STRING)\u200b\nfield("NOTIONAL", type = DOUBLE)\u200b\nfield("LAST_PRICE", type = DOUBLE)\u200b\nfield("VALUE", type = DOUBLE)\u200b\nfield("PNL", type = DOUBLE)\u200b\n')),(0,r.kt)("p",null,"When you finish, remember to run ",(0,r.kt)("a",{parentName:"p",href:"/getting-started/developer-training/training-content-day1/#generatefields"},"genesis-generated-fields"),"."),(0,r.kt)("h3",{id:"extending-the-trade-table-and-adding-a-position-table"},"Extending the Trade table and adding a Position table"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Add the new fields into the TRADE table.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Then create the POSITION and INSTRUMENT_PRICE tables."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'table(name = "POSITION", id = 2003) {\n    sequence(POSITION_ID, "PS") //autogenerated sequence\n    INSTRUMENT_ID not null\n    QUANTITY\n    NOTIONAL\n    VALUE\n    PNL\n\n    primaryKey {\n        POSITION_ID\n    }\n    indices {\n        unique {\n            INSTRUMENT_ID\n        }\n    }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'table(name = "INSTRUMENT_PRICE", id = 2004) {\n    INSTRUMENT_ID\n    LAST_PRICE\n    primaryKey {\n        INSTRUMENT_ID\n    }\n}\n')),(0,r.kt)("p",null,"When you finish, remember to  run ",(0,r.kt)("a",{parentName:"p",href:"/getting-started/developer-training/training-content-day1/#generatedao"},"genesis-generated-dao\u200b")," and ",(0,r.kt)("a",{parentName:"p",href:"/getting-started/developer-training/training-content-day1/#5-build-process"},"build"),".\u200b"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"As we previously generated the fields, autocompletion helps you to define the tables more quickly, and with fewer errors. Also note that Genesis provides several autogenerated primary keys: ",(0,r.kt)("strong",{parentName:"p"},"sequence"),", ",(0,r.kt)("strong",{parentName:"p"},"uuid"),", ",(0,r.kt)("strong",{parentName:"p"},"autoincrement"),".")),(0,r.kt)("h3",{id:"automated-testing"},"Automated testing"),(0,r.kt)("p",null,"So far we have been testing our work manually, using Genesis Console or some HTTP client.\nNow the time has come to start writing some automated tests for our application."),(0,r.kt)("p",null,"Before running tests, install the ",(0,r.kt)("a",{parentName:"p",href:"https://genesisglobal.jfrog.io/artifactory/community-uploads/foundationdb-6.2.15-x64.msi"},"FoundationDB")," locally to allow a proper database mocking. Further details regarding FoundationDB can be found ",(0,r.kt)("a",{parentName:"p",href:"https://www.foundationdb.org/"},"here"),"."),(0,r.kt)("p",null,"Let's create an automated test that inserts and retrieves some data using the platform's automated test support components. In summary:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"load data from a CSV file "),(0,r.kt)("li",{parentName:"ul"},"retrieve data using ",(0,r.kt)("a",{parentName:"li",href:"/database/"},"Genesis Database API")," ")),(0,r.kt)("p",null,"So, first, let's do the following:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Add the test implementation dependencies in the file ",(0,r.kt)("strong",{parentName:"li"},"alpha\\server\\jvm\\alpha-config\\build.gradle.kts"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'dependencies {\n    ...\n    testImplementation("global.genesis:genesis-dbtest")\n    testImplementation(project(path = ":alpha-dictionary-cache", configuration = "codeGen"))\n}\n\ndescription = "alpha-config"\n')),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Add a new test class to the ",(0,r.kt)("em",{parentName:"li"},"alpha-config")," module (",(0,r.kt)("strong",{parentName:"li"},"alpha\\server\\jvm\\alpha-config\\src\\test\\kotlin"),") called ",(0,r.kt)("inlineCode",{parentName:"li"},"TradeViewTest.kt")),(0,r.kt)("li",{parentName:"ol"},"Add an empty txt file ",(0,r.kt)("em",{parentName:"li"},"donotdelete.txt")," to the genesis home folder (",(0,r.kt)("strong",{parentName:"li"},"alpha\\server\\jvm\\alpha-config\\src\\test\\resources\\GenesisHome"),"). This folder is needed for automated tests. "),(0,r.kt)("li",{parentName:"ol"},"Add TEST_DATA.csv to a data folder (",(0,r.kt)("strong",{parentName:"li"},"alpha\\server\\jvm\\alpha-config\\src\\test\\resources\\data"),")")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csv"},"#INSTRUMENT\nINSTRUMENT_ID,INSTRUMENT_NAME\n1,FOO.L\n2,BAR.L\n#COUNTERPARTY\nCOUNTERPARTY_ID,COUNTERPARTY_LEI,COUNTERPARTY_NAME,\n1,335800A8HK6JBITVPA30,Test Ltd,\n2,655FG0324Q4LUVJJMS11,Testing AG,\n")),(0,r.kt)("p",null,"The directory tree should like below:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(16078).Z,width:"485",height:"522"})),(0,r.kt)("p",null,"The test class should look like below:"),(0,r.kt)("h3",{id:"test-class-setup"},"Test class setup"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'package global.genesis\nimport global.genesis.db.util.AbstractDatabaseTest\nimport global.genesis.db.util.TestUtil\nimport global.genesis.dictionary.GenesisDictionary\nimport global.genesis.gen.dao.Trade\nimport global.genesis.gen.dao.enums.Direction\nimport global.genesis.gen.view.entity.TradeView\nimport global.genesis.gen.view.repository.TradeViewAsyncRepository\nimport kotlinx.coroutines.flow.count\nimport kotlinx.coroutines.flow.toList\nimport kotlinx.coroutines.runBlocking\nimport org.joda.time.DateTime\nimport org.junit.Assert.assertEquals\nimport org.junit.Before\nimport org.junit.Test\nimport javax.inject.Inject\n\nclass TradeViewTest : AbstractDatabaseTest() {\n    @Inject\n    lateinit var enhancedTradeViewRepository: TradeViewAsyncRepository\n    override fun createMockDictionary(): GenesisDictionary = prodDictionary()\n\n    @Before\n    fun setup() {\n        TestUtil.loadData(resolvePath("data/TEST_DATA.csv"), rxDb)\n    }\n    private fun buildTrade(tradeId: String, now: DateTime = DateTime.now()) =\n        Trade.builder()\n            .setTradeDate(now)\n            .setCounterpartyId("2") // COUNTERPARTY_NAME = "Testing AG"\n            .setInstrumentId("2")   // INSTRUMENT_NAME = "BAR.L"\n            .setPrice(12.0)\n            .setQuantity(100)\n            .setDirection(Direction.BUY)\n            .setTradeId(tradeId)\n            .build()\n\n    @Test\n    fun test_get_single_trade_by_id() = runBlocking {\n        val now = DateTime.now()\n        val trade = buildTrade("1L", now)\n        rxEntityDb.insert(trade).blockingGet()\n        val tradeView = enhancedTradeViewRepository.get(TradeView.ById("1"))\n        if (tradeView != null) {\n            assertEquals("Testing AG", tradeView.counterpartyName)\n            assertEquals("FOO.L", tradeView.instrumentName)\n            assertEquals(now, tradeView.tradeDate)\n            assertEquals(12.0, tradeView.price, 0.0)\n            assertEquals((100).toInt(), tradeView.quantity)\n            assertEquals(Direction.BUY, tradeView.direction)\n        }\n    }\n\n    @Test\n    fun test_with_single_trade__use_getBulk() = runBlocking {\n        val now = DateTime.now()\n        val trade = buildTrade("1L", now)\n        rxEntityDb.insert(trade).blockingGet()\n        val tradeViewList = enhancedTradeViewRepository.getBulk().toList()\n        assertEquals(1, tradeViewList.size)\n        val tradeView = tradeViewList.first()\n        assertEquals("Testing AG", tradeView.counterpartyName)\n        assertEquals("BAR.L", tradeView.instrumentName)\n        assertEquals(now, tradeView.tradeDate)\n        assertEquals(12.0, tradeView.price, 0.0)\n        assertEquals((100).toInt(), tradeView.quantity)\n        assertEquals(Direction.BUY, tradeView.direction)\n    }\n\n    @Test\n    fun test_get_multiple_trades() = runBlocking {\n        rxEntityDb.insertAll(\n            buildTrade("1T"),\n            buildTrade("2T"),\n            buildTrade("3T"),\n            buildTrade("4T"),\n            buildTrade("5T"),\n        ).blockingGet()\n        val count = enhancedTradeViewRepository.getBulk().count()\n        assertEquals(5, count)\n    }\n}\n')),(0,r.kt)("p",null,"You can run the test from IntelliJ by right-clicking on the test class and selecting ",(0,r.kt)("inlineCode",{parentName:"p"},"Run TradeViewTest")," or from the command line as well."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:"title='Running TradeViewTest from the command line'",title:"'Running",TradeViewTest:!0,from:!0,the:!0,command:!0,"line'":!0},'./gradlew :genesisproduct-alpha:alpha-config:test --tests "global.genesis.TradeViewTest"\n')),(0,r.kt)("h2",{id:"calculated-data"},"Calculated data"),(0,r.kt)("p",null,"Derived fields are a useful way of providing calculated data, but note that you must only use fields that are in the view."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'derivedField("CONSIDERATION", DOUBLE) {\n    withInput(TRADE.QUANTITY, TRADE.PRICE) { QUANTITY, PRICE ->\n        QUANTITY * PRICE\n    }\n}\n')),(0,r.kt)("p",null,"Add this ",(0,r.kt)("inlineCode",{parentName:"p"},"derivedField")," to your view now. The final view should look like this."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'view("TRADE_VIEW", TRADE) {\n\n    joins {\n        joining(COUNTERPARTY) {\n            on(TRADE.COUNTERPARTY_ID to COUNTERPARTY { COUNTERPARTY_ID })\n        }\n        joining(INSTRUMENT) {\n            on(TRADE.INSTRUMENT_ID to INSTRUMENT { INSTRUMENT_ID })\n        }\n    }\n\n    fields {\n        TRADE.allFields()\n\n        COUNTERPARTY.COUNTERPARTY_NAME\n        INSTRUMENT.INSTRUMENT_NAME\n        INSTRUMENT.MARKET_ID withPrefix INSTRUMENT\n        INSTRUMENT.CURRENCY_ID withAlias "CURRENCY"\n\n        derivedField("CONSIDERATION", DOUBLE) {\n            withInput(TRADE.QUANTITY, TRADE.PRICE) { QUANTITY, PRICE ->\n                QUANTITY * PRICE\n            }\n        }\n    }\n}\n\n')),(0,r.kt)("h3",{id:"exercise-32-derived-fields"},"Exercise 3.2: derived fields"),(0,r.kt)("admonition",{title:"ESTIMATED TIME",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"20 mins")),(0,r.kt)("p",null,'Let\'s add a new derived field in the TRADE_VIEW now. The derived field should display ASSET_CLASS from the INSTRUMENT join. If this field is null or empty, the view should display "UNKNOWN".'),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"After changing the files, remember to run ",(0,r.kt)("a",{parentName:"p",href:"/getting-started/developer-training/training-content-day1/#5-build-process"},"build")," and ",(0,r.kt)("a",{parentName:"p",href:"/getting-started/developer-training/training-content-day1/#deploying-the-alpha-product"},"deploy"))),(0,r.kt)("h2",{id:"consolidators"},"Consolidators"),(0,r.kt)("p",null,"Consolidators perform data aggregation and calculations that can either be:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"real-time - when used as a service"),(0,r.kt)("li",{parentName:"ul"},"on-demand - when used as objects ")),(0,r.kt)("p",null,"Consolidators follow an SQL-like syntax: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"consolidator(TRADE, ORDER) {\n    select {\n        ORDER {\n            sum { price * quantity } into TOTAL_NOTIONAL\n            count() into TRADE_COUNT\n        }\n    }\n    groupBy { Order.ById(orderId) } \n}\n")),(0,r.kt)("p",null,"In the above example, we aggregate data from the TRADE table into the ORDER table. We group by orderId and we count the number of trades and sum the notional. For further details, see ",(0,r.kt)("a",{parentName:"p",href:"/server/consolidator/introduction/"},"here"),"."),(0,r.kt)("p",null,"Some features provided by Consolidators: "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Type safety"),(0,r.kt)("li",{parentName:"ul"},"Declarative syntax"),(0,r.kt)("li",{parentName:"ul"},"comprehensive built-in logging")),(0,r.kt)("p",null,"In our case, Consolidators are a good fit for consolidating a position table from trades. "),(0,r.kt)("h4",{id:"define-the-position-keeping-logic-in-the-consolidator"},"Define the position-keeping logic in the consolidator"),(0,r.kt)("p",null,"Before defining the Consolidator, we should insert some data in the ",(0,r.kt)("inlineCode",{parentName:"p"},"INSTRUMENT_PRICE")," table using the command ",(0,r.kt)("a",{parentName:"p",href:"/operations/commands/server-commands/#sendit-script"},(0,r.kt)("inlineCode",{parentName:"a"},"SendIt")),". To do that, let's run server commands directly from a command line using PowerShell (or Windows Command Prompt) to access your WSL instance, through user 'genesis' to have access to the Genesis Platform commands as we did ",(0,r.kt)("a",{parentName:"p",href:"/getting-started/developer-training/training-content-day1/#running-server-commands"},"before"),"."),(0,r.kt)("p",null,"From the command line opened, in the ",(0,r.kt)("em",{parentName:"p"},"/tmp")," folder, save this csv as INSTRUMENT_PRICE.csv using your favorite editor (i.e. ",(0,r.kt)("a",{parentName:"p",href:"https://www.vim.org/"},"vim")," or ",(0,r.kt)("a",{parentName:"p",href:"https://www.nano-editor.org/"},"nano"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csv"},"INSTRUMENT_ID,LAST_PRICE\n1,10\n")),(0,r.kt)("p",null,"Then go to the folder where the csv is located and run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"SendIt -t INSTRUMENT_PRICE -f INSTRUMENT_PRICE.csv\n")),(0,r.kt)("p",null,"Make sure you settled the INSTRUMENT_ID field as not nullable in the TRADE and POSITION tables, as the consolidations will use it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:"{4,10}","{4,10}":!0},'tables {\n    table (name = "TRADE" ...) {\n        ...\n        INSTRUMENT_ID not null\n        ...\n    }\n\n    table(name = "POSITION" ...) {\n        ...\n        INSTRUMENT_ID not null\n        ...        \n    }\n    ...\n}\n')),(0,r.kt)("p",null,"Add the query ALL_POSITIONS in the ",(0,r.kt)("strong",{parentName:"p"},"alpha-dataserver.kts")," file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:"{3}","{3}":!0},'dataServer {\n    ...\n    query("ALL_POSITIONS", POSITION)\n}\n')),(0,r.kt)("p",null,"When you finish, remember to run ",(0,r.kt)("a",{parentName:"p",href:"/getting-started/developer-training/training-content-day1/#generatedao"},"genesis-generated-dao\u200b")," and ",(0,r.kt)("a",{parentName:"p",href:"/getting-started/developer-training/training-content-day1/#5-build-process"},"build"),".\u200b"),(0,r.kt)("p",null,"So, let's define a ",(0,r.kt)("strong",{parentName:"p"},"alpha-consolidator.kts")," file inside ",(0,r.kt)("strong",{parentName:"p"},"alpha-script-config/src/main/resources/scripts"),". This is where you define the consolidator logic."),(0,r.kt)("p",null,"The Consolidator is going to increase or decrease the quantity for POSITION records, based on the TRADE table updates. It also needs to calculate the new notional."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'import global.genesis.gen.config.tables.POSITION.NOTIONAL\nimport global.genesis.gen.config.tables.POSITION.QUANTITY\nimport global.genesis.gen.config.tables.POSITION.VALUE\nimport global.genesis.gen.dao.Position\nimport global.genesis.gen.dao.enums.Direction\n\nconsolidators {\n    config {}\n    consolidator("CONSOLIDATE_POSITIONS", TRADE_VIEW, POSITION) {\n        config {\n            logLevel = DEBUG\n            logFunctions = true\n        }\n        select {\n            sum {\n                when(direction) {\n                    Direction.BUY -> when(tradeStatus) {\n                        TradeStatus.NEW -> quantity\n                        TradeStatus.ALLOCATED -> quantity\n                        TradeStatus.CANCELLED -> 0\n                    }\n                    Direction.SELL -> when(tradeStatus) {\n                        TradeStatus.NEW -> -quantity\n                        TradeStatus.ALLOCATED -> -quantity\n                        TradeStatus.CANCELLED -> 0\n                    }\n                    else -> null\n                }\n            } into QUANTITY\n            sum {\n                val quantity = when(direction) {\n                    Direction.BUY -> quantity\n                    Direction.SELL -> -quantity\n                    else -> 0\n                }\n                quantity * price\n            } into VALUE\n        }\n        onCommit {\n            val quantity = output.quantity ?: 0\n            output.notional = input.price * quantity\n            output.pnl = output.value - output.notional\n        }\n        groupBy {\n            instrumentId\n        } into {\n            lookup {\n                Position.ByInstrumentId(groupId)\n            }\n            build {\n                Position {\n                    instrumentId = groupId\n                    quantity = 0\n                    value = 0.0\n                    pnl = 0.0\n                    notional = 0.0\n                }\n            }\n        }\n    }\n}\n')),(0,r.kt)("h4",{id:"update-the-system-files"},"Update the system files"),(0,r.kt)("h5",{id:"update-the-processesxml-file"},"Update the processes.xml file"),(0,r.kt)("p",null,"As Consolidators run on their own process, we need to add a new entry to ",(0,r.kt)("strong",{parentName:"p"},"alpha-processes.xml")," with the definition of the Consolidator process."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<process name="ALPHA_CONSOLIDATOR">\n    <groupId>ALPHA</groupId>\n    <start>true</start>\n    <options>-Xmx256m -DRedirectStreamsToLog=true -DXSD_VALIDATE=false</options>\n    <module>genesis-pal-consolidator</module>\n    <package>global.genesis.pal.consolidator</package>\n    <script>alpha-consolidator.kts<\/script>\n    <description>Consolidates trades to calculate positions</description>\n    <loggingLevel>DEBUG,DATADUMP_ON</loggingLevel>\n    <language>pal</language>\n</process>\n')),(0,r.kt)("h5",{id:"update-the-service-definitionsxml-file"},"Update the service-definitions.xml file"),(0,r.kt)("p",null,"This file lists all the active services for the Positions application. You can see entries have been added automatically when the data server, request server and event handler were generated."),(0,r.kt)("p",null,"Add a new entry to ",(0,r.kt)("strong",{parentName:"p"},"alpha-service-definitions.xml")," with the consolidator details. Remember the port numbers should be free and, ideally, sequential."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<configuration>\n    ...\n    <service host="localhost" name="ALPHA_CONSOLIDATOR" port="11002"/>\n</configuration>\n')),(0,r.kt)("p",null,"Run ",(0,r.kt)("a",{parentName:"p",href:"/getting-started/developer-training/training-content-day1/#5-build-process"},"build"),"\nand ",(0,r.kt)("a",{parentName:"p",href:"/getting-started/developer-training/training-content-day1/#deploying-the-alpha-product"},"deploy")," tasks to verify that the new process works as expected."),(0,r.kt)("h2",{id:"ui-configuring"},"UI configuring"),(0,r.kt)("p",null,"Let's add a grid in the UI to display the Positions. We could use ",(0,r.kt)("a",{parentName:"p",href:"/getting-started/developer-training/training-content-day2/#entitymanagement"},"Entity Management")," again, but here we will use Grid Pro in ",(0,r.kt)("inlineCode",{parentName:"p"},"@genesislcap/foundation-zero-grid-pro")," ",(0,r.kt)("a",{parentName:"p",href:"/getting-started/developer-training/training-content-day2/#genesis-packages"},"Genesis package")," presented in ",(0,r.kt)("a",{parentName:"p",href:"/getting-started/developer-training/training-content-day2/"},"Day 2"),", as this approach offers more flexibility to customise the HTML and CSS."),(0,r.kt)("p",null,"First, open the file ",(0,r.kt)("strong",{parentName:"p"},"home.styles.ts")," and add the code below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},".split-layout {\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n    width: 100%;\n}\n\n.top-layout {\nheight: 90%;\ndisplay: flex;\nflex-direction: row;\n}\n\n.positions-card {\nflex: 1;\nmargin: calc(var(--design-unit) * 3px);\n}\n\n.card-title {\npadding: calc(var(--design-unit) * 3px);\nbackground-color: #22272a;\nfont-size: 13px;\nfont-weight: bold;\n}\n")),(0,r.kt)("p",null,"Open the file ",(0,r.kt)("strong",{parentName:"p"},"home.ts")," and import ",(0,r.kt)("em",{parentName:"p"},"Grid Pro")," and ",(0,r.kt)("em",{parentName:"p"},"Connect"),". Then, add them as attributes to the Home class."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{2,3,9,11}","{2,3,9,11}":!0},"...\nimport {ZeroGridPro} from '@genesislcap/foundation-zero-grid-pro';\nimport {Connect} from '@genesislcap/foundation-comms';\n...\nexport class Home extends FASTElement {\n    @observable columns: any = COLUMNS;\n\n    public positionsGrid!: ZeroGridPro;\n\n    @Connect connection: Connect;\n\n    constructor() {\n      super();\n    }\n}\n")),(0,r.kt)("p",null,"Finally, go to the file ",(0,r.kt)("strong",{parentName:"p"},"home.template.ts")," and import the required components. Then, add a constant holding the Position columns, and some ",(0,r.kt)("inlineCode",{parentName:"p"},"<div>"),"s to format the final HTML."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html",metastring:"{1,3,5-12,15,16,25-39}","{1,3,5-12,15,16,25-39}":!0},"import {html, repeat, when, ref} from '@microsoft/fast-element';\nimport type {Home} from './home';\n\nexport const positionsColumnDefs: any[] = [\n    {field: 'POSITION_ID', headerName: 'Id'},\n    {field: 'INSTRUMENT_ID', headerName: 'Instrument'},\n    {field: 'QUANTITY', headerName: 'Quantity'},\n    {field: 'NOTIONAL', headerName: 'Notional'},\n    {field: 'VALUE', headerName: 'Value'},\n    {field: 'PNL', headerName: 'Pnl'},\n];\n\nexport const HomeTemplate = html<Home>`\n<div class=\"split-layout\">\n    <div class=\"top-layout\">\n        <entity-management\n          resourceName=\"ALL_TRADES\"\n          title = \"Trades\"\n          entityLabel=\"Trades\"\n          createEvent = \"EVENT_TRADE_INSERT\"\n          :columns=${x => x.columns}\n        ></entity-management>\n    </div>\n    <div class=\"top-layout\">\n        <zero-card class=\"positions-card\">\n            <span class=\"card-title\">Positions</span>\n            <zero-grid-pro ${ref('positionsGrid')} rowHeight=\"45\" only-template-col-defs>\n                ${when(x => x.connection.isConnected, html`\n                  <grid-pro-genesis-datasource resourceName=\"ALL_POSITIONS\"></grid-pro-genesis-datasource>\n                  ${repeat(() => positionsColumnDefs, html`\n                    <grid-pro-column :definition=\"${x => x}\" />\n                  `)}\n                `)}\n            </zero-grid-pro>\n        </zero-card>\n    </div>\n</div>\n`;\n")),(0,r.kt)("h3",{id:"exercise-33-data-grids"},"Exercise 3.3: data grids"),(0,r.kt)("admonition",{title:"ESTIMATED TIME",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"15 mins")),(0,r.kt)("p",null,"Change the Position constant to delete the POSITION_ID, as this field does not have to be in the grid. Change some CSS parameters to improve your application's look and feel."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Don't forget to reload the client side to see the upgrades.")))}c.isMDXComponent=!0},16078:function(e,t,n){t.Z=n.p+"assets/images/dir-tree-alpha-894af32fe2d66dd2b86f1e732b4c6e72.png"}}]);