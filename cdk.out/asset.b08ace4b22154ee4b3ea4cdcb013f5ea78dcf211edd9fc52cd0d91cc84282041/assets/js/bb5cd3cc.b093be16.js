"use strict";(self.webpackChunk_genesislcap_docs=self.webpackChunk_genesislcap_docs||[]).push([[52051],{79884:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return u},default:function(){return k},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return d}});var a=n(87462),l=n(63366),i=(n(67294),n(3905)),r=(n(61839),["components"]),o={title:"Consolidator - Advanced",sidebar_label:"Advanced",id:"advanced",keywords:["server","consolidator","advanced"],tags:["server","consolidator","advanced"]},u=void 0,p={unversionedId:"server/consolidator/advanced",id:"server/consolidator/advanced",title:"Consolidator - Advanced",description:"Introduction | Basics |  Advanced | Examples | Configuring runtime | Testing",source:"@site/docs/03_server/07_consolidator/03_advanced.md",sourceDirName:"03_server/07_consolidator",slug:"/server/consolidator/advanced",permalink:"/next/server/consolidator/advanced",draft:!1,tags:[{label:"server",permalink:"/next/tags/server"},{label:"consolidator",permalink:"/next/tags/consolidator"},{label:"advanced",permalink:"/next/tags/advanced"}],version:"current",sidebarPosition:3,frontMatter:{title:"Consolidator - Advanced",sidebar_label:"Advanced",id:"advanced",keywords:["server","consolidator","advanced"],tags:["server","consolidator","advanced"]},sidebar:"serverModulesSidebar",previous:{title:"Basics",permalink:"/next/server/consolidator/basics"},next:{title:"Examples",permalink:"/next/server/consolidator/examples"}},s={},d=[{value:"Standard functions",id:"standard-functions",level:2},{value:"Examples",id:"examples",level:3},{value:"Custom functions",id:"custom-functions",level:2},{value:"using",id:"using",level:3},{value:"usingRow",id:"usingrow",level:3},{value:"withOperations",id:"withoperations",level:3},{value:"withAggregation",id:"withaggregation",level:3}],m={toc:d};function k(e){var t=e.components,n=(0,l.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/server/consolidator/introduction"},"Introduction")," | ",(0,i.kt)("a",{parentName:"p",href:"/server/consolidator/basics"},"Basics")," |  ",(0,i.kt)("a",{parentName:"p",href:"/server/consolidator/advanced"},"Advanced")," | ",(0,i.kt)("a",{parentName:"p",href:"/server/consolidator/examples"},"Examples")," | ",(0,i.kt)("a",{parentName:"p",href:"/server/consolidator/configuring-runtime"},"Configuring runtime")," | ",(0,i.kt)("a",{parentName:"p",href:"/server/consolidator/testing"},"Testing")),(0,i.kt)("p",null,"In this page, we look in more detail at the functions that are the building blocks of the select statement in a ",(0,i.kt)("inlineCode",{parentName:"p"},"consolidator")," specification."),(0,i.kt)("h2",{id:"standard-functions"},"Standard functions"),(0,i.kt)("p",null,"With one exception, all functions require input. "),(0,i.kt)("p",null,"The exception is ",(0,i.kt)("inlineCode",{parentName:"p"},"count"),", which can either have an input or no input."),(0,i.kt)("p",null,"The syntax for an input to a GPAL function is ",(0,i.kt)("inlineCode",{parentName:"p"},"sum { feeAmount }")),(0,i.kt)("p",null,"Within the curly brackets of the function, you can access all the fields on a row, and you can use any kotlin operation on the row. The function will be applied over the result, unless the result is null, in which case it will be ignored."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Function"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Input"),(0,i.kt)("th",{parentName:"tr",align:null},"Output"),(0,i.kt)("th",{parentName:"tr",align:null},"Index Scan"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"sum"),(0,i.kt)("td",{parentName:"tr",align:null},"sums values in the value field"),(0,i.kt)("td",{parentName:"tr",align:null},"any number"),(0,i.kt)("td",{parentName:"tr",align:null},"same as input"),(0,i.kt)("td",{parentName:"tr",align:null},"never")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"count"),(0,i.kt)("td",{parentName:"tr",align:null},"counts all records"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null},"INTEGER"),(0,i.kt)("td",{parentName:"tr",align:null},"never")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"}),(0,i.kt)("td",{parentName:"tr",align:null},"counts records that have a value"),(0,i.kt)("td",{parentName:"tr",align:null},"anything"),(0,i.kt)("td",{parentName:"tr",align:null},"INTEGER"),(0,i.kt)("td",{parentName:"tr",align:null},"never")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"countDistinct"),(0,i.kt)("td",{parentName:"tr",align:null},"counts distinct value values"),(0,i.kt)("td",{parentName:"tr",align:null},"anything"),(0,i.kt)("td",{parentName:"tr",align:null},"INTEGER"),(0,i.kt)("td",{parentName:"tr",align:null},"always")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"countBig"),(0,i.kt)("td",{parentName:"tr",align:null},"counts all records"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null},"LONG"),(0,i.kt)("td",{parentName:"tr",align:null},"never")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"}),(0,i.kt)("td",{parentName:"tr",align:null},"counts records that have a value"),(0,i.kt)("td",{parentName:"tr",align:null},"any value"),(0,i.kt)("td",{parentName:"tr",align:null},"LONG"),(0,i.kt)("td",{parentName:"tr",align:null},"never")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"avg"),(0,i.kt)("td",{parentName:"tr",align:null},"average value"),(0,i.kt)("td",{parentName:"tr",align:null},"any number"),(0,i.kt)("td",{parentName:"tr",align:null},"same as input"),(0,i.kt)("td",{parentName:"tr",align:null},"always")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"min"),(0,i.kt)("td",{parentName:"tr",align:null},"minimum value"),(0,i.kt)("td",{parentName:"tr",align:null},"any number"),(0,i.kt)("td",{parentName:"tr",align:null},"same as input"),(0,i.kt)("td",{parentName:"tr",align:null},"sometimes ",(0,i.kt)("inlineCode",{parentName:"td"},"*"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"max"),(0,i.kt)("td",{parentName:"tr",align:null},"maximum value"),(0,i.kt)("td",{parentName:"tr",align:null},"any number"),(0,i.kt)("td",{parentName:"tr",align:null},"same as input"),(0,i.kt)("td",{parentName:"tr",align:null},"sometimes ",(0,i.kt)("inlineCode",{parentName:"td"},"*"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"stdev"),(0,i.kt)("td",{parentName:"tr",align:null},"standard deviation for value"),(0,i.kt)("td",{parentName:"tr",align:null},"any number"),(0,i.kt)("td",{parentName:"tr",align:null},"DOUBLE"),(0,i.kt)("td",{parentName:"tr",align:null},"always")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"stdevp"),(0,i.kt)("td",{parentName:"tr",align:null},"population standard deviation for value"),(0,i.kt)("td",{parentName:"tr",align:null},"any number"),(0,i.kt)("td",{parentName:"tr",align:null},"DOUBLE"),(0,i.kt)("td",{parentName:"tr",align:null},"always")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"variance"),(0,i.kt)("td",{parentName:"tr",align:null},"statistical variance for value"),(0,i.kt)("td",{parentName:"tr",align:null},"any number"),(0,i.kt)("td",{parentName:"tr",align:null},"DOUBLE"),(0,i.kt)("td",{parentName:"tr",align:null},"always")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"variancep"),(0,i.kt)("td",{parentName:"tr",align:null},"population statistical variance for value"),(0,i.kt)("td",{parentName:"tr",align:null},"any number"),(0,i.kt)("td",{parentName:"tr",align:null},"DOUBLE"),(0,i.kt)("td",{parentName:"tr",align:null},"always")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"stringAgg"),(0,i.kt)("td",{parentName:"tr",align:null},"string concatenation"),(0,i.kt)("td",{parentName:"tr",align:null},"any string"),(0,i.kt)("td",{parentName:"tr",align:null},"STRING"),(0,i.kt)("td",{parentName:"tr",align:null},"sometimes ",(0,i.kt)("inlineCode",{parentName:"td"},"+"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"checksum"),(0,i.kt)("td",{parentName:"tr",align:null},"calculates a hash over the input"),(0,i.kt)("td",{parentName:"tr",align:null},"any value"),(0,i.kt)("td",{parentName:"tr",align:null},"LONG"),(0,i.kt)("td",{parentName:"tr",align:null},"always")))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"*")," if previous min or max value is removed",(0,i.kt)("br",null),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"+")," if previous any value is changed"),(0,i.kt)("h3",{id:"examples"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"sum { feeAmount }                   // sums the FEE_AMOUNT\nsum { feeAmount + otherAmount }     // sums the total of FEE_AMOUNT plus OTHER_AMOUNT\nsum { feeAmount ?: otherAmount }    // sum FEE_AMOUNT or OTHER_AMOUNT if FEE_AMOUNT is null\ncount ()                            // counts the number of records\ncount { feeAmount }                 // counts the records with a FEE_AMOUNT\n// etc.\n")),(0,i.kt)("h2",{id:"custom-functions"},"Custom functions"),(0,i.kt)("p",null,"Consolidators also support custom functions that allow you to specify behaviour for  join, leave and noop\noperations. "),(0,i.kt)("p",null,"There are two parts to defining a custom functions:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Select an input."),(0,i.kt)("li",{parentName:"ol"},"Define the consolidation.")),(0,i.kt)("p",null,"After the custom function has been defined, it supports the same syntax as other functions, including ",(0,i.kt)("inlineCode",{parentName:"p"},"into"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"pivotBy"),",\netc."),(0,i.kt)("h3",{id:"using"},"using"),(0,i.kt)("p",null,"In the example below, the ",(0,i.kt)("inlineCode",{parentName:"p"},"sum")," function is defined as a custom function. It uses ",(0,i.kt)("inlineCode",{parentName:"p"},"feeAmount")," as the input, and applies three operations:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"using { feeAmount } withOperations {\n    onJoin { previousValue + input }\n    onLeave { previousValue - input }\n    onNoop { previousValue + newInput - oldInput }\n} into value\n")),(0,i.kt)("h3",{id:"usingrow"},"usingRow"),(0,i.kt)("p",null,"There are two types of input for custom functions: "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"using")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"usingRow"),". ",(0,i.kt)("inlineCode",{parentName:"li"},"using")," will take an input from a row, like any other function. The return type determines the type of the function."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"usingRow")," will take the whole row as input. The type of function must be specified. ")),(0,i.kt)("p",null,"The function in the example above can also be implemented with ",(0,i.kt)("inlineCode",{parentName:"p"},"usingRow"),", as shown below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-koltin"},"usingRow(DOUBLE) withOperations {\n    onJoin { previousValue + input.feeAmount.orZero() }\n    onLeave { previousValue - input.feeAmount.orZero() }\n    onNoop { previousValue + newInput.feeAmount.orZero() - oldInput.feeAmount.orZero() }\n} into value\n")),(0,i.kt)("p",null,"This shows the benefit of ",(0,i.kt)("inlineCode",{parentName:"p"},"using"),", as it handles ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," values. The ",(0,i.kt)("inlineCode",{parentName:"p"},"orZero()")," call will take any nullable number and return the value or ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," if it is null."),(0,i.kt)("h3",{id:"withoperations"},"withOperations"),(0,i.kt)("p",null,"This block enables you to specify the behaviour of the different consolidation operations (including the previous example). "),(0,i.kt)("p",null,"In that example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"a join is when a row is added to the consolidation group"),(0,i.kt)("li",{parentName:"ul"},"a leave is when a record leaves the consolidation group"),(0,i.kt)("li",{parentName:"ul"},"a noop is when a record is modified while staying in the same consolidation group")),(0,i.kt)("p",null,"Each operation has access to the operation context as follows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"onJoin"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"previousValue")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"input")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"onLeave"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"previousValue")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"input")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"onNoop"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"previousValue")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"newInput")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"oldInput"))))),(0,i.kt)("h3",{id:"withaggregation"},"withAggregation"),(0,i.kt)("p",null,"This function has a number of different uses:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"where the function needs to consider all values, rather than just one at time "),(0,i.kt)("li",{parentName:"ul"},"where you require a different function outcome, other than update value "),(0,i.kt)("li",{parentName:"ul"},"where no update at all is required"),(0,i.kt)("li",{parentName:"ul"},"where the group id should be reconsolidated")),(0,i.kt)("p",null,"When using this way of calculating custom functions, the ",(0,i.kt)("inlineCode",{parentName:"p"},"input")," variable holds a ",(0,i.kt)("inlineCode",{parentName:"p"},"List")," of aggregation events, and\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"previousValue")," holds the previous value. ",(0,i.kt)("inlineCode",{parentName:"p"},"input")," contains only ",(0,i.kt)("inlineCode",{parentName:"p"},"Join"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Leave")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Noop")," values, which can\nbe accessed as per the example below."),(0,i.kt)("p",null,"Again, the ",(0,i.kt)("inlineCode",{parentName:"p"},"sum")," function uses ",(0,i.kt)("inlineCode",{parentName:"p"},"withAggregation"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"using { feeAmount } withAggregation {\n    input.fold(previousValue) { acc, value ->\n        when (value) {\n            is Join -> acc + value.value\n            is Leave -> acc - value.value\n            is Noop -> acc + value.new - value.old\n        }\n    }.asUpdate()\n}\n")),(0,i.kt)("p",null,"In that example, the ",(0,i.kt)("inlineCode",{parentName:"p"},"asUpdate()")," call at the end is required, as ",(0,i.kt)("inlineCode",{parentName:"p"},"withAggregation")," also supports additional return values of ",(0,i.kt)("inlineCode",{parentName:"p"},"Noop")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"IndexScan"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"Noop")," value will cause the function to ignore the input for this particular field, and there will\nbe no change written to the database. Conversely, returning ",(0,i.kt)("inlineCode",{parentName:"p"},"IndexScan")," will cause the Consolidator to re-evaluate every database value for that key."),(0,i.kt)("p",null,"A similar example to the above would be to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"max")," function. "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If the new maximum value is less than the current maximum, then no data needs to be written to the database."),(0,i.kt)("li",{parentName:"ul"},"If the current maximum value leaves the ",(0,i.kt)("inlineCode",{parentName:"li"},"consolidator")," group, then all values should be evaluated to determine the new maximum value.")))}k.isMDXComponent=!0}}]);