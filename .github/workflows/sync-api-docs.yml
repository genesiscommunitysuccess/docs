name: Sync API Docs

on:
  schedule:
    # Run every day at 9 AM UTC
    - cron: '0 9 * * *'
  workflow_dispatch:
    # Allow manual triggering with options
    inputs:
      target_branch:
        description: 'Target branch for PR (default: preprod)'
        required: false
        default: 'preprod'
        type: string
      dry_run:
        description: 'Dry run mode (skip PR creation)'
        required: false
        default: false
        type: boolean
  push:
    branches:
      # Allow testing on feature branches that match this pattern
      - 'sync-api-docs-*'
    paths:
      - '.github/workflows/sync-api-docs.yml'
      - 'scripts/sync-api-docs.js'
  pull_request:
    branches: [ preprod ]
    types: [ opened, synchronize, ready_for_review ]

jobs:
  sync-api-docs:
    runs-on: ubuntu-latest
    # Run for all non-PR events, or for PRs from branches that contain 'sync-api-docs'
    if: |
      github.event_name != 'pull_request' || 
      contains(github.head_ref, 'sync-api-docs')

    strategy:
      matrix:
        node-version: [20.11.0]
    
    env:
      # Auto-enable safe testing mode for PRs
      IS_PR_CONTEXT: ${{ github.event_name == 'pull_request' }}
      AUTO_DRY_RUN: ${{ github.event_name == 'pull_request' || inputs.dry_run }}
      TARGET_BRANCH: ${{ inputs.target_branch || (github.event_name == 'pull_request' && github.head_ref) || 'preprod' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --loglevel=error --no-update-notifier
      
      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
      
      - name: Display Testing Context
        run: |
          echo "üéØ **Testing Context**"
          echo "Event: ${{ github.event_name }}"
          echo "Is PR Context: ${{ env.IS_PR_CONTEXT }}"
          echo "Auto Dry Run: ${{ env.AUTO_DRY_RUN }}"
          echo "Target Branch: ${{ env.TARGET_BRANCH }}"
          echo "Source Branch: ${{ github.ref_name }}"
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "Head Ref: ${{ github.head_ref }}"
            echo "Branch Filter: Only runs for branches starting with 'sync-api-docs'"
          fi
          echo ""
          if [ "${{ env.IS_PR_CONTEXT }}" == "true" ]; then
            echo "üõ°Ô∏è  **SAFE TESTING MODE ENABLED**"
            echo "- This is a PR from sync-api-docs branch"
            echo "- Dry run mode is automatically enabled"
            echo "- No PR will be created to preprod"
            echo "- Testing script functionality only"
          else
            echo "üöÄ **PRODUCTION MODE**"
            echo "- Running in production context"
            echo "- PR creation enabled (unless dry_run is set)"
          fi
      
      - name: Run API docs sync
        id: sync
        run: |
          # Run the sync script with all git operations enabled
          # Use tee to show output in real-time and capture it
          set -o pipefail
          
          echo "üöÄ Starting API docs sync..."
          
          # Choose script arguments based on context
          if [ "${{ env.AUTO_DRY_RUN }}" == "true" ]; then
            echo "Running in dry-run mode..."
            node scripts/sync-api-docs.js --dry-run 2>&1 | tee sync_output.log
          else
            echo "Running in full mode..."
            node scripts/sync-api-docs.js --all 2>&1 | tee sync_output.log
          fi
          
          # Check if the script succeeded
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "‚ùå Sync script failed. Output:"
            cat sync_output.log
            exit 1
          fi
          
          # Extract the version from the output
          VERSION=$(grep "Latest version:" sync_output.log | sed 's/Latest version: //' | head -1)
          if [ -n "$VERSION" ]; then
            echo "‚úÖ Extracted version: $VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è  Could not extract version from output"
            echo "version=unknown" >> $GITHUB_OUTPUT
            echo "Full output for debugging:"
            cat sync_output.log
          fi
          
          # Clean up
          rm -f sync_output.log
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check for changes
        id: check_changes
        run: |
          echo "üîç Checking for changes in working directory..."
          
          # Use git diff and git status to check for changes
          git_status_output=$(git status --porcelain)
          
          if [ -n "$git_status_output" ]; then
            echo "‚úÖ Changes detected:"
            echo "$git_status_output"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            
            if [ "${{ env.AUTO_DRY_RUN }}" == "true" ]; then
              echo ""
              echo "üèÉ‚Äç‚ôÇÔ∏è DRY RUN MODE - Changes detected but will not be committed"
            fi
          else
            echo "‚ÑπÔ∏è  No changes detected in working directory"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi
          
          # Also show git status for debugging
          echo ""
          echo "Full git status:"
          git status
      
      - name: Create Pull Request
        if: steps.check_changes.outputs.has_changes == 'true' && env.AUTO_DRY_RUN == 'false'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: sync API docs to version ${{ steps.sync.outputs.version }}'
          title: 'chore: sync API docs to version ${{ steps.sync.outputs.version }}'
          body: |
            This PR was automatically created by the API docs sync workflow.
            
            **Trigger**: ${{ github.event_name }}
            **Target Branch**: ${{ env.TARGET_BRANCH }}
            **Source Branch**: ${{ github.ref_name }}
            
            Changes:
            - Updated @genesislcap packages to version ${{ steps.sync.outputs.version }}
            - Regenerated API documentation from updated packages
            - Updated processedMap with new versions
            
            This is an automated update. Please review the changes and merge if everything looks good.
          branch: sync-api-docs-${{ github.run_id }}
          base: ${{ env.TARGET_BRANCH }}
          delete-branch: true
          labels: |
            automated
            api-docs
            documentation
      
      - name: Dry Run Summary
        if: env.AUTO_DRY_RUN == 'true'
        run: |
          echo "üèÉ‚Äç‚ôÇÔ∏è **DRY RUN MODE** - PR creation skipped"
          echo ""
          echo "üìã **Summary:**"
          echo "- ‚úÖ Script executed successfully"
          if [ "${{ steps.check_changes.outputs.has_changes }}" == "true" ]; then
            echo "- ‚úÖ Changes detected and would be committed"
          else
            echo "- ‚ÑπÔ∏è  No changes detected (packages already up to date)"
          fi
          echo "- ‚úÖ Version: ${{ steps.sync.outputs.version }}"
          echo "- ‚úÖ Target branch: ${{ env.TARGET_BRANCH }}"
          echo ""
          if [ "${{ steps.check_changes.outputs.has_changes }}" == "true" ]; then
            echo "To create the actual PR, re-run without dry_run mode."
          else
            echo "No PR needed - packages are already at the latest version."
          fi
